

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Sep 07 20:54:27 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataCOMRAM
    43  001886                     __pidataCOMRAM:
    44                           	opt stack 0
    45                           
    46                           ;initializer for main@F4434
    47  001886  54                 	db	84
    48  001887  65                 	db	101
    49  001888  73                 	db	115
    50  001889  74                 	db	116
    51  00188A  00                 	db	0
    52                           
    53                           	psect	smallconst
    54  000800                     __psmallconst:
    55                           	opt stack 0
    56  000800  00                 	db	0
    57  000801                     _dpowers:
    58                           	opt stack 0
    59  000801  0001               	dw	1
    60  000803  0000               	dw	0
    61  000805  000A               	dw	10
    62  000807  0000               	dw	0
    63  000809  0064               	dw	100
    64  00080B  0000               	dw	0
    65  00080D  03E8               	dw	1000
    66  00080F  0000               	dw	0
    67  000811  2710               	dw	10000
    68  000813  0000               	dw	0
    69  000815  86A0               	dw	34464
    70  000817  0001               	dw	1
    71  000819  4240               	dw	16960
    72  00081B  000F               	dw	15
    73  00081D  9680               	dw	38528
    74  00081F  0098               	dw	152
    75  000821  E100               	dw	57600
    76  000823  05F5               	dw	1525
    77  000825  CA00               	dw	51712
    78  000827  3B9A               	dw	15258
    79  000829                     __end_of_dpowers:
    80                           	opt stack 0
    81  0000                     _RCREG	set	4014
    82  0000                     _RCSTA	set	4011
    83  0000                     _RCSTAbits	set	4011
    84  0000                     _SPBRG	set	4015
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TXREG	set	4013
    87  0000                     _TXSTA	set	4012
    88  0000                     _CREN	set	32092
    89  0000                     _RCIF	set	31989
    90  0000                     _TXIF	set	31988
    91  000829                     STR_1:
    92  000829  25                 	db	37
    93  00082A  6C                 	db	108	;'l'
    94  00082B  75                 	db	117	;'u'
    95  00082C  2E                 	db	46
    96  00082D  25                 	db	37
    97  00082E  36                 	db	54	;'6'
    98  00082F  2E                 	db	46
    99  000830  36                 	db	54	;'6'
   100  000831  6C                 	db	108	;'l'
   101  000832  75                 	db	117	;'u'
   102  000833  00                 	db	0
   103                           
   104                           ; #config settings
   105  000834  00                 	db	0	; dummy byte at the end
   106  0000                     
   107                           	psect	cinit
   108  001700                     __pcinit:
   109                           	opt stack 0
   110  001700                     start_initialization:
   111                           	opt stack 0
   112  001700                     __initialization:
   113                           	opt stack 0
   114                           
   115                           ; Initialize objects allocated to COMRAM (5 bytes)
   116                           ; load TBLPTR registers with __pidataCOMRAM
   117  001700  0E86               	movlw	low __pidataCOMRAM
   118  001702  6EF6               	movwf	tblptrl,c
   119  001704  0E18               	movlw	high __pidataCOMRAM
   120  001706  6EF7               	movwf	tblptrh,c
   121  001708  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   122  00170A  6EF8               	movwf	tblptru,c
   123  00170C  EE00  F04F         	lfsr	0,__pdataCOMRAM
   124  001710  EE10 F005          	lfsr	1,5
   125  001714                     copy_data0:
   126  001714  0009               	tblrd		*+
   127  001716  CFF5 FFEE          	movff	tablat,postinc0
   128  00171A  50E5               	movf	postdec1,w,c
   129  00171C  50E1               	movf	fsr1l,w,c
   130  00171E  E1FA               	bnz	copy_data0
   131                           
   132                           ; Clear objects allocated to BANK0 (17 bytes)
   133  001720  EE00  F060         	lfsr	0,__pbssBANK0
   134  001724  0E11               	movlw	17
   135  001726                     clear_0:
   136  001726  6AEE               	clrf	postinc0,c
   137  001728  06E8               	decf	wreg,f,c
   138  00172A  E1FD               	bnz	clear_0
   139  00172C                     end_of_initialization:
   140                           	opt stack 0
   141  00172C                     __end_of__initialization:
   142                           	opt stack 0
   143  00172C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  00172E  6EF8               	movwf	tblptru,c
   145  001730  0100               	movlb	0
   146  001732  EF32  F009         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           tblptrh	equ	0xFF7
   149                           tblptrl	equ	0xFF6
   150                           tablat	equ	0xFF5
   151                           postinc0	equ	0xFEE
   152                           wreg	equ	0xFE8
   153                           postdec1	equ	0xFE5
   154                           fsr1l	equ	0xFE1
   155                           
   156                           	psect	dataCOMRAM
   157  00004F                     __pdataCOMRAM:
   158                           	opt stack 0
   159  00004F                     main@F4434:
   160                           	opt stack 0
   161  00004F                     	ds	5
   162                           tblptru	equ	0xFF8
   163                           tblptrh	equ	0xFF7
   164                           tblptrl	equ	0xFF6
   165                           tablat	equ	0xFF5
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           postdec1	equ	0xFE5
   169                           fsr1l	equ	0xFE1
   170                           
   171                           	psect	bssBANK0
   172  000060                     __pbssBANK0:
   173                           	opt stack 0
   174  000060                     ftoa@buf:
   175                           	opt stack 0
   176  000060                     	ds	17
   177                           tblptru	equ	0xFF8
   178                           tblptrh	equ	0xFF7
   179                           tblptrl	equ	0xFF6
   180                           tablat	equ	0xFF5
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           postdec1	equ	0xFE5
   184                           fsr1l	equ	0xFE1
   185                           
   186                           	psect	cstackCOMRAM
   187  000001                     __pcstackCOMRAM:
   188                           	opt stack 0
   189  000001                     ??_isdigit:
   190  000001                     ?___wmul:
   191                           	opt stack 0
   192  000001                     ?___lwdiv:
   193                           	opt stack 0
   194  000001                     ?___lwmod:
   195                           	opt stack 0
   196  000001                     ?___ftpack:
   197                           	opt stack 0
   198  000001                     ?___ftneg:
   199                           	opt stack 0
   200  000001                     ?___aldiv:
   201                           	opt stack 0
   202  000001                     ?___lldiv:
   203                           	opt stack 0
   204  000001                     USART_Write@out:
   205                           	opt stack 0
   206  000001                     ___wmul@multiplier:
   207                           	opt stack 0
   208  000001                     ___lwdiv@dividend:
   209                           	opt stack 0
   210  000001                     ___lwmod@dividend:
   211                           	opt stack 0
   212  000001                     ___ftpack@arg:
   213                           	opt stack 0
   214  000001                     ___ftneg@f1:
   215                           	opt stack 0
   216  000001                     ___aldiv@dividend:
   217                           	opt stack 0
   218  000001                     ___lldiv@dividend:
   219                           	opt stack 0
   220                           
   221                           ; 4 bytes @ 0x0
   222  000001                     	ds	1
   223  000002                     _isdigit$456:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x1
   227  000002                     	ds	1
   228  000003                     isdigit@c:
   229                           	opt stack 0
   230  000003                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000003                     ___lwdiv@divisor:
   233                           	opt stack 0
   234  000003                     ___lwmod@divisor:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x2
   238  000003                     	ds	1
   239  000004                     ___ftpack@exp:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x3
   243  000004                     	ds	1
   244  000005                     ___ftpack@sign:
   245                           	opt stack 0
   246  000005                     ___lwmod@counter:
   247                           	opt stack 0
   248  000005                     ___wmul@product:
   249                           	opt stack 0
   250  000005                     ___lwdiv@quotient:
   251                           	opt stack 0
   252  000005                     ___aldiv@divisor:
   253                           	opt stack 0
   254  000005                     ___lldiv@divisor:
   255                           	opt stack 0
   256                           
   257                           ; 4 bytes @ 0x4
   258  000005                     	ds	1
   259  000006                     ??___ftpack:
   260                           
   261                           ; 1 bytes @ 0x5
   262  000006                     	ds	1
   263  000007                     ___lwdiv@counter:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x6
   267  000007                     	ds	1
   268  000008                     utoa@buf:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x7
   272  000008                     	ds	1
   273  000009                     ?___ftmul:
   274                           	opt stack 0
   275  000009                     ?___altoft:
   276                           	opt stack 0
   277  000009                     ?___lltoft:
   278                           	opt stack 0
   279  000009                     ___aldiv@counter:
   280                           	opt stack 0
   281  000009                     ___ftmul@f1:
   282                           	opt stack 0
   283  000009                     ___altoft@c:
   284                           	opt stack 0
   285  000009                     ___lldiv@quotient:
   286                           	opt stack 0
   287  000009                     ___lltoft@c:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0x8
   291  000009                     	ds	1
   292  00000A                     ___aldiv@sign:
   293                           	opt stack 0
   294  00000A                     utoa@val:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x9
   298  00000A                     	ds	1
   299  00000B                     ___aldiv@quotient:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0xA
   303  00000B                     	ds	1
   304  00000C                     utoa@base:
   305                           	opt stack 0
   306  00000C                     ___ftmul@f2:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0xB
   310  00000C                     	ds	1
   311  00000D                     ??___altoft:
   312  00000D                     ??___lltoft:
   313  00000D                     ___lldiv@counter:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0xC
   317  00000D                     	ds	1
   318  00000E                     ?___llmod:
   319                           	opt stack 0
   320  00000E                     utoa@v:
   321                           	opt stack 0
   322  00000E                     ___llmod@dividend:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0xD
   326  00000E                     	ds	1
   327  00000F                     ??___ftmul:
   328  00000F                     delay_us@x:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0xE
   332  00000F                     	ds	1
   333  000010                     utoa@c:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0xF
   337  000010                     	ds	1
   338  000011                     ?_itoa:
   339                           	opt stack 0
   340  000011                     delay_us@us:
   341                           	opt stack 0
   342  000011                     ___altoft@exp:
   343                           	opt stack 0
   344  000011                     ___lltoft@exp:
   345                           	opt stack 0
   346  000011                     itoa@buf:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x10
   350  000011                     	ds	1
   351  000012                     ___altoft@sign:
   352                           	opt stack 0
   353  000012                     ___ftmul@exp:
   354                           	opt stack 0
   355  000012                     delay_ms@ms:
   356                           	opt stack 0
   357  000012                     ___llmod@divisor:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x11
   361  000012                     	ds	1
   362  000013                     ?___ftdiv:
   363                           	opt stack 0
   364  000013                     itoa@val:
   365                           	opt stack 0
   366  000013                     ___ftdiv@f1:
   367                           	opt stack 0
   368  000013                     ___ftmul@f3_as_product:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x12
   372  000013                     	ds	1
   373  000014                     delay_ms@i:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x13
   377  000014                     	ds	1
   378  000015                     itoa@base:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x14
   382  000015                     	ds	1
   383  000016                     ___ftmul@cntr:
   384                           	opt stack 0
   385  000016                     ___llmod@counter:
   386                           	opt stack 0
   387  000016                     ___ftdiv@f2:
   388                           	opt stack 0
   389                           
   390                           ; 3 bytes @ 0x15
   391  000016                     	ds	1
   392  000017                     ?_sprintf:
   393                           	opt stack 0
   394  000017                     ___ftmul@sign:
   395                           	opt stack 0
   396  000017                     sprintf@sp:
   397                           	opt stack 0
   398  000017                     itoa@cp:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x16
   402  000017                     	ds	1
   403  000018                     ?___fttol:
   404                           	opt stack 0
   405  000018                     ___fttol@f1:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x17
   409  000018                     	ds	1
   410  000019                     ??___ftdiv:
   411  000019                     USART_Write_Text@text:
   412                           	opt stack 0
   413  000019                     sprintf@f:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x18
   417  000019                     	ds	2
   418  00001B                     USART_Write_Text@i:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x1A
   422  00001B                     	ds	1
   423  00001C                     ??___fttol:
   424  00001C                     ___ftdiv@cntr:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x1B
   428  00001C                     	ds	1
   429  00001D                     USART_Write_Integer@num:
   430                           	opt stack 0
   431  00001D                     ___ftdiv@f3:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x1C
   435  00001D                     	ds	2
   436  00001F                     USART_Write_Integer@buf:
   437                           	opt stack 0
   438                           
   439                           ; 8 bytes @ 0x1E
   440  00001F                     	ds	1
   441  000020                     ___ftdiv@exp:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1F
   445  000020                     	ds	1
   446  000021                     ___ftdiv@sign:
   447                           	opt stack 0
   448  000021                     ___fttol@sign1:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x20
   452  000021                     	ds	1
   453  000022                     ?___ftadd:
   454                           	opt stack 0
   455  000022                     ___ftadd@f1:
   456                           	opt stack 0
   457  000022                     ___fttol@lval:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x21
   461  000022                     	ds	1
   462  000023                     ??_sprintf:
   463                           
   464                           ; 1 bytes @ 0x22
   465  000023                     	ds	2
   466  000025                     ___ftadd@f2:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x24
   470  000025                     	ds	1
   471  000026                     ___fttol@exp1:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x25
   475  000026                     	ds	1
   476  000027                     sprintf@flag:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x26
   480  000027                     	ds	1
   481  000028                     ??___ftadd:
   482  000028                     sprintf@ap:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x27
   486  000028                     	ds	2
   487  00002A                     sprintf@val:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x29
   491  00002A                     	ds	1
   492  00002B                     ___ftadd@sign:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x2A
   496  00002B                     	ds	1
   497  00002C                     ___ftadd@exp2:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x2B
   501  00002C                     	ds	1
   502  00002D                     ___ftadd@exp1:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x2C
   506  00002D                     	ds	1
   507  00002E                     ?___ftsub:
   508                           	opt stack 0
   509  00002E                     sprintf@width:
   510                           	opt stack 0
   511  00002E                     ___ftsub@f1:
   512                           	opt stack 0
   513  00002E                     USART_Init@baud_rate:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x2D
   517  00002E                     	ds	2
   518  000030                     sprintf@prec:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x2F
   522  000030                     	ds	1
   523  000031                     ___ftsub@f2:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x30
   527  000031                     	ds	1
   528  000032                     sprintf@c:
   529                           	opt stack 0
   530  000032                     USART_Init@temp:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x31
   534  000032                     	ds	2
   535  000034                     ?_ftoa:
   536                           	opt stack 0
   537  000034                     ftoa@f:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x33
   541  000034                     	ds	3
   542  000037                     ftoa@status:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x36
   546  000037                     	ds	2
   547  000039                     ftoa@rem:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x38
   551  000039                     	ds	4
   552  00003D                     ftoa@l:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x3C
   556  00003D                     	ds	4
   557  000041                     ftoa@cp:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x40
   561  000041                     	ds	2
   562  000043                     USART_Write_Float@num:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x42
   566  000043                     	ds	3
   567  000046                     USART_Write_Float@status:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x45
   571  000046                     	ds	2
   572  000048                     USART_Write_Float@buf1:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x47
   576  000048                     	ds	2
   577  00004A                     main@my_char:
   578                           	opt stack 0
   579                           
   580                           ; 5 bytes @ 0x49
   581  00004A                     	ds	5
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591 ;;
   592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   593 ;;
   594 ;; *************** function _main *****************
   595 ;; Defined at:
   596 ;;		line 31 in file "Main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  my_char         5   73[COMRAM] unsigned char [5]
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   610 ;;      Params:         0       0       0       0       0       0       0       0       0
   611 ;;      Locals:         5       0       0       0       0       0       0       0       0
   612 ;;      Temps:          0       0       0       0       0       0       0       0       0
   613 ;;      Totals:         5       0       0       0       0       0       0       0       0
   614 ;;Total ram usage:        5 bytes
   615 ;; Hardware stack levels required when called:    5
   616 ;; This function calls:
   617 ;;		_USART_Init
   618 ;;		_USART_Write
   619 ;;		_USART_Write_Float
   620 ;;		_USART_Write_Integer
   621 ;;		_USART_Write_Text
   622 ;;		_delay_ms
   623 ;; This function is called by:
   624 ;;		Startup code after reset
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text0
   629  001264                     __ptext0:
   630                           	opt stack 0
   631  001264                     _main:
   632                           	opt stack 26
   633                           
   634                           ;Main.c: 33: char my_char[] = "Test";
   635                           
   636                           ;incstack = 0
   637  001264  EE20  F04F         	lfsr	2,main@F4434
   638  001268  EE10  F04A         	lfsr	1,main@my_char
   639  00126C  0E04               	movlw	4
   640  00126E                     u2021:
   641  00126E  CFDB FFE3          	movff	plusw2,plusw1
   642  001272  06E8               	decf	wreg,f,c
   643  001274  E2FC               	bc	u2021
   644                           
   645                           ;Main.c: 35: USART_Init(19200);
   646  001276  0E00               	movlw	0
   647  001278  6E2E               	movwf	USART_Init@baud_rate,c
   648  00127A  0E4B               	movlw	75
   649  00127C  6E2F               	movwf	USART_Init@baud_rate+1,c
   650  00127E  0E00               	movlw	0
   651  001280  6E30               	movwf	USART_Init@baud_rate+2,c
   652  001282  0E00               	movlw	0
   653  001284  6E31               	movwf	USART_Init@baud_rate+3,c
   654  001286  EC17  F00A         	call	_USART_Init	;wreg free
   655                           
   656                           ;Main.c: 36: delay_ms(1000);
   657  00128A  0E03               	movlw	3
   658  00128C  6E13               	movwf	delay_ms@ms+1,c
   659  00128E  0EE8               	movlw	232
   660  001290  6E12               	movwf	delay_ms@ms,c
   661  001292  EC0A  F00C         	call	_delay_ms	;wreg free
   662  001296                     l2080:
   663                           
   664                           ;Main.c: 39: {
   665                           ;Main.c: 41: USART_Write_Text(my_char);
   666  001296  0E4A               	movlw	low main@my_char
   667  001298  6E19               	movwf	USART_Write_Text@text,c
   668  00129A  0E00               	movlw	high main@my_char
   669  00129C  6E1A               	movwf	USART_Write_Text@text+1,c
   670  00129E  EC9B  F00B         	call	_USART_Write_Text	;wreg free
   671                           
   672                           ;Main.c: 42: delay_ms(3000);
   673  0012A2  0E0B               	movlw	11
   674  0012A4  6E13               	movwf	delay_ms@ms+1,c
   675  0012A6  0EB8               	movlw	184
   676  0012A8  6E12               	movwf	delay_ms@ms,c
   677  0012AA  EC0A  F00C         	call	_delay_ms	;wreg free
   678                           
   679                           ;Main.c: 43: USART_Write(12);
   680  0012AE  0E0C               	movlw	12
   681  0012B0  EC3D  F00C         	call	_USART_Write
   682                           
   683                           ;Main.c: 44: USART_Write(13);
   684  0012B4  0E0D               	movlw	13
   685  0012B6  EC3D  F00C         	call	_USART_Write
   686                           
   687                           ;Main.c: 47: USART_Write_Integer(10);
   688  0012BA  0E00               	movlw	0
   689  0012BC  6E1E               	movwf	USART_Write_Integer@num+1,c
   690  0012BE  0E0A               	movlw	10
   691  0012C0  6E1D               	movwf	USART_Write_Integer@num,c
   692  0012C2  ECE2  F00B         	call	_USART_Write_Integer	;wreg free
   693                           
   694                           ;Main.c: 48: delay_ms(3000);
   695  0012C6  0E0B               	movlw	11
   696  0012C8  6E13               	movwf	delay_ms@ms+1,c
   697  0012CA  0EB8               	movlw	184
   698  0012CC  6E12               	movwf	delay_ms@ms,c
   699  0012CE  EC0A  F00C         	call	_delay_ms	;wreg free
   700                           
   701                           ;Main.c: 49: USART_Write(12);
   702  0012D2  0E0C               	movlw	12
   703  0012D4  EC3D  F00C         	call	_USART_Write
   704                           
   705                           ;Main.c: 50: USART_Write(13);
   706  0012D8  0E0D               	movlw	13
   707  0012DA  EC3D  F00C         	call	_USART_Write
   708                           
   709                           ;Main.c: 53: USART_Write_Float(191.00);
   710  0012DE  0E00               	movlw	0
   711  0012E0  6E43               	movwf	USART_Write_Float@num,c
   712  0012E2  0E3F               	movlw	63
   713  0012E4  6E44               	movwf	USART_Write_Float@num+1,c
   714  0012E6  0E43               	movlw	67
   715  0012E8  6E45               	movwf	USART_Write_Float@num+2,c
   716  0012EA  ECB5  F00B         	call	_USART_Write_Float	;wreg free
   717                           
   718                           ;Main.c: 54: delay_ms(3000);
   719  0012EE  0E0B               	movlw	11
   720  0012F0  6E13               	movwf	delay_ms@ms+1,c
   721  0012F2  0EB8               	movlw	184
   722  0012F4  6E12               	movwf	delay_ms@ms,c
   723  0012F6  EC0A  F00C         	call	_delay_ms	;wreg free
   724                           
   725                           ;Main.c: 55: USART_Write(12);
   726  0012FA  0E0C               	movlw	12
   727  0012FC  EC3D  F00C         	call	_USART_Write
   728                           
   729                           ;Main.c: 56: USART_Write(13);
   730  001300  0E0D               	movlw	13
   731  001302  EC3D  F00C         	call	_USART_Write
   732  001306  D7C7               	goto	l2080
   733  001308                     __end_of_main:
   734                           	opt stack 0
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           plusw1	equ	0xFE3
   743                           fsr1l	equ	0xFE1
   744                           plusw2	equ	0xFDB
   745                           
   746 ;; *************** function _delay_ms *****************
   747 ;; Defined at:
   748 ;;		line 43 in file "18F4553_STD.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;  ms              2   17[COMRAM] unsigned int 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  i               1   19[COMRAM] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   762 ;;      Params:         2       0       0       0       0       0       0       0       0
   763 ;;      Locals:         1       0       0       0       0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0
   765 ;;      Totals:         3       0       0       0       0       0       0       0       0
   766 ;;Total ram usage:        3 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    2
   769 ;; This function calls:
   770 ;;		_delay_us
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text1
   777  001814                     __ptext1:
   778                           	opt stack 0
   779  001814                     _delay_ms:
   780                           	opt stack 28
   781  001814                     
   782                           ;18F4553_STD.c: 47: i = 4;
   783  001814  0E04               	movlw	4
   784  001816  6E14               	movwf	delay_ms@i,c
   785  001818                     l2054:
   786                           
   787                           ;18F4553_STD.c: 49: delay_us(250);
   788  001818  0E00               	movlw	0
   789  00181A  6E10               	movwf	delay_us@x+1,c
   790  00181C  0EFA               	movlw	250
   791  00181E  6E0F               	movwf	delay_us@x,c
   792  001820  ECCC  F00B         	call	_delay_us	;wreg free
   793                           
   794                           ;18F4553_STD.c: 50: } while(--i);
   795  001824  2E14               	decfsz	delay_ms@i,f,c
   796  001826  D7F8               	goto	l2054
   797                           
   798                           ;18F4553_STD.c: 51: }while(--ms);
   799  001828  0612               	decf	delay_ms@ms,f,c
   800  00182A  A0D8               	btfss	status,0,c
   801  00182C  0613               	decf	delay_ms@ms+1,f,c
   802  00182E  5012               	movf	delay_ms@ms,w,c
   803  001830  1013               	iorwf	delay_ms@ms+1,w,c
   804  001832  B4D8               	btfsc	status,2,c
   805  001834  0012               	return	
   806  001836  D7EE               	goto	l2052
   807  001838                     __end_of_delay_ms:
   808                           	opt stack 0
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           plusw1	equ	0xFE3
   817                           fsr1l	equ	0xFE1
   818                           plusw2	equ	0xFDB
   819                           status	equ	0xFD8
   820                           
   821 ;; *************** function _delay_us *****************
   822 ;; Defined at:
   823 ;;		line 29 in file "18F4553_STD.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  x               2   14[COMRAM] unsigned int 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  us              1   16[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         2       0       0       0       0       0       0       0       0
   838 ;;      Locals:         1       0       0       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0       0       0
   840 ;;      Totals:         3       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:        3 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    1
   844 ;; This function calls:
   845 ;;		___aldiv
   846 ;; This function is called by:
   847 ;;		_delay_ms
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text2
   852  001798                     __ptext2:
   853                           	opt stack 0
   854  001798                     _delay_us:
   855                           	opt stack 28
   856                           
   857                           ;18F4553_STD.c: 31: unsigned char us;
   858                           ;18F4553_STD.c: 32: us = x /(144000000/48000000)|1;
   859                           
   860                           ;incstack = 0
   861  001798  C00F  F001         	movff	delay_us@x,___aldiv@dividend
   862  00179C  C010  F002         	movff	delay_us@x+1,___aldiv@dividend+1
   863  0017A0  6A03               	clrf	___aldiv@dividend+2,c
   864  0017A2  6A04               	clrf	___aldiv@dividend+3,c
   865  0017A4  0E03               	movlw	3
   866  0017A6  6E05               	movwf	___aldiv@divisor,c
   867  0017A8  0E00               	movlw	0
   868  0017AA  6E06               	movwf	___aldiv@divisor+1,c
   869  0017AC  0E00               	movlw	0
   870  0017AE  6E07               	movwf	___aldiv@divisor+2,c
   871  0017B0  0E00               	movlw	0
   872  0017B2  6E08               	movwf	___aldiv@divisor+3,c
   873  0017B4  EC75  F008         	call	___aldiv	;wreg free
   874  0017B8  5001               	movf	?___aldiv,w,c
   875  0017BA  0901               	iorlw	1
   876  0017BC  6E11               	movwf	delay_us@us,c
   877  0017BE                     l3:
   878  0017BE  2E11               	decfsz	delay_us@us,f,c
   879  0017C0  D7FE               	goto	l3
   880  0017C2  0012               	return	
   881  0017C4                     __end_of_delay_us:
   882                           	opt stack 0
   883                           tblptru	equ	0xFF8
   884                           tblptrh	equ	0xFF7
   885                           tblptrl	equ	0xFF6
   886                           tablat	equ	0xFF5
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postdec1	equ	0xFE5
   890                           plusw1	equ	0xFE3
   891                           fsr1l	equ	0xFE1
   892                           plusw2	equ	0xFDB
   893                           status	equ	0xFD8
   894                           
   895 ;; *************** function ___aldiv *****************
   896 ;; Defined at:
   897 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  dividend        4    0[COMRAM] long 
   900 ;;  divisor         4    4[COMRAM] long 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  quotient        4   10[COMRAM] long 
   903 ;;  sign            1    9[COMRAM] unsigned char 
   904 ;;  counter         1    8[COMRAM] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  4    0[COMRAM] long 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   914 ;;      Params:         8       0       0       0       0       0       0       0       0
   915 ;;      Locals:         6       0       0       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0
   917 ;;      Totals:        14       0       0       0       0       0       0       0       0
   918 ;;Total ram usage:       14 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_delay_us
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text3
   928  0010EA                     __ptext3:
   929                           	opt stack 0
   930  0010EA                     ___aldiv:
   931                           	opt stack 28
   932                           
   933                           ;incstack = 0
   934  0010EA  0E00               	movlw	0
   935  0010EC  6E0A               	movwf	___aldiv@sign,c
   936  0010EE  AE08               	btfss	___aldiv@divisor+3,7,c
   937  0010F0  D00A               	goto	l1764
   938  0010F2  1E08               	comf	___aldiv@divisor+3,f,c
   939  0010F4  1E07               	comf	___aldiv@divisor+2,f,c
   940  0010F6  1E06               	comf	___aldiv@divisor+1,f,c
   941  0010F8  6C05               	negf	___aldiv@divisor,c
   942  0010FA  0E00               	movlw	0
   943  0010FC  2206               	addwfc	___aldiv@divisor+1,f,c
   944  0010FE  2207               	addwfc	___aldiv@divisor+2,f,c
   945  001100  2208               	addwfc	___aldiv@divisor+3,f,c
   946  001102  0E01               	movlw	1
   947  001104  6E0A               	movwf	___aldiv@sign,c
   948  001106                     l1764:
   949  001106  AE04               	btfss	___aldiv@dividend+3,7,c
   950  001108  D00A               	goto	l1770
   951  00110A  1E04               	comf	___aldiv@dividend+3,f,c
   952  00110C  1E03               	comf	___aldiv@dividend+2,f,c
   953  00110E  1E02               	comf	___aldiv@dividend+1,f,c
   954  001110  6C01               	negf	___aldiv@dividend,c
   955  001112  0E00               	movlw	0
   956  001114  2202               	addwfc	___aldiv@dividend+1,f,c
   957  001116  2203               	addwfc	___aldiv@dividend+2,f,c
   958  001118  2204               	addwfc	___aldiv@dividend+3,f,c
   959  00111A  0E01               	movlw	1
   960  00111C  1A0A               	xorwf	___aldiv@sign,f,c
   961  00111E                     l1770:
   962  00111E  0E00               	movlw	0
   963  001120  6E0B               	movwf	___aldiv@quotient,c
   964  001122  0E00               	movlw	0
   965  001124  6E0C               	movwf	___aldiv@quotient+1,c
   966  001126  0E00               	movlw	0
   967  001128  6E0D               	movwf	___aldiv@quotient+2,c
   968  00112A  0E00               	movlw	0
   969  00112C  6E0E               	movwf	___aldiv@quotient+3,c
   970  00112E  5005               	movf	___aldiv@divisor,w,c
   971  001130  1006               	iorwf	___aldiv@divisor+1,w,c
   972  001132  1007               	iorwf	___aldiv@divisor+2,w,c
   973  001134  1008               	iorwf	___aldiv@divisor+3,w,c
   974  001136  B4D8               	btfsc	status,2,c
   975  001138  D02A               	goto	l1792
   976  00113A  0E01               	movlw	1
   977  00113C  6E09               	movwf	___aldiv@counter,c
   978  00113E  D006               	goto	l1778
   979  001140                     l1776:
   980  001140  90D8               	bcf	status,0,c
   981  001142  3605               	rlcf	___aldiv@divisor,f,c
   982  001144  3606               	rlcf	___aldiv@divisor+1,f,c
   983  001146  3607               	rlcf	___aldiv@divisor+2,f,c
   984  001148  3608               	rlcf	___aldiv@divisor+3,f,c
   985  00114A  2A09               	incf	___aldiv@counter,f,c
   986  00114C                     l1778:
   987  00114C  AE08               	btfss	___aldiv@divisor+3,7,c
   988  00114E  D7F8               	goto	l1776
   989  001150                     l1780:
   990  001150  90D8               	bcf	status,0,c
   991  001152  360B               	rlcf	___aldiv@quotient,f,c
   992  001154  360C               	rlcf	___aldiv@quotient+1,f,c
   993  001156  360D               	rlcf	___aldiv@quotient+2,f,c
   994  001158  360E               	rlcf	___aldiv@quotient+3,f,c
   995  00115A  5005               	movf	___aldiv@divisor,w,c
   996  00115C  5C01               	subwf	___aldiv@dividend,w,c
   997  00115E  5006               	movf	___aldiv@divisor+1,w,c
   998  001160  5802               	subwfb	___aldiv@dividend+1,w,c
   999  001162  5007               	movf	___aldiv@divisor+2,w,c
  1000  001164  5803               	subwfb	___aldiv@dividend+2,w,c
  1001  001166  5008               	movf	___aldiv@divisor+3,w,c
  1002  001168  5804               	subwfb	___aldiv@dividend+3,w,c
  1003  00116A  A0D8               	btfss	status,0,c
  1004  00116C  D009               	goto	l1788
  1005  00116E  5005               	movf	___aldiv@divisor,w,c
  1006  001170  5E01               	subwf	___aldiv@dividend,f,c
  1007  001172  5006               	movf	___aldiv@divisor+1,w,c
  1008  001174  5A02               	subwfb	___aldiv@dividend+1,f,c
  1009  001176  5007               	movf	___aldiv@divisor+2,w,c
  1010  001178  5A03               	subwfb	___aldiv@dividend+2,f,c
  1011  00117A  5008               	movf	___aldiv@divisor+3,w,c
  1012  00117C  5A04               	subwfb	___aldiv@dividend+3,f,c
  1013  00117E  800B               	bsf	___aldiv@quotient,0,c
  1014  001180                     l1788:
  1015  001180  90D8               	bcf	status,0,c
  1016  001182  3208               	rrcf	___aldiv@divisor+3,f,c
  1017  001184  3207               	rrcf	___aldiv@divisor+2,f,c
  1018  001186  3206               	rrcf	___aldiv@divisor+1,f,c
  1019  001188  3205               	rrcf	___aldiv@divisor,f,c
  1020  00118A  2E09               	decfsz	___aldiv@counter,f,c
  1021  00118C  D7E1               	goto	l1780
  1022  00118E                     l1792:
  1023  00118E  500A               	movf	___aldiv@sign,w,c
  1024  001190  B4D8               	btfsc	status,2,c
  1025  001192  D008               	goto	l1796
  1026  001194  1E0E               	comf	___aldiv@quotient+3,f,c
  1027  001196  1E0D               	comf	___aldiv@quotient+2,f,c
  1028  001198  1E0C               	comf	___aldiv@quotient+1,f,c
  1029  00119A  6C0B               	negf	___aldiv@quotient,c
  1030  00119C  0E00               	movlw	0
  1031  00119E  220C               	addwfc	___aldiv@quotient+1,f,c
  1032  0011A0  220D               	addwfc	___aldiv@quotient+2,f,c
  1033  0011A2  220E               	addwfc	___aldiv@quotient+3,f,c
  1034  0011A4                     l1796:
  1035  0011A4  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1036  0011A8  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1037  0011AC  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1038  0011B0  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1039  0011B4  0012               	return	
  1040  0011B6                     __end_of___aldiv:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           plusw1	equ	0xFE3
  1050                           fsr1l	equ	0xFE1
  1051                           plusw2	equ	0xFDB
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function _USART_Write_Integer *****************
  1055 ;; Defined at:
  1056 ;;		line 80 in file "USART.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  num             2   28[COMRAM] int 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  buf             8   30[COMRAM] unsigned char [8]
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         2       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1073 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:       10 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    3
  1077 ;; This function calls:
  1078 ;;		_USART_Write_Text
  1079 ;;		_itoa
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text4
  1086  0017C4                     __ptext4:
  1087                           	opt stack 0
  1088  0017C4                     _USART_Write_Integer:
  1089                           	opt stack 27
  1090                           
  1091                           ;USART.c: 82: unsigned char buf[8];
  1092                           ;USART.c: 83: USART_Write_Text(itoa(buf, num, 10));
  1093                           
  1094                           ;incstack = 0
  1095  0017C4  0E1F               	movlw	low USART_Write_Integer@buf
  1096  0017C6  6E11               	movwf	itoa@buf,c
  1097  0017C8  0E00               	movlw	high USART_Write_Integer@buf
  1098  0017CA  6E12               	movwf	itoa@buf+1,c
  1099  0017CC  C01D  F013         	movff	USART_Write_Integer@num,itoa@val
  1100  0017D0  C01E  F014         	movff	USART_Write_Integer@num+1,itoa@val+1
  1101  0017D4  0E00               	movlw	0
  1102  0017D6  6E16               	movwf	itoa@base+1,c
  1103  0017D8  0E0A               	movlw	10
  1104  0017DA  6E15               	movwf	itoa@base,c
  1105  0017DC  EC1A  F00B         	call	_itoa	;wreg free
  1106  0017E0  C011  F019         	movff	?_itoa,USART_Write_Text@text
  1107  0017E4  C012  F01A         	movff	?_itoa+1,USART_Write_Text@text+1
  1108  0017E8  EC9B  F00B         	call	_USART_Write_Text	;wreg free
  1109  0017EC  0012               	return		;funcret
  1110  0017EE                     __end_of_USART_Write_Integer:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec1	equ	0xFE5
  1119                           plusw1	equ	0xFE3
  1120                           fsr1l	equ	0xFE1
  1121                           plusw2	equ	0xFDB
  1122                           status	equ	0xFD8
  1123                           
  1124 ;; *************** function _itoa *****************
  1125 ;; Defined at:
  1126 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;  buf             2   16[COMRAM] PTR unsigned char 
  1129 ;;		 -> USART_Write_Integer@buf(8), 
  1130 ;;  val             2   18[COMRAM] int 
  1131 ;;  base            2   20[COMRAM] int 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  cp              2   22[COMRAM] PTR unsigned char 
  1134 ;;		 -> USART_Write_Integer@buf(8), 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  2   16[COMRAM] PTR unsigned char 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1144 ;;      Params:         6       0       0       0       0       0       0       0       0
  1145 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1147 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1148 ;;Total ram usage:        8 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    2
  1151 ;; This function calls:
  1152 ;;		_utoa
  1153 ;; This function is called by:
  1154 ;;		_USART_Write_Integer
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text5
  1159  001634                     __ptext5:
  1160                           	opt stack 0
  1161  001634                     _itoa:
  1162                           	opt stack 27
  1163                           
  1164                           ;incstack = 0
  1165  001634  C011  F017         	movff	itoa@buf,itoa@cp
  1166  001638  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  1167  00163C  AE14               	btfss	itoa@val+1,7,c
  1168  00163E  D00C               	goto	l1964
  1169  001640  C011  FFD9         	movff	itoa@buf,fsr2l
  1170  001644  C012  FFDA         	movff	itoa@buf+1,fsr2h
  1171  001648  0E2D               	movlw	45
  1172  00164A  6EDF               	movwf	indf2,c
  1173  00164C  4A11               	infsnz	itoa@buf,f,c
  1174  00164E  2A12               	incf	itoa@buf+1,f,c
  1175  001650  6C13               	negf	itoa@val,c
  1176  001652  1E14               	comf	itoa@val+1,f,c
  1177  001654  B0D8               	btfsc	status,0,c
  1178  001656  2A14               	incf	itoa@val+1,f,c
  1179  001658                     l1964:
  1180  001658  C011  F008         	movff	itoa@buf,utoa@buf
  1181  00165C  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  1182  001660  C013  F00A         	movff	itoa@val,utoa@val
  1183  001664  C014  F00B         	movff	itoa@val+1,utoa@val+1
  1184  001668  C015  F00C         	movff	itoa@base,utoa@base
  1185  00166C  C016  F00D         	movff	itoa@base+1,utoa@base+1
  1186  001670  EC84  F009         	call	_utoa	;wreg free
  1187  001674  C017  F011         	movff	itoa@cp,?_itoa
  1188  001678  C018  F012         	movff	itoa@cp+1,?_itoa+1
  1189  00167C  0012               	return	
  1190  00167E                     __end_of_itoa:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           postinc0	equ	0xFEE
  1197                           wreg	equ	0xFE8
  1198                           postdec1	equ	0xFE5
  1199                           plusw1	equ	0xFE3
  1200                           fsr1l	equ	0xFE1
  1201                           indf2	equ	0xFDF
  1202                           plusw2	equ	0xFDB
  1203                           fsr2h	equ	0xFDA
  1204                           fsr2l	equ	0xFD9
  1205                           status	equ	0xFD8
  1206                           
  1207 ;; *************** function _utoa *****************
  1208 ;; Defined at:
  1209 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  buf             2    7[COMRAM] PTR unsigned char 
  1212 ;;		 -> USART_Write_Integer@buf(8), 
  1213 ;;  val             2    9[COMRAM] unsigned int 
  1214 ;;  base            2   11[COMRAM] int 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  v               2   13[COMRAM] unsigned int 
  1217 ;;  c               1   15[COMRAM] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  2    7[COMRAM] PTR unsigned char 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1227 ;;      Params:         6       0       0       0       0       0       0       0       0
  1228 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1230 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1231 ;;Total ram usage:        9 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    1
  1234 ;; This function calls:
  1235 ;;		___lwdiv
  1236 ;;		___lwmod
  1237 ;; This function is called by:
  1238 ;;		_itoa
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text6
  1243  001308                     __ptext6:
  1244                           	opt stack 0
  1245  001308                     _utoa:
  1246                           	opt stack 27
  1247                           
  1248                           ;incstack = 0
  1249  001308  C00A  F00E         	movff	utoa@val,utoa@v
  1250  00130C  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  1251  001310                     l1908:
  1252  001310  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  1253  001314  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  1254  001318  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  1255  00131C  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  1256  001320  ECF1  F00A         	call	___lwdiv	;wreg free
  1257  001324  C001  F00E         	movff	?___lwdiv,utoa@v
  1258  001328  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  1259  00132C  4A08               	infsnz	utoa@buf,f,c
  1260  00132E  2A09               	incf	utoa@buf+1,f,c
  1261  001330  500E               	movf	utoa@v,w,c
  1262  001332  100F               	iorwf	utoa@v+1,w,c
  1263  001334  A4D8               	btfss	status,2,c
  1264  001336  D7EC               	goto	l1908
  1265  001338  C008  FFD9         	movff	utoa@buf,fsr2l
  1266  00133C  C009  FFDA         	movff	utoa@buf+1,fsr2h
  1267  001340  0E00               	movlw	0
  1268  001342  6EDF               	movwf	indf2,c
  1269  001344  0608               	decf	utoa@buf,f,c
  1270  001346  A0D8               	btfss	status,0,c
  1271  001348  0609               	decf	utoa@buf+1,f,c
  1272  00134A                     l1918:
  1273  00134A  C00A  F001         	movff	utoa@val,___lwmod@dividend
  1274  00134E  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  1275  001352  C00C  F003         	movff	utoa@base,___lwmod@divisor
  1276  001356  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  1277  00135A  EC3F  F00B         	call	___lwmod	;wreg free
  1278  00135E  5001               	movf	?___lwmod,w,c
  1279  001360  6E10               	movwf	utoa@c,c
  1280  001362  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  1281  001366  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  1282  00136A  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  1283  00136E  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  1284  001372  ECF1  F00A         	call	___lwdiv	;wreg free
  1285  001376  C001  F00A         	movff	?___lwdiv,utoa@val
  1286  00137A  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  1287  00137E  0E09               	movlw	9
  1288  001380  6410               	cpfsgt	utoa@c,c
  1289  001382  D002               	goto	l486
  1290  001384  0E07               	movlw	7
  1291  001386  2610               	addwf	utoa@c,f,c
  1292  001388                     l486:
  1293  001388  0E30               	movlw	48
  1294  00138A  2610               	addwf	utoa@c,f,c
  1295  00138C  C008  FFD9         	movff	utoa@buf,fsr2l
  1296  001390  C009  FFDA         	movff	utoa@buf+1,fsr2h
  1297  001394  C010  FFDF         	movff	utoa@c,indf2
  1298  001398  0608               	decf	utoa@buf,f,c
  1299  00139A  A0D8               	btfss	status,0,c
  1300  00139C  0609               	decf	utoa@buf+1,f,c
  1301  00139E  500A               	movf	utoa@val,w,c
  1302  0013A0  100B               	iorwf	utoa@val+1,w,c
  1303  0013A2  A4D8               	btfss	status,2,c
  1304  0013A4  D7D2               	goto	l1918
  1305                           
  1306                           ;	Return value of _utoa is never used
  1307  0013A6  4A08               	infsnz	utoa@buf,f,c
  1308  0013A8  2A09               	incf	utoa@buf+1,f,c
  1309  0013AA  0012               	return	
  1310  0013AC                     __end_of_utoa:
  1311                           	opt stack 0
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           postinc0	equ	0xFEE
  1317                           wreg	equ	0xFE8
  1318                           postdec1	equ	0xFE5
  1319                           plusw1	equ	0xFE3
  1320                           fsr1l	equ	0xFE1
  1321                           indf2	equ	0xFDF
  1322                           plusw2	equ	0xFDB
  1323                           fsr2h	equ	0xFDA
  1324                           fsr2l	equ	0xFD9
  1325                           status	equ	0xFD8
  1326                           
  1327 ;; *************** function ___lwmod *****************
  1328 ;; Defined at:
  1329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  dividend        2    0[COMRAM] unsigned int 
  1332 ;;  divisor         2    2[COMRAM] unsigned int 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  counter         1    4[COMRAM] unsigned char 
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  2    0[COMRAM] unsigned int 
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, status,0
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1344 ;;      Params:         4       0       0       0       0       0       0       0       0
  1345 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1347 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1348 ;;Total ram usage:        5 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		_utoa
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text7
  1358  00167E                     __ptext7:
  1359                           	opt stack 0
  1360  00167E                     ___lwmod:
  1361                           	opt stack 27
  1362                           
  1363                           ;incstack = 0
  1364  00167E  5003               	movf	___lwmod@divisor,w,c
  1365  001680  1004               	iorwf	___lwmod@divisor+1,w,c
  1366  001682  B4D8               	btfsc	status,2,c
  1367  001684  D018               	goto	l575
  1368  001686  0E01               	movlw	1
  1369  001688  6E05               	movwf	___lwmod@counter,c
  1370  00168A  D004               	goto	l1634
  1371  00168C                     l1632:
  1372  00168C  90D8               	bcf	status,0,c
  1373  00168E  3603               	rlcf	___lwmod@divisor,f,c
  1374  001690  3604               	rlcf	___lwmod@divisor+1,f,c
  1375  001692  2A05               	incf	___lwmod@counter,f,c
  1376  001694                     l1634:
  1377  001694  AE04               	btfss	___lwmod@divisor+1,7,c
  1378  001696  D7FA               	goto	l1632
  1379  001698                     l1636:
  1380  001698  5003               	movf	___lwmod@divisor,w,c
  1381  00169A  5C01               	subwf	___lwmod@dividend,w,c
  1382  00169C  5004               	movf	___lwmod@divisor+1,w,c
  1383  00169E  5802               	subwfb	___lwmod@dividend+1,w,c
  1384  0016A0  A0D8               	btfss	status,0,c
  1385  0016A2  D004               	goto	l1640
  1386  0016A4  5003               	movf	___lwmod@divisor,w,c
  1387  0016A6  5E01               	subwf	___lwmod@dividend,f,c
  1388  0016A8  5004               	movf	___lwmod@divisor+1,w,c
  1389  0016AA  5A02               	subwfb	___lwmod@dividend+1,f,c
  1390  0016AC                     l1640:
  1391  0016AC  90D8               	bcf	status,0,c
  1392  0016AE  3204               	rrcf	___lwmod@divisor+1,f,c
  1393  0016B0  3203               	rrcf	___lwmod@divisor,f,c
  1394  0016B2  2E05               	decfsz	___lwmod@counter,f,c
  1395  0016B4  D7F1               	goto	l1636
  1396  0016B6                     l575:
  1397  0016B6  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1398  0016BA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1399  0016BE  0012               	return		;funcret
  1400  0016C0                     __end_of___lwmod:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           plusw1	equ	0xFE3
  1410                           fsr1l	equ	0xFE1
  1411                           indf2	equ	0xFDF
  1412                           plusw2	equ	0xFDB
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function ___lwdiv *****************
  1418 ;; Defined at:
  1419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  dividend        2    0[COMRAM] unsigned int 
  1422 ;;  divisor         2    2[COMRAM] unsigned int 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  quotient        2    4[COMRAM] unsigned int 
  1425 ;;  counter         1    6[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  2    0[COMRAM] unsigned int 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         4       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        7 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_utoa
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text8
  1449  0015E2                     __ptext8:
  1450                           	opt stack 0
  1451  0015E2                     ___lwdiv:
  1452                           	opt stack 27
  1453                           
  1454                           ;incstack = 0
  1455  0015E2  0E00               	movlw	0
  1456  0015E4  6E06               	movwf	___lwdiv@quotient+1,c
  1457  0015E6  0E00               	movlw	0
  1458  0015E8  6E05               	movwf	___lwdiv@quotient,c
  1459  0015EA  5003               	movf	___lwdiv@divisor,w,c
  1460  0015EC  1004               	iorwf	___lwdiv@divisor+1,w,c
  1461  0015EE  B4D8               	btfsc	status,2,c
  1462  0015F0  D01C               	goto	l565
  1463  0015F2  0E01               	movlw	1
  1464  0015F4  6E07               	movwf	___lwdiv@counter,c
  1465  0015F6  D004               	goto	l1614
  1466  0015F8                     l1612:
  1467  0015F8  90D8               	bcf	status,0,c
  1468  0015FA  3603               	rlcf	___lwdiv@divisor,f,c
  1469  0015FC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1470  0015FE  2A07               	incf	___lwdiv@counter,f,c
  1471  001600                     l1614:
  1472  001600  AE04               	btfss	___lwdiv@divisor+1,7,c
  1473  001602  D7FA               	goto	l1612
  1474  001604                     l1616:
  1475  001604  90D8               	bcf	status,0,c
  1476  001606  3605               	rlcf	___lwdiv@quotient,f,c
  1477  001608  3606               	rlcf	___lwdiv@quotient+1,f,c
  1478  00160A  5003               	movf	___lwdiv@divisor,w,c
  1479  00160C  5C01               	subwf	___lwdiv@dividend,w,c
  1480  00160E  5004               	movf	___lwdiv@divisor+1,w,c
  1481  001610  5802               	subwfb	___lwdiv@dividend+1,w,c
  1482  001612  A0D8               	btfss	status,0,c
  1483  001614  D005               	goto	l1624
  1484  001616  5003               	movf	___lwdiv@divisor,w,c
  1485  001618  5E01               	subwf	___lwdiv@dividend,f,c
  1486  00161A  5004               	movf	___lwdiv@divisor+1,w,c
  1487  00161C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1488  00161E  8005               	bsf	___lwdiv@quotient,0,c
  1489  001620                     l1624:
  1490  001620  90D8               	bcf	status,0,c
  1491  001622  3204               	rrcf	___lwdiv@divisor+1,f,c
  1492  001624  3203               	rrcf	___lwdiv@divisor,f,c
  1493  001626  2E07               	decfsz	___lwdiv@counter,f,c
  1494  001628  D7ED               	goto	l1616
  1495  00162A                     l565:
  1496  00162A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1497  00162E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1498  001632  0012               	return		;funcret
  1499  001634                     __end_of___lwdiv:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           plusw1	equ	0xFE3
  1509                           fsr1l	equ	0xFE1
  1510                           indf2	equ	0xFDF
  1511                           plusw2	equ	0xFDB
  1512                           fsr2h	equ	0xFDA
  1513                           fsr2l	equ	0xFD9
  1514                           status	equ	0xFD8
  1515                           
  1516 ;; *************** function _USART_Write_Float *****************
  1517 ;; Defined at:
  1518 ;;		line 93 in file "USART.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  num             3   66[COMRAM] float 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  buf1            2   71[COMRAM] PTR unsigned char 
  1523 ;;		 -> ftoa@buf(17), 
  1524 ;;  status          2   69[COMRAM] int 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1534 ;;      Params:         3       0       0       0       0       0       0       0       0
  1535 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1536 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1537 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1538 ;;Total ram usage:        7 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    4
  1541 ;; This function calls:
  1542 ;;		_USART_Write_Text
  1543 ;;		_ftoa
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text9
  1550  00176A                     __ptext9:
  1551                           	opt stack 0
  1552  00176A                     _USART_Write_Float:
  1553                           	opt stack 26
  1554                           
  1555                           ;USART.c: 95: char* buf1;
  1556                           ;USART.c: 96: int status;
  1557                           ;USART.c: 98: buf1 = ftoa(num, &status);
  1558                           
  1559                           ;incstack = 0
  1560  00176A  C043  F034         	movff	USART_Write_Float@num,ftoa@f
  1561  00176E  C044  F035         	movff	USART_Write_Float@num+1,ftoa@f+1
  1562  001772  C045  F036         	movff	USART_Write_Float@num+2,ftoa@f+2
  1563  001776  0E46               	movlw	low USART_Write_Float@status
  1564  001778  6E37               	movwf	ftoa@status,c
  1565  00177A  0E00               	movlw	high USART_Write_Float@status
  1566  00177C  6E38               	movwf	ftoa@status+1,c
  1567  00177E  EC87  F006         	call	_ftoa	;wreg free
  1568  001782  C034  F048         	movff	?_ftoa,USART_Write_Float@buf1
  1569  001786  C035  F049         	movff	?_ftoa+1,USART_Write_Float@buf1+1
  1570                           
  1571                           ;USART.c: 100: USART_Write_Text(buf1);
  1572  00178A  C048  F019         	movff	USART_Write_Float@buf1,USART_Write_Text@text
  1573  00178E  C049  F01A         	movff	USART_Write_Float@buf1+1,USART_Write_Text@text+1
  1574  001792  EC9B  F00B         	call	_USART_Write_Text	;wreg free
  1575  001796  0012               	return		;funcret
  1576  001798                     __end_of_USART_Write_Float:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           plusw1	equ	0xFE3
  1586                           fsr1l	equ	0xFE1
  1587                           indf2	equ	0xFDF
  1588                           plusw2	equ	0xFDB
  1589                           fsr2h	equ	0xFDA
  1590                           fsr2l	equ	0xFD9
  1591                           status	equ	0xFD8
  1592                           
  1593 ;; *************** function _ftoa *****************
  1594 ;; Defined at:
  1595 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftoa.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  f               3   51[COMRAM] float 
  1598 ;;  status          2   54[COMRAM] PTR int 
  1599 ;;		 -> USART_Write_Float@status(2), 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  l               4   60[COMRAM] unsigned long 
  1602 ;;  rem             4   56[COMRAM] unsigned long 
  1603 ;;  cp              2   64[COMRAM] PTR unsigned char 
  1604 ;;		 -> ftoa@buf(17), 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  2   51[COMRAM] PTR unsigned char 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1614 ;;      Params:         5       0       0       0       0       0       0       0       0
  1615 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1617 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1618 ;;Total ram usage:       15 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    3
  1621 ;; This function calls:
  1622 ;;		___ftmul
  1623 ;;		___ftneg
  1624 ;;		___ftsub
  1625 ;;		___fttol
  1626 ;;		___lltoft
  1627 ;;		_sprintf
  1628 ;; This function is called by:
  1629 ;;		_USART_Write_Float
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text10
  1634  000D0E                     __ptext10:
  1635                           	opt stack 0
  1636  000D0E                     _ftoa:
  1637                           	opt stack 26
  1638                           
  1639                           ;incstack = 0
  1640  000D0E  0E60               	movlw	low ftoa@buf
  1641  000D10  6E41               	movwf	ftoa@cp,c
  1642  000D12  0E00               	movlw	high ftoa@buf
  1643  000D14  6E42               	movwf	ftoa@cp+1,c
  1644  000D16  AE36               	btfss	ftoa@f+2,7,c
  1645  000D18  D016               	goto	l1978
  1646  000D1A  C041  FFD9         	movff	ftoa@cp,fsr2l
  1647  000D1E  C042  FFDA         	movff	ftoa@cp+1,fsr2h
  1648  000D22  0E2D               	movlw	45
  1649  000D24  6EDF               	movwf	indf2,c
  1650  000D26  4A41               	infsnz	ftoa@cp,f,c
  1651  000D28  2A42               	incf	ftoa@cp+1,f,c
  1652  000D2A  C034  F001         	movff	ftoa@f,___ftneg@f1
  1653  000D2E  C035  F002         	movff	ftoa@f+1,___ftneg@f1+1
  1654  000D32  C036  F003         	movff	ftoa@f+2,___ftneg@f1+2
  1655  000D36  EC1C  F00C         	call	___ftneg	;wreg free
  1656  000D3A  C001  F034         	movff	?___ftneg,ftoa@f
  1657  000D3E  C002  F035         	movff	?___ftneg+1,ftoa@f+1
  1658  000D42  C003  F036         	movff	?___ftneg+2,ftoa@f+2
  1659  000D46                     l1978:
  1660  000D46  C034  F018         	movff	ftoa@f,___fttol@f1
  1661  000D4A  C035  F019         	movff	ftoa@f+1,___fttol@f1+1
  1662  000D4E  C036  F01A         	movff	ftoa@f+2,___fttol@f1+2
  1663  000D52  EC88  F007         	call	___fttol	;wreg free
  1664  000D56  C018  F03D         	movff	?___fttol,ftoa@l
  1665  000D5A  C019  F03E         	movff	?___fttol+1,ftoa@l+1
  1666  000D5E  C01A  F03F         	movff	?___fttol+2,ftoa@l+2
  1667  000D62  C01B  F040         	movff	?___fttol+3,ftoa@l+3
  1668  000D66  C034  F02E         	movff	ftoa@f,___ftsub@f1
  1669  000D6A  C035  F02F         	movff	ftoa@f+1,___ftsub@f1+1
  1670  000D6E  C036  F030         	movff	ftoa@f+2,___ftsub@f1+2
  1671  000D72  C03D  F009         	movff	ftoa@l,___lltoft@c
  1672  000D76  C03E  F00A         	movff	ftoa@l+1,___lltoft@c+1
  1673  000D7A  C03F  F00B         	movff	ftoa@l+2,___lltoft@c+2
  1674  000D7E  C040  F00C         	movff	ftoa@l+3,___lltoft@c+3
  1675  000D82  ECC3  F00A         	call	___lltoft	;wreg free
  1676  000D86  C009  F031         	movff	?___lltoft,___ftsub@f2
  1677  000D8A  C00A  F032         	movff	?___lltoft+1,___ftsub@f2+1
  1678  000D8E  C00B  F033         	movff	?___lltoft+2,___ftsub@f2+2
  1679  000D92  EC60  F00B         	call	___ftsub	;wreg free
  1680  000D96  C02E  F034         	movff	?___ftsub,ftoa@f
  1681  000D9A  C02F  F035         	movff	?___ftsub+1,ftoa@f+1
  1682  000D9E  C030  F036         	movff	?___ftsub+2,ftoa@f+2
  1683  000DA2  0E24               	movlw	36
  1684  000DA4  6E0C               	movwf	___ftmul@f2,c
  1685  000DA6  0E74               	movlw	116
  1686  000DA8  6E0D               	movwf	___ftmul@f2+1,c
  1687  000DAA  0E49               	movlw	73
  1688  000DAC  6E0E               	movwf	___ftmul@f2+2,c
  1689  000DAE  C034  F009         	movff	ftoa@f,___ftmul@f1
  1690  000DB2  C035  F00A         	movff	ftoa@f+1,___ftmul@f1+1
  1691  000DB6  C036  F00B         	movff	ftoa@f+2,___ftmul@f1+2
  1692  000DBA  EC0E  F007         	call	___ftmul	;wreg free
  1693  000DBE  C009  F018         	movff	?___ftmul,___fttol@f1
  1694  000DC2  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
  1695  000DC6  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
  1696  000DCA  EC88  F007         	call	___fttol	;wreg free
  1697  000DCE  C018  F039         	movff	?___fttol,ftoa@rem
  1698  000DD2  C019  F03A         	movff	?___fttol+1,ftoa@rem+1
  1699  000DD6  C01A  F03B         	movff	?___fttol+2,ftoa@rem+2
  1700  000DDA  C01B  F03C         	movff	?___fttol+3,ftoa@rem+3
  1701  000DDE  C041  F017         	movff	ftoa@cp,sprintf@sp
  1702  000DE2  C042  F018         	movff	ftoa@cp+1,sprintf@sp+1
  1703  000DE6  0E29               	movlw	low STR_1
  1704  000DE8  6E19               	movwf	sprintf@f,c
  1705  000DEA  0E08               	movlw	high STR_1
  1706  000DEC  6E1A               	movwf	sprintf@f+1,c
  1707  000DEE  C03D  F01B         	movff	ftoa@l,?_sprintf+4
  1708  000DF2  C03E  F01C         	movff	ftoa@l+1,?_sprintf+5
  1709  000DF6  C03F  F01D         	movff	ftoa@l+2,?_sprintf+6
  1710  000DFA  C040  F01E         	movff	ftoa@l+3,?_sprintf+7
  1711  000DFE  C039  F01F         	movff	ftoa@rem,?_sprintf+8
  1712  000E02  C03A  F020         	movff	ftoa@rem+1,?_sprintf+9
  1713  000E06  C03B  F021         	movff	ftoa@rem+2,?_sprintf+10
  1714  000E0A  C03C  F022         	movff	ftoa@rem+3,?_sprintf+11
  1715  000E0E  EC1B  F004         	call	_sprintf	;wreg free
  1716  000E12  0E60               	movlw	low ftoa@buf
  1717  000E14  6E34               	movwf	?_ftoa,c
  1718  000E16  0E00               	movlw	high ftoa@buf
  1719  000E18  6E35               	movwf	?_ftoa+1,c
  1720  000E1A  0012               	return	
  1721  000E1C                     __end_of_ftoa:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           plusw1	equ	0xFE3
  1731                           fsr1l	equ	0xFE1
  1732                           indf2	equ	0xFDF
  1733                           plusw2	equ	0xFDB
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _sprintf *****************
  1739 ;; Defined at:
  1740 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  sp              2   22[COMRAM] PTR unsigned char 
  1743 ;;		 -> ftoa@buf(17), 
  1744 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1745 ;;		 -> STR_1(11), 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  val             4   41[COMRAM] unsigned long 
  1748 ;;  tmpval          4    0        struct .
  1749 ;;  cp              3    0        PTR const unsigned char 
  1750 ;;  prec            2   47[COMRAM] int 
  1751 ;;  width           2   45[COMRAM] int 
  1752 ;;  ap              2   39[COMRAM] PTR void [1]
  1753 ;;		 -> ?_sprintf(2), 
  1754 ;;  len             2    0        unsigned int 
  1755 ;;  c               1   49[COMRAM] char 
  1756 ;;  flag            1   38[COMRAM] unsigned char 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  2   22[COMRAM] int 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1766 ;;      Params:        12       0       0       0       0       0       0       0       0
  1767 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1768 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1769 ;;      Totals:        28       0       0       0       0       0       0       0       0
  1770 ;;Total ram usage:       28 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    1
  1773 ;; This function calls:
  1774 ;;		___lldiv
  1775 ;;		___llmod
  1776 ;;		___wmul
  1777 ;;		_isdigit
  1778 ;; This function is called by:
  1779 ;;		_ftoa
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text11
  1784  000836                     __ptext11:
  1785                           	opt stack 0
  1786  000836                     _sprintf:
  1787                           	opt stack 27
  1788                           
  1789                           ;doprnt.c: 494: va_list ap;
  1790                           ;doprnt.c: 499: signed char c;
  1791                           ;doprnt.c: 501: int width;
  1792                           ;doprnt.c: 504: int prec;
  1793                           ;doprnt.c: 508: unsigned char flag;
  1794                           ;doprnt.c: 523: union {
  1795                           ;doprnt.c: 524: unsigned long vd;
  1796                           ;doprnt.c: 525: double integ;
  1797                           ;doprnt.c: 526: } tmpval;
  1798                           ;doprnt.c: 528: unsigned long val;
  1799                           ;doprnt.c: 529: unsigned len;
  1800                           ;doprnt.c: 530: const char * cp;
  1801                           ;doprnt.c: 533: *ap = __va_start();
  1802                           
  1803                           ;incstack = 0
  1804  000836  0E1B               	movlw	low (?_sprintf+4)
  1805  000838  6E28               	movwf	sprintf@ap,c
  1806  00083A  0E00               	movlw	high (?_sprintf+4)
  1807  00083C  6E29               	movwf	sprintf@ap+1,c
  1808                           
  1809                           ;doprnt.c: 536: while(c = *f++) {
  1810  00083E  D17E               	goto	l1750
  1811  000840                     l1650:
  1812                           
  1813                           ;doprnt.c: 538: if(c != '%')
  1814  000840  0E25               	movlw	37
  1815  000842  1832               	xorwf	sprintf@c,w,c
  1816  000844  B4D8               	btfsc	status,2,c
  1817  000846  D009               	goto	l1656
  1818                           
  1819                           ;doprnt.c: 540: {
  1820                           ;doprnt.c: 541: ((*sp++ = (c)));
  1821  000848  C017  FFD9         	movff	sprintf@sp,fsr2l
  1822  00084C  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1823  000850  C032  FFDF         	movff	sprintf@c,indf2
  1824  000854  4A17               	infsnz	sprintf@sp,f,c
  1825  000856  2A18               	incf	sprintf@sp+1,f,c
  1826                           
  1827                           ;doprnt.c: 542: continue;
  1828  000858  D171               	goto	l1750
  1829  00085A                     l1656:
  1830                           
  1831                           ;doprnt.c: 543: }
  1832                           ;doprnt.c: 546: width = 0;
  1833  00085A  0E00               	movlw	0
  1834  00085C  6E2F               	movwf	sprintf@width+1,c
  1835  00085E  0E00               	movlw	0
  1836  000860  6E2E               	movwf	sprintf@width,c
  1837                           
  1838                           ;doprnt.c: 548: flag = 0;
  1839  000862  0E00               	movlw	0
  1840  000864  6E27               	movwf	sprintf@flag,c
  1841                           
  1842                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1843  000866  C019  FFF6         	movff	sprintf@f,tblptrl
  1844  00086A  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1845  00086E                     	if	0	;tblptru may be non-zero
  1846  00086E                     	endif
  1847  00086E                     	if	0	;tblptru may be non-zero
  1848  00086E                     	endif
  1849  00086E  0008               	tblrd		*
  1850  000870  50F5               	movf	tablat,w,c
  1851  000872  EC2E  F00C         	call	_isdigit
  1852  000876  A0D8               	btfss	status,0,c
  1853  000878  D032               	goto	l1670
  1854                           
  1855                           ;doprnt.c: 598: width = 0;
  1856  00087A  0E00               	movlw	0
  1857  00087C  6E2F               	movwf	sprintf@width+1,c
  1858  00087E  0E00               	movlw	0
  1859  000880  6E2E               	movwf	sprintf@width,c
  1860  000882                     l1662:
  1861                           
  1862                           ;doprnt.c: 600: width *= 10;
  1863  000882  C02E  F001         	movff	sprintf@width,___wmul@multiplier
  1864  000886  C02F  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1865  00088A  0E00               	movlw	0
  1866  00088C  6E04               	movwf	___wmul@multiplicand+1,c
  1867  00088E  0E0A               	movlw	10
  1868  000890  6E03               	movwf	___wmul@multiplicand,c
  1869  000892  ECF7  F00B         	call	___wmul	;wreg free
  1870  000896  C001  F02E         	movff	?___wmul,sprintf@width
  1871  00089A  C002  F02F         	movff	?___wmul+1,sprintf@width+1
  1872                           
  1873                           ;doprnt.c: 601: width += *f++ - '0';
  1874  00089E  0ED0               	movlw	208
  1875  0008A0  6E23               	movwf	??_sprintf& (0+255),c
  1876  0008A2  0EFF               	movlw	255
  1877  0008A4  6E24               	movwf	(??_sprintf+1)& (0+255),c
  1878  0008A6  C019  FFF6         	movff	sprintf@f,tblptrl
  1879  0008AA  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1880  0008AE                     	if	0	;tblptru may be non-zero
  1881  0008AE                     	endif
  1882  0008AE                     	if	0	;tblptru may be non-zero
  1883  0008AE                     	endif
  1884  0008AE  0008               	tblrd		*
  1885  0008B0  50F5               	movf	tablat,w,c
  1886  0008B2  6E25               	movwf	(??_sprintf+2)& (0+255),c
  1887  0008B4  6A26               	clrf	(??_sprintf+3)& (0+255),c
  1888  0008B6  5023               	movf	??_sprintf,w,c
  1889  0008B8  2625               	addwf	??_sprintf+2,f,c
  1890  0008BA  5024               	movf	??_sprintf+1,w,c
  1891  0008BC  2226               	addwfc	??_sprintf+3,f,c
  1892  0008BE  5025               	movf	??_sprintf+2,w,c
  1893  0008C0  262E               	addwf	sprintf@width,f,c
  1894  0008C2  5026               	movf	??_sprintf+3,w,c
  1895  0008C4  222F               	addwfc	sprintf@width+1,f,c
  1896  0008C6  4A19               	infsnz	sprintf@f,f,c
  1897  0008C8  2A1A               	incf	sprintf@f+1,f,c
  1898                           
  1899                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1900  0008CA  C019  FFF6         	movff	sprintf@f,tblptrl
  1901  0008CE  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1902  0008D2                     	if	0	;tblptru may be non-zero
  1903  0008D2                     	endif
  1904  0008D2                     	if	0	;tblptru may be non-zero
  1905  0008D2                     	endif
  1906  0008D2  0008               	tblrd		*
  1907  0008D4  50F5               	movf	tablat,w,c
  1908  0008D6  EC2E  F00C         	call	_isdigit
  1909  0008DA  B0D8               	btfsc	status,0,c
  1910  0008DC  D7D2               	goto	l1662
  1911  0008DE                     l1670:
  1912                           
  1913                           ;doprnt.c: 608: }
  1914                           ;doprnt.c: 611: if(*f == '.') {
  1915  0008DE  C019  FFF6         	movff	sprintf@f,tblptrl
  1916  0008E2  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1917  0008E6                     	if	0	;tblptru may be non-zero
  1918  0008E6                     	endif
  1919  0008E6                     	if	0	;tblptru may be non-zero
  1920  0008E6                     	endif
  1921  0008E6  0008               	tblrd		*
  1922  0008E8  50F5               	movf	tablat,w,c
  1923  0008EA  0A2E               	xorlw	46
  1924  0008EC  A4D8               	btfss	status,2,c
  1925  0008EE  D02D               	goto	l1682
  1926                           
  1927                           ;doprnt.c: 613: f++;
  1928  0008F0  4A19               	infsnz	sprintf@f,f,c
  1929  0008F2  2A1A               	incf	sprintf@f+1,f,c
  1930                           
  1931                           ;doprnt.c: 620: {
  1932                           ;doprnt.c: 621: prec = 0;
  1933  0008F4  0E00               	movlw	0
  1934  0008F6  6E31               	movwf	sprintf@prec+1,c
  1935  0008F8  0E00               	movlw	0
  1936  0008FA  6E30               	movwf	sprintf@prec,c
  1937                           
  1938                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1939  0008FC  D01B               	goto	l1680
  1940  0008FE                     l1676:
  1941                           
  1942                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1943  0008FE  C030  F001         	movff	sprintf@prec,___wmul@multiplier
  1944  000902  C031  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  1945  000906  0E00               	movlw	0
  1946  000908  6E04               	movwf	___wmul@multiplicand+1,c
  1947  00090A  0E0A               	movlw	10
  1948  00090C  6E03               	movwf	___wmul@multiplicand,c
  1949  00090E  ECF7  F00B         	call	___wmul	;wreg free
  1950  000912  C019  FFF6         	movff	sprintf@f,tblptrl
  1951  000916  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1952  00091A                     	if	0	;tblptru may be non-zero
  1953  00091A                     	endif
  1954  00091A                     	if	0	;tblptru may be non-zero
  1955  00091A                     	endif
  1956  00091A  0008               	tblrd		*
  1957  00091C  50F5               	movf	tablat,w,c
  1958  00091E  2601               	addwf	?___wmul,f,c
  1959  000920  0E00               	movlw	0
  1960  000922  2202               	addwfc	?___wmul+1,f,c
  1961  000924  0ED0               	movlw	208
  1962  000926  2401               	addwf	?___wmul,w,c
  1963  000928  6E30               	movwf	sprintf@prec,c
  1964  00092A  0EFF               	movlw	255
  1965  00092C  2002               	addwfc	?___wmul+1,w,c
  1966  00092E  6E31               	movwf	sprintf@prec+1,c
  1967  000930  4A19               	infsnz	sprintf@f,f,c
  1968  000932  2A1A               	incf	sprintf@f+1,f,c
  1969  000934                     l1680:
  1970  000934  C019  FFF6         	movff	sprintf@f,tblptrl
  1971  000938  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1972  00093C                     	if	0	;tblptru may be non-zero
  1973  00093C                     	endif
  1974  00093C                     	if	0	;tblptru may be non-zero
  1975  00093C                     	endif
  1976  00093C  0008               	tblrd		*
  1977  00093E  50F5               	movf	tablat,w,c
  1978  000940  EC2E  F00C         	call	_isdigit
  1979  000944  A0D8               	btfss	status,0,c
  1980  000946  D00B               	goto	l1690
  1981  000948  D7DA               	goto	l1676
  1982  00094A                     l1682:
  1983                           
  1984                           ;doprnt.c: 626: prec = 0;
  1985  00094A  0E00               	movlw	0
  1986  00094C  6E31               	movwf	sprintf@prec+1,c
  1987  00094E  0E00               	movlw	0
  1988  000950  6E30               	movwf	sprintf@prec,c
  1989                           
  1990                           ;doprnt.c: 635: switch(c = *f++) {
  1991                           
  1992                           ;doprnt.c: 630: }
  1993                           ;doprnt.c: 633: loop:
  1994  000952  D005               	goto	l1690
  1995  000954                     l1684:
  1996                           
  1997                           ;doprnt.c: 643: flag |= 0x10;
  1998  000954  8827               	bsf	sprintf@flag,4,c
  1999                           
  2000                           ;doprnt.c: 644: goto loop;
  2001  000956  D003               	goto	l1690
  2002  000958                     l1686:
  2003                           
  2004                           ;doprnt.c: 818: flag |= 0xC0;
  2005  000958  0EC0               	movlw	192
  2006  00095A  1227               	iorwf	sprintf@flag,f,c
  2007                           
  2008                           ;doprnt.c: 822: }
  2009                           
  2010                           ;doprnt.c: 819: break;
  2011  00095C  D014               	goto	l116
  2012  00095E                     l1690:
  2013  00095E  C019  FFF6         	movff	sprintf@f,tblptrl
  2014  000962  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  2015  000966  4A19               	infsnz	sprintf@f,f,c
  2016  000968  2A1A               	incf	sprintf@f+1,f,c
  2017  00096A                     	if	0	;tblptru may be non-zero
  2018  00096A                     	endif
  2019  00096A                     	if	0	;tblptru may be non-zero
  2020  00096A                     	endif
  2021  00096A  0008               	tblrd		*
  2022  00096C  CFF5 F032          	movff	tablat,sprintf@c
  2023  000970  5032               	movf	sprintf@c,w,c
  2024                           
  2025                           ; Switch size 1, requested type "space"
  2026                           ; Number of cases is 3, Range of values is 0 to 117
  2027                           ; switch strategies available:
  2028                           ; Name         Instructions Cycles
  2029                           ; simple_byte           10     6 (average)
  2030                           ;	Chosen strategy is simple_byte
  2031  000972  0A00               	xorlw	0	; case 0
  2032  000974  B4D8               	btfsc	status,2,c
  2033  000976  D0EE               	goto	l1752
  2034  000978  0A6C               	xorlw	108	; case 108
  2035  00097A  B4D8               	btfsc	status,2,c
  2036  00097C  D7EB               	goto	l1684
  2037  00097E  0A19               	xorlw	25	; case 117
  2038  000980  B4D8               	btfsc	status,2,c
  2039  000982  D7EA               	goto	l1686
  2040  000984  D0DB               	goto	l1750
  2041  000986                     l116:
  2042                           
  2043                           ;doprnt.c: 1273: {
  2044                           ;doprnt.c: 1281: if(flag & 0x10)
  2045  000986  A827               	btfss	sprintf@flag,4,c
  2046  000988  D00E               	goto	l1696
  2047                           
  2048                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2049  00098A  C028  FFD9         	movff	sprintf@ap,fsr2l
  2050  00098E  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  2051  000992  CFDE F02A          	movff	postinc2,sprintf@val
  2052  000996  CFDE F02B          	movff	postinc2,sprintf@val+1
  2053  00099A  CFDE F02C          	movff	postinc2,sprintf@val+2
  2054  00099E  CFDE F02D          	movff	postinc2,sprintf@val+3
  2055  0009A2  0E04               	movlw	4
  2056  0009A4  D00F               	goto	L1
  2057  0009A6                     l1696:
  2058                           
  2059                           ;doprnt.c: 1283: else
  2060                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2061  0009A6  C028  FFD9         	movff	sprintf@ap,fsr2l
  2062  0009AA  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  2063  0009AE  CFDE F023          	movff	postinc2,??_sprintf
  2064  0009B2  CFDD F024          	movff	postdec2,??_sprintf+1
  2065  0009B6  C023  F02A         	movff	??_sprintf,sprintf@val
  2066  0009BA  C024  F02B         	movff	??_sprintf+1,sprintf@val+1
  2067  0009BE  6A2C               	clrf	sprintf@val+2,c
  2068  0009C0  6A2D               	clrf	sprintf@val+3,c
  2069  0009C2  0E02               	movlw	2
  2070  0009C4                     L1:
  2071  0009C4  2628               	addwf	sprintf@ap,f,c
  2072  0009C6  0E00               	movlw	0
  2073  0009C8  2229               	addwfc	sprintf@ap+1,f,c
  2074                           
  2075                           ;doprnt.c: 1287: }
  2076                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2077  0009CA  5030               	movf	sprintf@prec,w,c
  2078  0009CC  1031               	iorwf	sprintf@prec+1,w,c
  2079  0009CE  A4D8               	btfss	status,2,c
  2080  0009D0  D008               	goto	l1706
  2081  0009D2  502A               	movf	sprintf@val,w,c
  2082  0009D4  102B               	iorwf	sprintf@val+1,w,c
  2083  0009D6  102C               	iorwf	sprintf@val+2,w,c
  2084  0009D8  102D               	iorwf	sprintf@val+3,w,c
  2085  0009DA  A4D8               	btfss	status,2,c
  2086  0009DC  D002               	goto	l1706
  2087                           
  2088                           ;doprnt.c: 1291: prec++;
  2089  0009DE  4A30               	infsnz	sprintf@prec,f,c
  2090  0009E0  2A31               	incf	sprintf@prec+1,f,c
  2091  0009E2                     l1706:
  2092                           
  2093                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2094  0009E2  0E01               	movlw	1
  2095  0009E4  6E32               	movwf	sprintf@c,c
  2096  0009E6                     l1708:
  2097  0009E6  0E0A               	movlw	10
  2098  0009E8  1832               	xorwf	sprintf@c,w,c
  2099  0009EA  B4D8               	btfsc	status,2,c
  2100  0009EC  D018               	goto	l1720
  2101                           
  2102                           ;doprnt.c: 1306: if(val < dpowers[c])
  2103  0009EE  5032               	movf	sprintf@c,w,c
  2104  0009F0  0D04               	mullw	4
  2105  0009F2  0E01               	movlw	low _dpowers
  2106  0009F4  24F3               	addwf	prodl,w,c
  2107  0009F6  6EF6               	movwf	tblptrl,c
  2108  0009F8  0E08               	movlw	high _dpowers
  2109  0009FA  20F4               	addwfc	prodh,w,c
  2110  0009FC  6EF7               	movwf	tblptrh,c
  2111  0009FE                     	if	0	;There are less than 3 active tblptr bytes
  2112  0009FE                     	endif
  2113  0009FE  0009               	tblrd		*+
  2114  000A00  50F5               	movf	tablat,w,c
  2115  000A02  5C2A               	subwf	sprintf@val,w,c
  2116  000A04  0009               	tblrd		*+
  2117  000A06  50F5               	movf	tablat,w,c
  2118  000A08  582B               	subwfb	sprintf@val+1,w,c
  2119  000A0A  0009               	tblrd		*+
  2120  000A0C  50F5               	movf	tablat,w,c
  2121  000A0E  582C               	subwfb	sprintf@val+2,w,c
  2122  000A10  0009               	tblrd		*+
  2123  000A12  50F5               	movf	tablat,w,c
  2124  000A14  582D               	subwfb	sprintf@val+3,w,c
  2125  000A16  A0D8               	btfss	status,0,c
  2126  000A18  D002               	goto	l1720
  2127                           
  2128                           ;doprnt.c: 1307: break;
  2129  000A1A  2A32               	incf	sprintf@c,f,c
  2130  000A1C  D7E4               	goto	l1708
  2131  000A1E                     l1720:
  2132                           
  2133                           ;doprnt.c: 1339: if(c < prec)
  2134  000A1E  0E80               	movlw	128
  2135  000A20  BE32               	btfsc	sprintf@c,7,c
  2136  000A22  0E7F               	movlw	127
  2137  000A24  6E23               	movwf	??_sprintf& (0+255),c
  2138  000A26  5030               	movf	sprintf@prec,w,c
  2139  000A28  5C32               	subwf	sprintf@c,w,c
  2140  000A2A  5031               	movf	sprintf@prec+1,w,c
  2141  000A2C  0A80               	xorlw	128
  2142  000A2E  5823               	subwfb	??_sprintf& (0+255),w,c
  2143  000A30  B0D8               	btfsc	status,0,c
  2144  000A32  D003               	goto	l1724
  2145                           
  2146                           ;doprnt.c: 1340: c = prec;
  2147  000A34  C030  F032         	movff	sprintf@prec,sprintf@c
  2148  000A38  D010               	goto	l1728
  2149  000A3A                     l1724:
  2150                           
  2151                           ;doprnt.c: 1341: else if(prec < c)
  2152  000A3A  5031               	movf	sprintf@prec+1,w,c
  2153  000A3C  0A80               	xorlw	128
  2154  000A3E  6E23               	movwf	??_sprintf& (0+255),c
  2155  000A40  5032               	movf	sprintf@c,w,c
  2156  000A42  5C30               	subwf	sprintf@prec,w,c
  2157  000A44  0E80               	movlw	128
  2158  000A46  BE32               	btfsc	sprintf@c,7,c
  2159  000A48  0E7F               	movlw	127
  2160  000A4A  5823               	subwfb	??_sprintf& (0+255),w,c
  2161  000A4C  B0D8               	btfsc	status,0,c
  2162  000A4E  D005               	goto	l1728
  2163                           
  2164                           ;doprnt.c: 1342: prec = c;
  2165  000A50  5032               	movf	sprintf@c,w,c
  2166  000A52  6E30               	movwf	sprintf@prec,c
  2167  000A54  6A31               	clrf	sprintf@prec+1,c
  2168  000A56  BE30               	btfsc	sprintf@prec,7,c
  2169  000A58  0631               	decf	sprintf@prec+1,f,c
  2170  000A5A                     l1728:
  2171                           
  2172                           ;doprnt.c: 1381: if(width > c)
  2173  000A5A  0E80               	movlw	128
  2174  000A5C  BE32               	btfsc	sprintf@c,7,c
  2175  000A5E  0E7F               	movlw	127
  2176  000A60  6E23               	movwf	??_sprintf& (0+255),c
  2177  000A62  502E               	movf	sprintf@width,w,c
  2178  000A64  5C32               	subwf	sprintf@c,w,c
  2179  000A66  502F               	movf	sprintf@width+1,w,c
  2180  000A68  0A80               	xorlw	128
  2181  000A6A  5823               	subwfb	??_sprintf& (0+255),w,c
  2182  000A6C  B0D8               	btfsc	status,0,c
  2183  000A6E  D007               	goto	l1732
  2184                           
  2185                           ;doprnt.c: 1382: width -= c;
  2186  000A70  5032               	movf	sprintf@c,w,c
  2187  000A72  5E2E               	subwf	sprintf@width,f,c
  2188  000A74  0E00               	movlw	0
  2189  000A76  BE32               	btfsc	sprintf@c,7,c
  2190  000A78  0EFF               	movlw	255
  2191  000A7A  5A2F               	subwfb	sprintf@width+1,f,c
  2192  000A7C  D004               	goto	l1734
  2193  000A7E                     l1732:
  2194                           
  2195                           ;doprnt.c: 1383: else
  2196                           ;doprnt.c: 1384: width = 0;
  2197  000A7E  0E00               	movlw	0
  2198  000A80  6E2F               	movwf	sprintf@width+1,c
  2199  000A82  0E00               	movlw	0
  2200  000A84  6E2E               	movwf	sprintf@width,c
  2201  000A86                     l1734:
  2202                           
  2203                           ;doprnt.c: 1422: {
  2204                           ;doprnt.c: 1424: if(width
  2205                           ;doprnt.c: 1428: )
  2206  000A86  502E               	movf	sprintf@width,w,c
  2207  000A88  102F               	iorwf	sprintf@width+1,w,c
  2208  000A8A  B4D8               	btfsc	status,2,c
  2209  000A8C  D04F               	goto	l1748
  2210                           
  2211                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2212                           
  2213                           ;doprnt.c: 1429: do
  2214  000A8E  C017  FFD9         	movff	sprintf@sp,fsr2l
  2215  000A92  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  2216  000A96  0E20               	movlw	32
  2217  000A98  6EDF               	movwf	indf2,c
  2218  000A9A  4A17               	infsnz	sprintf@sp,f,c
  2219  000A9C  2A18               	incf	sprintf@sp+1,f,c
  2220                           
  2221                           ;doprnt.c: 1431: while(--width);
  2222  000A9E  062E               	decf	sprintf@width,f,c
  2223  000AA0  A0D8               	btfss	status,0,c
  2224  000AA2  062F               	decf	sprintf@width+1,f,c
  2225  000AA4  D7F0               	goto	l1734
  2226  000AA6                     l1742:
  2227                           
  2228                           ;doprnt.c: 1478: {
  2229                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2230  000AA6  C030  F023         	movff	sprintf@prec,??_sprintf
  2231  000AAA  C031  F024         	movff	sprintf@prec+1,??_sprintf+1
  2232  000AAE  90D8               	bcf	status,0,c
  2233  000AB0  3623               	rlcf	??_sprintf,f,c
  2234  000AB2  3624               	rlcf	??_sprintf+1,f,c
  2235  000AB4  90D8               	bcf	status,0,c
  2236  000AB6  3623               	rlcf	??_sprintf,f,c
  2237  000AB8  3624               	rlcf	??_sprintf+1,f,c
  2238  000ABA  0E01               	movlw	low _dpowers
  2239  000ABC  2423               	addwf	??_sprintf,w,c
  2240  000ABE  6EF6               	movwf	tblptrl,c
  2241  000AC0  0E08               	movlw	high _dpowers
  2242  000AC2  2024               	addwfc	??_sprintf+1,w,c
  2243  000AC4  6EF7               	movwf	tblptrh,c
  2244  000AC6                     	if	0	;There are less than 3 active tblptr bytes
  2245  000AC6                     	endif
  2246  000AC6  0009               	tblrd		*+
  2247  000AC8  CFF5 F005          	movff	tablat,___lldiv@divisor
  2248  000ACC  0009               	tblrd		*+
  2249  000ACE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2250  000AD2  0009               	tblrd		*+
  2251  000AD4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2252  000AD8  000A               	tblrd		*-
  2253  000ADA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2254  000ADE  C02A  F001         	movff	sprintf@val,___lldiv@dividend
  2255  000AE2  C02B  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2256  000AE6  C02C  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2257  000AEA  C02D  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2258  000AEE  ECD6  F009         	call	___lldiv	;wreg free
  2259  000AF2  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2260  000AF6  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2261  000AFA  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2262  000AFE  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2263  000B02  0E0A               	movlw	10
  2264  000B04  6E12               	movwf	___llmod@divisor,c
  2265  000B06  0E00               	movlw	0
  2266  000B08  6E13               	movwf	___llmod@divisor+1,c
  2267  000B0A  0E00               	movlw	0
  2268  000B0C  6E14               	movwf	___llmod@divisor+2,c
  2269  000B0E  0E00               	movlw	0
  2270  000B10  6E15               	movwf	___llmod@divisor+3,c
  2271  000B12  EC90  F00A         	call	___llmod	;wreg free
  2272  000B16  500E               	movf	?___llmod,w,c
  2273  000B18  0F30               	addlw	48
  2274  000B1A  6E32               	movwf	sprintf@c,c
  2275                           
  2276                           ;doprnt.c: 1523: }
  2277                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2278  000B1C  C017  FFD9         	movff	sprintf@sp,fsr2l
  2279  000B20  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  2280  000B24  C032  FFDF         	movff	sprintf@c,indf2
  2281  000B28  4A17               	infsnz	sprintf@sp,f,c
  2282  000B2A  2A18               	incf	sprintf@sp+1,f,c
  2283  000B2C                     l1748:
  2284  000B2C  0630               	decf	sprintf@prec,f,c
  2285  000B2E  A0D8               	btfss	status,0,c
  2286  000B30  0631               	decf	sprintf@prec+1,f,c
  2287  000B32  2830               	incf	sprintf@prec,w,c
  2288  000B34  E1B8               	bnz	l1742
  2289  000B36  2831               	incf	sprintf@prec+1,w,c
  2290  000B38  A4D8               	btfss	status,2,c
  2291  000B3A  D7B5               	goto	l1742
  2292  000B3C                     l1750:
  2293  000B3C  C019  FFF6         	movff	sprintf@f,tblptrl
  2294  000B40  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  2295  000B44  4A19               	infsnz	sprintf@f,f,c
  2296  000B46  2A1A               	incf	sprintf@f+1,f,c
  2297  000B48                     	if	0	;tblptru may be non-zero
  2298  000B48                     	endif
  2299  000B48                     	if	0	;tblptru may be non-zero
  2300  000B48                     	endif
  2301  000B48  0008               	tblrd		*
  2302  000B4A  CFF5 F032          	movff	tablat,sprintf@c
  2303  000B4E  5032               	movf	sprintf@c,w,c
  2304  000B50  A4D8               	btfss	status,2,c
  2305  000B52  D676               	goto	l1650
  2306  000B54                     l1752:
  2307                           
  2308                           ;doprnt.c: 1538: *sp = 0;
  2309  000B54  C017  FFD9         	movff	sprintf@sp,fsr2l
  2310  000B58  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  2311  000B5C  0E00               	movlw	0
  2312  000B5E  6EDF               	movwf	indf2,c
  2313  000B60  0012               	return	
  2314  000B62                     __end_of_sprintf:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           postinc0	equ	0xFEE
  2323                           wreg	equ	0xFE8
  2324                           postdec1	equ	0xFE5
  2325                           plusw1	equ	0xFE3
  2326                           fsr1l	equ	0xFE1
  2327                           indf2	equ	0xFDF
  2328                           postinc2	equ	0xFDE
  2329                           postdec2	equ	0xFDD
  2330                           plusw2	equ	0xFDB
  2331                           fsr2h	equ	0xFDA
  2332                           fsr2l	equ	0xFD9
  2333                           status	equ	0xFD8
  2334                           
  2335 ;; *************** function _isdigit *****************
  2336 ;; Defined at:
  2337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  c               1    wreg     unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  c               1    2[COMRAM] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;		None               void
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2351 ;;      Params:         0       0       0       0       0       0       0       0       0
  2352 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2353 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2354 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2355 ;;Total ram usage:        3 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_sprintf
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text12
  2365  00185C                     __ptext12:
  2366                           	opt stack 0
  2367  00185C                     _isdigit:
  2368                           	opt stack 27
  2369                           
  2370                           ;incstack = 0
  2371                           ;isdigit@c stored from wreg
  2372  00185C  6E03               	movwf	isdigit@c,c
  2373  00185E  0E00               	movlw	0
  2374  001860  6E02               	movwf	_isdigit$456,c
  2375  001862  0E3A               	movlw	58
  2376  001864  6003               	cpfslt	isdigit@c,c
  2377  001866  D005               	goto	l1488
  2378  001868  0E2F               	movlw	47
  2379  00186A  6403               	cpfsgt	isdigit@c,c
  2380  00186C  D002               	goto	l1488
  2381  00186E  0E01               	movlw	1
  2382  001870  6E02               	movwf	_isdigit$456,c
  2383  001872                     l1488:
  2384  001872  C002  F001         	movff	_isdigit$456,??_isdigit
  2385  001876  3001               	rrcf	??_isdigit,w,c
  2386  001878  0012               	return	
  2387  00187A                     __end_of_isdigit:
  2388                           	opt stack 0
  2389                           tblptru	equ	0xFF8
  2390                           tblptrh	equ	0xFF7
  2391                           tblptrl	equ	0xFF6
  2392                           tablat	equ	0xFF5
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           postdec1	equ	0xFE5
  2398                           plusw1	equ	0xFE3
  2399                           fsr1l	equ	0xFE1
  2400                           indf2	equ	0xFDF
  2401                           postinc2	equ	0xFDE
  2402                           postdec2	equ	0xFDD
  2403                           plusw2	equ	0xFDB
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function ___wmul *****************
  2409 ;; Defined at:
  2410 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  multiplier      2    0[COMRAM] unsigned int 
  2413 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  product         2    4[COMRAM] unsigned int 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  2    0[COMRAM] unsigned int 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0, prodl, prodh
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2425 ;;      Params:         4       0       0       0       0       0       0       0       0
  2426 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2428 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2429 ;;Total ram usage:        6 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_sprintf
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text13
  2439  0017EE                     __ptext13:
  2440                           	opt stack 0
  2441  0017EE                     ___wmul:
  2442                           	opt stack 27
  2443                           
  2444                           ;incstack = 0
  2445  0017EE  5001               	movf	___wmul@multiplier,w,c
  2446  0017F0  0203               	mulwf	___wmul@multiplicand,c
  2447  0017F2  CFF3 F005          	movff	prodl,___wmul@product
  2448  0017F6  CFF4 F006          	movff	prodh,___wmul@product+1
  2449  0017FA  5001               	movf	___wmul@multiplier,w,c
  2450  0017FC  0204               	mulwf	___wmul@multiplicand+1,c
  2451  0017FE  50F3               	movf	prodl,w,c
  2452  001800  2606               	addwf	___wmul@product+1,f,c
  2453  001802  5002               	movf	___wmul@multiplier+1,w,c
  2454  001804  0203               	mulwf	___wmul@multiplicand,c
  2455  001806  50F3               	movf	prodl,w,c
  2456  001808  2606               	addwf	___wmul@product+1,f,c
  2457  00180A  C005  F001         	movff	___wmul@product,?___wmul
  2458  00180E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2459  001812  0012               	return	
  2460  001814                     __end_of___wmul:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postdec1	equ	0xFE5
  2471                           plusw1	equ	0xFE3
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           plusw2	equ	0xFDB
  2477                           fsr2h	equ	0xFDA
  2478                           fsr2l	equ	0xFD9
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function ___llmod *****************
  2482 ;; Defined at:
  2483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  dividend        4   13[COMRAM] unsigned long 
  2486 ;;  divisor         4   17[COMRAM] unsigned long 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  counter         1   21[COMRAM] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  4   13[COMRAM] unsigned long 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2498 ;;      Params:         8       0       0       0       0       0       0       0       0
  2499 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2501 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2502 ;;Total ram usage:        9 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_sprintf
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text14
  2512  001520                     __ptext14:
  2513                           	opt stack 0
  2514  001520                     ___llmod:
  2515                           	opt stack 27
  2516                           
  2517                           ;incstack = 0
  2518  001520  5012               	movf	___llmod@divisor,w,c
  2519  001522  1013               	iorwf	___llmod@divisor+1,w,c
  2520  001524  1014               	iorwf	___llmod@divisor+2,w,c
  2521  001526  1015               	iorwf	___llmod@divisor+3,w,c
  2522  001528  B4D8               	btfsc	status,2,c
  2523  00152A  D024               	goto	l522
  2524  00152C  0E01               	movlw	1
  2525  00152E  6E16               	movwf	___llmod@counter,c
  2526  001530  D006               	goto	l1596
  2527  001532                     l1594:
  2528  001532  90D8               	bcf	status,0,c
  2529  001534  3612               	rlcf	___llmod@divisor,f,c
  2530  001536  3613               	rlcf	___llmod@divisor+1,f,c
  2531  001538  3614               	rlcf	___llmod@divisor+2,f,c
  2532  00153A  3615               	rlcf	___llmod@divisor+3,f,c
  2533  00153C  2A16               	incf	___llmod@counter,f,c
  2534  00153E                     l1596:
  2535  00153E  AE15               	btfss	___llmod@divisor+3,7,c
  2536  001540  D7F8               	goto	l1594
  2537  001542                     l1598:
  2538  001542  5012               	movf	___llmod@divisor,w,c
  2539  001544  5C0E               	subwf	___llmod@dividend,w,c
  2540  001546  5013               	movf	___llmod@divisor+1,w,c
  2541  001548  580F               	subwfb	___llmod@dividend+1,w,c
  2542  00154A  5014               	movf	___llmod@divisor+2,w,c
  2543  00154C  5810               	subwfb	___llmod@dividend+2,w,c
  2544  00154E  5015               	movf	___llmod@divisor+3,w,c
  2545  001550  5811               	subwfb	___llmod@dividend+3,w,c
  2546  001552  A0D8               	btfss	status,0,c
  2547  001554  D008               	goto	l1602
  2548  001556  5012               	movf	___llmod@divisor,w,c
  2549  001558  5E0E               	subwf	___llmod@dividend,f,c
  2550  00155A  5013               	movf	___llmod@divisor+1,w,c
  2551  00155C  5A0F               	subwfb	___llmod@dividend+1,f,c
  2552  00155E  5014               	movf	___llmod@divisor+2,w,c
  2553  001560  5A10               	subwfb	___llmod@dividend+2,f,c
  2554  001562  5015               	movf	___llmod@divisor+3,w,c
  2555  001564  5A11               	subwfb	___llmod@dividend+3,f,c
  2556  001566                     l1602:
  2557  001566  90D8               	bcf	status,0,c
  2558  001568  3215               	rrcf	___llmod@divisor+3,f,c
  2559  00156A  3214               	rrcf	___llmod@divisor+2,f,c
  2560  00156C  3213               	rrcf	___llmod@divisor+1,f,c
  2561  00156E  3212               	rrcf	___llmod@divisor,f,c
  2562  001570  2E16               	decfsz	___llmod@counter,f,c
  2563  001572  D7E7               	goto	l1598
  2564  001574                     l522:
  2565  001574  C00E  F00E         	movff	___llmod@dividend,?___llmod
  2566  001578  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  2567  00157C  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  2568  001580  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  2569  001584  0012               	return		;funcret
  2570  001586                     __end_of___llmod:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           postinc0	equ	0xFEE
  2579                           wreg	equ	0xFE8
  2580                           postdec1	equ	0xFE5
  2581                           plusw1	equ	0xFE3
  2582                           fsr1l	equ	0xFE1
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           plusw2	equ	0xFDB
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function ___lldiv *****************
  2592 ;; Defined at:
  2593 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  dividend        4    0[COMRAM] unsigned long 
  2596 ;;  divisor         4    4[COMRAM] unsigned long 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  quotient        4    8[COMRAM] unsigned long 
  2599 ;;  counter         1   12[COMRAM] unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  4    0[COMRAM] unsigned long 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         8       0       0       0       0       0       0       0       0
  2610 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2612 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2613 ;;Total ram usage:       13 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_sprintf
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text15
  2623  0013AC                     __ptext15:
  2624                           	opt stack 0
  2625  0013AC                     ___lldiv:
  2626                           	opt stack 27
  2627                           
  2628                           ;incstack = 0
  2629  0013AC  0E00               	movlw	0
  2630  0013AE  6E09               	movwf	___lldiv@quotient,c
  2631  0013B0  0E00               	movlw	0
  2632  0013B2  6E0A               	movwf	___lldiv@quotient+1,c
  2633  0013B4  0E00               	movlw	0
  2634  0013B6  6E0B               	movwf	___lldiv@quotient+2,c
  2635  0013B8  0E00               	movlw	0
  2636  0013BA  6E0C               	movwf	___lldiv@quotient+3,c
  2637  0013BC  5005               	movf	___lldiv@divisor,w,c
  2638  0013BE  1006               	iorwf	___lldiv@divisor+1,w,c
  2639  0013C0  1007               	iorwf	___lldiv@divisor+2,w,c
  2640  0013C2  1008               	iorwf	___lldiv@divisor+3,w,c
  2641  0013C4  B4D8               	btfsc	status,2,c
  2642  0013C6  D02A               	goto	l512
  2643  0013C8  0E01               	movlw	1
  2644  0013CA  6E0D               	movwf	___lldiv@counter,c
  2645  0013CC  D006               	goto	l1576
  2646  0013CE                     l1574:
  2647  0013CE  90D8               	bcf	status,0,c
  2648  0013D0  3605               	rlcf	___lldiv@divisor,f,c
  2649  0013D2  3606               	rlcf	___lldiv@divisor+1,f,c
  2650  0013D4  3607               	rlcf	___lldiv@divisor+2,f,c
  2651  0013D6  3608               	rlcf	___lldiv@divisor+3,f,c
  2652  0013D8  2A0D               	incf	___lldiv@counter,f,c
  2653  0013DA                     l1576:
  2654  0013DA  AE08               	btfss	___lldiv@divisor+3,7,c
  2655  0013DC  D7F8               	goto	l1574
  2656  0013DE                     l1578:
  2657  0013DE  90D8               	bcf	status,0,c
  2658  0013E0  3609               	rlcf	___lldiv@quotient,f,c
  2659  0013E2  360A               	rlcf	___lldiv@quotient+1,f,c
  2660  0013E4  360B               	rlcf	___lldiv@quotient+2,f,c
  2661  0013E6  360C               	rlcf	___lldiv@quotient+3,f,c
  2662  0013E8  5005               	movf	___lldiv@divisor,w,c
  2663  0013EA  5C01               	subwf	___lldiv@dividend,w,c
  2664  0013EC  5006               	movf	___lldiv@divisor+1,w,c
  2665  0013EE  5802               	subwfb	___lldiv@dividend+1,w,c
  2666  0013F0  5007               	movf	___lldiv@divisor+2,w,c
  2667  0013F2  5803               	subwfb	___lldiv@dividend+2,w,c
  2668  0013F4  5008               	movf	___lldiv@divisor+3,w,c
  2669  0013F6  5804               	subwfb	___lldiv@dividend+3,w,c
  2670  0013F8  A0D8               	btfss	status,0,c
  2671  0013FA  D009               	goto	l1586
  2672  0013FC  5005               	movf	___lldiv@divisor,w,c
  2673  0013FE  5E01               	subwf	___lldiv@dividend,f,c
  2674  001400  5006               	movf	___lldiv@divisor+1,w,c
  2675  001402  5A02               	subwfb	___lldiv@dividend+1,f,c
  2676  001404  5007               	movf	___lldiv@divisor+2,w,c
  2677  001406  5A03               	subwfb	___lldiv@dividend+2,f,c
  2678  001408  5008               	movf	___lldiv@divisor+3,w,c
  2679  00140A  5A04               	subwfb	___lldiv@dividend+3,f,c
  2680  00140C  8009               	bsf	___lldiv@quotient,0,c
  2681  00140E                     l1586:
  2682  00140E  90D8               	bcf	status,0,c
  2683  001410  3208               	rrcf	___lldiv@divisor+3,f,c
  2684  001412  3207               	rrcf	___lldiv@divisor+2,f,c
  2685  001414  3206               	rrcf	___lldiv@divisor+1,f,c
  2686  001416  3205               	rrcf	___lldiv@divisor,f,c
  2687  001418  2E0D               	decfsz	___lldiv@counter,f,c
  2688  00141A  D7E1               	goto	l1578
  2689  00141C                     l512:
  2690  00141C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2691  001420  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2692  001424  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2693  001428  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2694  00142C  0012               	return		;funcret
  2695  00142E                     __end_of___lldiv:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           prodh	equ	0xFF4
  2702                           prodl	equ	0xFF3
  2703                           postinc0	equ	0xFEE
  2704                           wreg	equ	0xFE8
  2705                           postdec1	equ	0xFE5
  2706                           plusw1	equ	0xFE3
  2707                           fsr1l	equ	0xFE1
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           plusw2	equ	0xFDB
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function ___lltoft *****************
  2717 ;; Defined at:
  2718 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  c               4    8[COMRAM] unsigned long 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  exp             1   16[COMRAM] unsigned char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  3    8[COMRAM] float 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2, status,0, cstack
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2732 ;;      Params:         4       0       0       0       0       0       0       0       0
  2733 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2734 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2735 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2736 ;;Total ram usage:        9 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    1
  2739 ;; This function calls:
  2740 ;;		___ftpack
  2741 ;; This function is called by:
  2742 ;;		_ftoa
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text16
  2747  001586                     __ptext16:
  2748                           	opt stack 0
  2749  001586                     ___lltoft:
  2750                           	opt stack 27
  2751                           
  2752                           ;incstack = 0
  2753  001586  0E8E               	movlw	142
  2754  001588  6E11               	movwf	___lltoft@exp,c
  2755  00158A  D006               	goto	l1940
  2756  00158C                     l1938:
  2757  00158C  90D8               	bcf	status,0,c
  2758  00158E  320C               	rrcf	___lltoft@c+3,f,c
  2759  001590  320B               	rrcf	___lltoft@c+2,f,c
  2760  001592  320A               	rrcf	___lltoft@c+1,f,c
  2761  001594  3209               	rrcf	___lltoft@c,f,c
  2762  001596  2A11               	incf	___lltoft@exp,f,c
  2763  001598                     l1940:
  2764  001598  0E00               	movlw	0
  2765  00159A  1409               	andwf	___lltoft@c,w,c
  2766  00159C  6E0D               	movwf	??___lltoft& (0+255),c
  2767  00159E  0E00               	movlw	0
  2768  0015A0  140A               	andwf	___lltoft@c+1,w,c
  2769  0015A2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  2770  0015A4  0E00               	movlw	0
  2771  0015A6  140B               	andwf	___lltoft@c+2,w,c
  2772  0015A8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  2773  0015AA  0EFF               	movlw	255
  2774  0015AC  140C               	andwf	___lltoft@c+3,w,c
  2775  0015AE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  2776  0015B0  500D               	movf	??___lltoft,w,c
  2777  0015B2  100E               	iorwf	??___lltoft+1,w,c
  2778  0015B4  100F               	iorwf	??___lltoft+2,w,c
  2779  0015B6  1010               	iorwf	??___lltoft+3,w,c
  2780  0015B8  A4D8               	btfss	status,2,c
  2781  0015BA  D7E8               	goto	l1938
  2782  0015BC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  2783  0015C0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  2784  0015C4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  2785  0015C8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  2786  0015CC  0E00               	movlw	0
  2787  0015CE  6E05               	movwf	___ftpack@sign,c
  2788  0015D0  ECDB  F008         	call	___ftpack	;wreg free
  2789  0015D4  C001  F009         	movff	?___ftpack,?___lltoft
  2790  0015D8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  2791  0015DC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  2792  0015E0  0012               	return	
  2793  0015E2                     __end_of___lltoft:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           prodh	equ	0xFF4
  2800                           prodl	equ	0xFF3
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postdec1	equ	0xFE5
  2804                           plusw1	equ	0xFE3
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           postinc2	equ	0xFDE
  2808                           postdec2	equ	0xFDD
  2809                           plusw2	equ	0xFDB
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function ___ftsub *****************
  2815 ;; Defined at:
  2816 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  f1              3   45[COMRAM] float 
  2819 ;;  f2              3   48[COMRAM] float 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  3   45[COMRAM] float 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2831 ;;      Params:         6       0       0       0       0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2834 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2835 ;;Total ram usage:        6 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    2
  2838 ;; This function calls:
  2839 ;;		___ftadd
  2840 ;; This function is called by:
  2841 ;;		_ftoa
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text17
  2846  0016C0                     __ptext17:
  2847                           	opt stack 0
  2848  0016C0                     ___ftsub:
  2849                           	opt stack 26
  2850                           
  2851                           ;incstack = 0
  2852  0016C0  5031               	movf	___ftsub@f2,w,c
  2853  0016C2  1032               	iorwf	___ftsub@f2+1,w,c
  2854  0016C4  1033               	iorwf	___ftsub@f2+2,w,c
  2855  0016C6  B4D8               	btfsc	status,2,c
  2856  0016C8  D006               	goto	l1852
  2857  0016CA  0E00               	movlw	0
  2858  0016CC  1A31               	xorwf	___ftsub@f2,f,c
  2859  0016CE  0E00               	movlw	0
  2860  0016D0  1A32               	xorwf	___ftsub@f2+1,f,c
  2861  0016D2  0E80               	movlw	128
  2862  0016D4  1A33               	xorwf	___ftsub@f2+2,f,c
  2863  0016D6                     l1852:
  2864  0016D6  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  2865  0016DA  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  2866  0016DE  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  2867  0016E2  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  2868  0016E6  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  2869  0016EA  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  2870  0016EE  ECB1  F005         	call	___ftadd	;wreg free
  2871  0016F2  C022  F02E         	movff	?___ftadd,?___ftsub
  2872  0016F6  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  2873  0016FA  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  2874  0016FE  0012               	return	
  2875  001700                     __end_of___ftsub:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postdec1	equ	0xFE5
  2886                           plusw1	equ	0xFE3
  2887                           fsr1l	equ	0xFE1
  2888                           indf2	equ	0xFDF
  2889                           postinc2	equ	0xFDE
  2890                           postdec2	equ	0xFDD
  2891                           plusw2	equ	0xFDB
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function ___ftneg *****************
  2897 ;; Defined at:
  2898 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  f1              3    0[COMRAM] float 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  3    0[COMRAM] float 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2912 ;;      Params:         3       0       0       0       0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2915 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_ftoa
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text18
  2926  001838                     __ptext18:
  2927                           	opt stack 0
  2928  001838                     ___ftneg:
  2929                           	opt stack 28
  2930                           
  2931                           ;incstack = 0
  2932  001838  5001               	movf	___ftneg@f1,w,c
  2933  00183A  1002               	iorwf	___ftneg@f1+1,w,c
  2934  00183C  1003               	iorwf	___ftneg@f1+2,w,c
  2935  00183E  B4D8               	btfsc	status,2,c
  2936  001840  D006               	goto	l440
  2937  001842  0E00               	movlw	0
  2938  001844  1A01               	xorwf	___ftneg@f1,f,c
  2939  001846  0E00               	movlw	0
  2940  001848  1A02               	xorwf	___ftneg@f1+1,f,c
  2941  00184A  0E80               	movlw	128
  2942  00184C  1A03               	xorwf	___ftneg@f1+2,f,c
  2943  00184E                     l440:
  2944  00184E  C001  F001         	movff	___ftneg@f1,?___ftneg
  2945  001852  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  2946  001856  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  2947  00185A  0012               	return		;funcret
  2948  00185C                     __end_of___ftneg:
  2949                           	opt stack 0
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postdec1	equ	0xFE5
  2959                           plusw1	equ	0xFE3
  2960                           fsr1l	equ	0xFE1
  2961                           indf2	equ	0xFDF
  2962                           postinc2	equ	0xFDE
  2963                           postdec2	equ	0xFDD
  2964                           plusw2	equ	0xFDB
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function ___ftmul *****************
  2970 ;; Defined at:
  2971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  f1              3    8[COMRAM] float 
  2974 ;;  f2              3   11[COMRAM] float 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  2977 ;;  sign            1   22[COMRAM] unsigned char 
  2978 ;;  cntr            1   21[COMRAM] unsigned char 
  2979 ;;  exp             1   17[COMRAM] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  3    8[COMRAM] float 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2989 ;;      Params:         6       0       0       0       0       0       0       0       0
  2990 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2991 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2992 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2993 ;;Total ram usage:       15 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    1
  2996 ;; This function calls:
  2997 ;;		___ftpack
  2998 ;; This function is called by:
  2999 ;;		_ftoa
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text19
  3004  000E1C                     __ptext19:
  3005                           	opt stack 0
  3006  000E1C                     ___ftmul:
  3007                           	opt stack 27
  3008                           
  3009                           ;incstack = 0
  3010  000E1C  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  3011  000E20  6A10               	clrf	(??___ftmul+1)& (0+255),c
  3012  000E22  6A11               	clrf	(??___ftmul+2)& (0+255),c
  3013  000E24  340A               	rlcf	___ftmul@f1+1,w,c
  3014  000E26  360F               	rlcf	??___ftmul& (0+255),f,c
  3015  000E28  E301               	bnc	u1711
  3016  000E2A  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  3017  000E2C                     u1711:
  3018  000E2C  500F               	movf	??___ftmul,w,c
  3019  000E2E  6E12               	movwf	___ftmul@exp,c
  3020  000E30  5012               	movf	___ftmul@exp,w,c
  3021  000E32  A4D8               	btfss	status,2,c
  3022  000E34  D007               	goto	l1806
  3023  000E36  0E00               	movlw	0
  3024  000E38  6E09               	movwf	?___ftmul,c
  3025  000E3A  0E00               	movlw	0
  3026  000E3C  6E0A               	movwf	?___ftmul+1,c
  3027  000E3E  0E00               	movlw	0
  3028  000E40  6E0B               	movwf	?___ftmul+2,c
  3029  000E42  0012               	return	
  3030  000E44                     l1806:
  3031  000E44  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  3032  000E48  6A10               	clrf	(??___ftmul+1)& (0+255),c
  3033  000E4A  6A11               	clrf	(??___ftmul+2)& (0+255),c
  3034  000E4C  340D               	rlcf	___ftmul@f2+1,w,c
  3035  000E4E  360F               	rlcf	??___ftmul& (0+255),f,c
  3036  000E50  E301               	bnc	u1731
  3037  000E52  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  3038  000E54                     u1731:
  3039  000E54  500F               	movf	??___ftmul,w,c
  3040  000E56  6E17               	movwf	___ftmul@sign,c
  3041  000E58  5017               	movf	___ftmul@sign,w,c
  3042  000E5A  A4D8               	btfss	status,2,c
  3043  000E5C  D007               	goto	l1812
  3044  000E5E  0E00               	movlw	0
  3045  000E60  6E09               	movwf	?___ftmul,c
  3046  000E62  0E00               	movlw	0
  3047  000E64  6E0A               	movwf	?___ftmul+1,c
  3048  000E66  0E00               	movlw	0
  3049  000E68  6E0B               	movwf	?___ftmul+2,c
  3050  000E6A  0012               	return	
  3051  000E6C                     l1812:
  3052  000E6C  5017               	movf	___ftmul@sign,w,c
  3053  000E6E  0F7B               	addlw	123
  3054  000E70  2612               	addwf	___ftmul@exp,f,c
  3055  000E72  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  3056  000E76  500E               	movf	___ftmul@f2+2,w,c
  3057  000E78  1A17               	xorwf	___ftmul@sign,f,c
  3058  000E7A  0E80               	movlw	128
  3059  000E7C  1617               	andwf	___ftmul@sign,f,c
  3060  000E7E  8E0A               	bsf	___ftmul@f1+1,7,c
  3061  000E80  8E0D               	bsf	___ftmul@f2+1,7,c
  3062  000E82  0EFF               	movlw	255
  3063  000E84  160C               	andwf	___ftmul@f2,f,c
  3064  000E86  0EFF               	movlw	255
  3065  000E88  160D               	andwf	___ftmul@f2+1,f,c
  3066  000E8A  0E00               	movlw	0
  3067  000E8C  160E               	andwf	___ftmul@f2+2,f,c
  3068  000E8E  0E00               	movlw	0
  3069  000E90  6E13               	movwf	___ftmul@f3_as_product,c
  3070  000E92  0E00               	movlw	0
  3071  000E94  6E14               	movwf	___ftmul@f3_as_product+1,c
  3072  000E96  0E00               	movlw	0
  3073  000E98  6E15               	movwf	___ftmul@f3_as_product+2,c
  3074  000E9A  0E07               	movlw	7
  3075  000E9C  6E16               	movwf	___ftmul@cntr,c
  3076  000E9E                     l1826:
  3077  000E9E  A009               	btfss	___ftmul@f1,0,c
  3078  000EA0  D006               	goto	l1830
  3079  000EA2  500C               	movf	___ftmul@f2,w,c
  3080  000EA4  2613               	addwf	___ftmul@f3_as_product,f,c
  3081  000EA6  500D               	movf	___ftmul@f2+1,w,c
  3082  000EA8  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  3083  000EAA  500E               	movf	___ftmul@f2+2,w,c
  3084  000EAC  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  3085  000EAE                     l1830:
  3086  000EAE  90D8               	bcf	status,0,c
  3087  000EB0  320B               	rrcf	___ftmul@f1+2,f,c
  3088  000EB2  320A               	rrcf	___ftmul@f1+1,f,c
  3089  000EB4  3209               	rrcf	___ftmul@f1,f,c
  3090  000EB6  90D8               	bcf	status,0,c
  3091  000EB8  360C               	rlcf	___ftmul@f2,f,c
  3092  000EBA  360D               	rlcf	___ftmul@f2+1,f,c
  3093  000EBC  360E               	rlcf	___ftmul@f2+2,f,c
  3094  000EBE  2E16               	decfsz	___ftmul@cntr,f,c
  3095  000EC0  D7EE               	goto	l1826
  3096  000EC2  0E09               	movlw	9
  3097  000EC4  6E16               	movwf	___ftmul@cntr,c
  3098  000EC6                     l1836:
  3099  000EC6  A009               	btfss	___ftmul@f1,0,c
  3100  000EC8  D006               	goto	l1840
  3101  000ECA  500C               	movf	___ftmul@f2,w,c
  3102  000ECC  2613               	addwf	___ftmul@f3_as_product,f,c
  3103  000ECE  500D               	movf	___ftmul@f2+1,w,c
  3104  000ED0  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  3105  000ED2  500E               	movf	___ftmul@f2+2,w,c
  3106  000ED4  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  3107  000ED6                     l1840:
  3108  000ED6  90D8               	bcf	status,0,c
  3109  000ED8  320B               	rrcf	___ftmul@f1+2,f,c
  3110  000EDA  320A               	rrcf	___ftmul@f1+1,f,c
  3111  000EDC  3209               	rrcf	___ftmul@f1,f,c
  3112  000EDE  90D8               	bcf	status,0,c
  3113  000EE0  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  3114  000EE2  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  3115  000EE4  3213               	rrcf	___ftmul@f3_as_product,f,c
  3116  000EE6  2E16               	decfsz	___ftmul@cntr,f,c
  3117  000EE8  D7EE               	goto	l1836
  3118  000EEA  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3119  000EEE  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3120  000EF2  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3121  000EF6  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  3122  000EFA  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  3123  000EFE  ECDB  F008         	call	___ftpack	;wreg free
  3124  000F02  C001  F009         	movff	?___ftpack,?___ftmul
  3125  000F06  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  3126  000F0A  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  3127  000F0E  0012               	return	
  3128  000F10                     __end_of___ftmul:
  3129                           	opt stack 0
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           postinc0	equ	0xFEE
  3137                           wreg	equ	0xFE8
  3138                           postdec1	equ	0xFE5
  3139                           plusw1	equ	0xFE3
  3140                           fsr1l	equ	0xFE1
  3141                           indf2	equ	0xFDF
  3142                           postinc2	equ	0xFDE
  3143                           postdec2	equ	0xFDD
  3144                           plusw2	equ	0xFDB
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _USART_Write_Text *****************
  3150 ;; Defined at:
  3151 ;;		line 65 in file "USART.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  text            2   24[COMRAM] PTR unsigned char 
  3154 ;;		 -> ftoa@buf(17), USART_Write_Integer@buf(8), main@my_char(5), 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  i               2   26[COMRAM] int 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3166 ;;      Params:         2       0       0       0       0       0       0       0       0
  3167 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3169 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3170 ;;Total ram usage:        4 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    1
  3173 ;; This function calls:
  3174 ;;		_USART_Write
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;;		_USART_Write_Integer
  3178 ;;		_USART_Write_Float
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text20
  3183  001736                     __ptext20:
  3184                           	opt stack 0
  3185  001736                     _USART_Write_Text:
  3186                           	opt stack 29
  3187                           
  3188                           ;USART.c: 67: int i;
  3189                           ;USART.c: 68: for(i=0;text[i]!='\0';i++)
  3190                           
  3191                           ;incstack = 0
  3192  001736  0E00               	movlw	0
  3193  001738  6E1C               	movwf	USART_Write_Text@i+1,c
  3194  00173A  0E00               	movlw	0
  3195  00173C  6E1B               	movwf	USART_Write_Text@i,c
  3196  00173E  D00B               	goto	l1954
  3197  001740                     l1950:
  3198                           
  3199                           ;USART.c: 69: USART_Write(text[i]);
  3200  001740  501B               	movf	USART_Write_Text@i,w,c
  3201  001742  2419               	addwf	USART_Write_Text@text,w,c
  3202  001744  6ED9               	movwf	fsr2l,c
  3203  001746  501C               	movf	USART_Write_Text@i+1,w,c
  3204  001748  201A               	addwfc	USART_Write_Text@text+1,w,c
  3205  00174A  6EDA               	movwf	fsr2h,c
  3206  00174C  50DF               	movf	indf2,w,c
  3207  00174E  EC3D  F00C         	call	_USART_Write
  3208  001752  4A1B               	infsnz	USART_Write_Text@i,f,c
  3209  001754  2A1C               	incf	USART_Write_Text@i+1,f,c
  3210  001756                     l1954:
  3211  001756  501B               	movf	USART_Write_Text@i,w,c
  3212  001758  2419               	addwf	USART_Write_Text@text,w,c
  3213  00175A  6ED9               	movwf	fsr2l,c
  3214  00175C  501C               	movf	USART_Write_Text@i+1,w,c
  3215  00175E  201A               	addwfc	USART_Write_Text@text+1,w,c
  3216  001760  6EDA               	movwf	fsr2h,c
  3217  001762  50DF               	movf	indf2,w,c
  3218  001764  B4D8               	btfsc	status,2,c
  3219  001766  0012               	return	
  3220  001768  D7EB               	goto	l1950
  3221  00176A                     __end_of_USART_Write_Text:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           postdec1	equ	0xFE5
  3232                           plusw1	equ	0xFE3
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           plusw2	equ	0xFDB
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _USART_Write *****************
  3243 ;; Defined at:
  3244 ;;		line 51 in file "USART.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  out             1    wreg     unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  out             1    0[COMRAM] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0
  3259 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3261 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3262 ;;Total ram usage:        1 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;;		_USART_Write_Text
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text21
  3273  00187A                     __ptext21:
  3274                           	opt stack 0
  3275  00187A                     _USART_Write:
  3276                           	opt stack 29
  3277                           
  3278                           ;incstack = 0
  3279                           ;USART_Write@out stored from wreg
  3280  00187A  6E01               	movwf	USART_Write@out,c
  3281  00187C                     l65:
  3282  00187C  A89E               	btfss	3998,4,c	;volatile
  3283  00187E  D7FE               	goto	l65
  3284                           
  3285                           ;USART.c: 54: TXREG = out;
  3286  001880  C001  FFAD         	movff	USART_Write@out,4013	;volatile
  3287  001884  0012               	return		;funcret
  3288  001886                     __end_of_USART_Write:
  3289                           	opt stack 0
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           postinc0	equ	0xFEE
  3297                           wreg	equ	0xFE8
  3298                           postdec1	equ	0xFE5
  3299                           plusw1	equ	0xFE3
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           plusw2	equ	0xFDB
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _USART_Init *****************
  3310 ;; Defined at:
  3311 ;;		line 27 in file "USART.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  baud_rate       4   45[COMRAM] long 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  temp            3   49[COMRAM] float 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3325 ;;      Params:         4       0       0       0       0       0       0       0       0
  3326 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3328 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3329 ;;Total ram usage:        7 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    2
  3332 ;; This function calls:
  3333 ;;		___altoft
  3334 ;;		___ftadd
  3335 ;;		___ftdiv
  3336 ;;		___fttol
  3337 ;; This function is called by:
  3338 ;;		_main
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text22
  3343  00142E                     __ptext22:
  3344                           	opt stack 0
  3345  00142E                     _USART_Init:
  3346                           	opt stack 28
  3347                           
  3348                           ;USART.c: 29: float temp;
  3349                           ;USART.c: 32: TRISCbits.TRISC6=0;
  3350                           
  3351                           ;incstack = 0
  3352  00142E  9C94               	bcf	3988,6,c	;volatile
  3353                           
  3354                           ;USART.c: 34: TRISCbits.TRISC7=1;
  3355  001430  8E94               	bsf	3988,7,c	;volatile
  3356                           
  3357                           ;USART.c: 37: temp= (( (float) (48000000/64) / (float) baud_rate ) - 1);
  3358  001432  C02E  F009         	movff	USART_Init@baud_rate,___altoft@c
  3359  001436  C02F  F00A         	movff	USART_Init@baud_rate+1,___altoft@c+1
  3360  00143A  C030  F00B         	movff	USART_Init@baud_rate+2,___altoft@c+2
  3361  00143E  C031  F00C         	movff	USART_Init@baud_rate+3,___altoft@c+3
  3362  001442  EC54  F00A         	call	___altoft	;wreg free
  3363  001446  C009  F016         	movff	?___altoft,___ftdiv@f2
  3364  00144A  C00A  F017         	movff	?___altoft+1,___ftdiv@f2+1
  3365  00144E  C00B  F018         	movff	?___altoft+2,___ftdiv@f2+2
  3366  001452  0E1B               	movlw	27
  3367  001454  6E13               	movwf	___ftdiv@f1,c
  3368  001456  0E37               	movlw	55
  3369  001458  6E14               	movwf	___ftdiv@f1+1,c
  3370  00145A  0E49               	movlw	73
  3371  00145C  6E15               	movwf	___ftdiv@f1+2,c
  3372  00145E  EC02  F008         	call	___ftdiv	;wreg free
  3373  001462  C013  F022         	movff	?___ftdiv,___ftadd@f1
  3374  001466  C014  F023         	movff	?___ftdiv+1,___ftadd@f1+1
  3375  00146A  C015  F024         	movff	?___ftdiv+2,___ftadd@f1+2
  3376  00146E  0E00               	movlw	0
  3377  001470  6E25               	movwf	___ftadd@f2,c
  3378  001472  0E80               	movlw	128
  3379  001474  6E26               	movwf	___ftadd@f2+1,c
  3380  001476  0EBF               	movlw	191
  3381  001478  6E27               	movwf	___ftadd@f2+2,c
  3382  00147A  ECB1  F005         	call	___ftadd	;wreg free
  3383  00147E  C022  F032         	movff	?___ftadd,USART_Init@temp
  3384  001482  C023  F033         	movff	?___ftadd+1,USART_Init@temp+1
  3385  001486  C024  F034         	movff	?___ftadd+2,USART_Init@temp+2
  3386                           
  3387                           ;USART.c: 38: SPBRG = (int) temp;
  3388  00148A  C032  F018         	movff	USART_Init@temp,___fttol@f1
  3389  00148E  C033  F019         	movff	USART_Init@temp+1,___fttol@f1+1
  3390  001492  C034  F01A         	movff	USART_Init@temp+2,___fttol@f1+2
  3391  001496  EC88  F007         	call	___fttol	;wreg free
  3392  00149A  5018               	movf	?___fttol,w,c
  3393  00149C  6EAF               	movwf	4015,c	;volatile
  3394                           
  3395                           ;USART.c: 40: TXSTA = 0x20;
  3396  00149E  0E20               	movlw	32
  3397  0014A0  6EAC               	movwf	4012,c	;volatile
  3398                           
  3399                           ;USART.c: 41: RCSTA = 0x90;
  3400  0014A2  0E90               	movlw	144
  3401  0014A4  6EAB               	movwf	4011,c	;volatile
  3402  0014A6  0012               	return		;funcret
  3403  0014A8                     __end_of_USART_Init:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           postinc0	equ	0xFEE
  3412                           wreg	equ	0xFE8
  3413                           postdec1	equ	0xFE5
  3414                           plusw1	equ	0xFE3
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           plusw2	equ	0xFDB
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function ___fttol *****************
  3425 ;; Defined at:
  3426 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  f1              3   23[COMRAM] float 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  lval            4   33[COMRAM] unsigned long 
  3431 ;;  exp1            1   37[COMRAM] unsigned char 
  3432 ;;  sign1           1   32[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  4   23[COMRAM] long 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3442 ;;      Params:         4       0       0       0       0       0       0       0       0
  3443 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3444 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3445 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3446 ;;Total ram usage:       15 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_USART_Init
  3452 ;;		_ftoa
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text23
  3457  000F10                     __ptext23:
  3458                           	opt stack 0
  3459  000F10                     ___fttol:
  3460                           	opt stack 28
  3461                           
  3462                           ;incstack = 0
  3463  000F10  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  3464  000F14  6A1D               	clrf	(??___fttol+1)& (0+255),c
  3465  000F16  6A1E               	clrf	(??___fttol+2)& (0+255),c
  3466  000F18  3419               	rlcf	___fttol@f1+1,w,c
  3467  000F1A  361C               	rlcf	??___fttol& (0+255),f,c
  3468  000F1C  E301               	bnc	u1791
  3469  000F1E  801D               	bsf	(??___fttol+1)& (0+255),0,c
  3470  000F20                     u1791:
  3471  000F20  501C               	movf	??___fttol,w,c
  3472  000F22  6E26               	movwf	___fttol@exp1,c
  3473  000F24  5026               	movf	___fttol@exp1,w,c
  3474  000F26  A4D8               	btfss	status,2,c
  3475  000F28  D009               	goto	l1866
  3476  000F2A  0E00               	movlw	0
  3477  000F2C  6E18               	movwf	?___fttol,c
  3478  000F2E  0E00               	movlw	0
  3479  000F30  6E19               	movwf	?___fttol+1,c
  3480  000F32  0E00               	movlw	0
  3481  000F34  6E1A               	movwf	?___fttol+2,c
  3482  000F36  0E00               	movlw	0
  3483  000F38  6E1B               	movwf	?___fttol+3,c
  3484  000F3A  0012               	return	
  3485  000F3C                     l1866:
  3486  000F3C  0E17               	movlw	23
  3487  000F3E  6E1C               	movwf	??___fttol& (0+255),c
  3488  000F40  C018  F01D         	movff	___fttol@f1,??___fttol+1
  3489  000F44  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  3490  000F48  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  3491  000F4C  281C               	incf	??___fttol,w,c
  3492  000F4E  6E20               	movwf	(??___fttol+4)& (0+255),c
  3493  000F50  D004               	goto	u1810
  3494  000F52                     u1815:
  3495  000F52  90D8               	bcf	status,0,c
  3496  000F54  321F               	rrcf	??___fttol+3,f,c
  3497  000F56  321E               	rrcf	??___fttol+2,f,c
  3498  000F58  321D               	rrcf	??___fttol+1,f,c
  3499  000F5A                     u1810:
  3500  000F5A  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  3501  000F5C  D7FA               	goto	u1815
  3502  000F5E  501D               	movf	??___fttol+1,w,c
  3503  000F60  6E21               	movwf	___fttol@sign1,c
  3504  000F62  8E19               	bsf	___fttol@f1+1,7,c
  3505  000F64  0EFF               	movlw	255
  3506  000F66  1618               	andwf	___fttol@f1,f,c
  3507  000F68  0EFF               	movlw	255
  3508  000F6A  1619               	andwf	___fttol@f1+1,f,c
  3509  000F6C  0E00               	movlw	0
  3510  000F6E  161A               	andwf	___fttol@f1+2,f,c
  3511  000F70  5018               	movf	___fttol@f1,w,c
  3512  000F72  6E22               	movwf	___fttol@lval,c
  3513  000F74  5019               	movf	___fttol@f1+1,w,c
  3514  000F76  6E23               	movwf	___fttol@lval+1,c
  3515  000F78  501A               	movf	___fttol@f1+2,w,c
  3516  000F7A  6E24               	movwf	___fttol@lval+2,c
  3517  000F7C  6A25               	clrf	___fttol@lval+3,c
  3518  000F7E  0E8E               	movlw	142
  3519  000F80  5E26               	subwf	___fttol@exp1,f,c
  3520  000F82  AE26               	btfss	___fttol@exp1,7,c
  3521  000F84  D016               	goto	l1888
  3522  000F86  5026               	movf	___fttol@exp1,w,c
  3523  000F88  0A80               	xorlw	128
  3524  000F8A  0F8F               	addlw	143
  3525  000F8C  B0D8               	btfsc	status,0,c
  3526  000F8E  D009               	goto	l1884
  3527  000F90  0E00               	movlw	0
  3528  000F92  6E18               	movwf	?___fttol,c
  3529  000F94  0E00               	movlw	0
  3530  000F96  6E19               	movwf	?___fttol+1,c
  3531  000F98  0E00               	movlw	0
  3532  000F9A  6E1A               	movwf	?___fttol+2,c
  3533  000F9C  0E00               	movlw	0
  3534  000F9E  6E1B               	movwf	?___fttol+3,c
  3535  000FA0  0012               	return	
  3536  000FA2                     l1884:
  3537  000FA2  90D8               	bcf	status,0,c
  3538  000FA4  3225               	rrcf	___fttol@lval+3,f,c
  3539  000FA6  3224               	rrcf	___fttol@lval+2,f,c
  3540  000FA8  3223               	rrcf	___fttol@lval+1,f,c
  3541  000FAA  3222               	rrcf	___fttol@lval,f,c
  3542  000FAC  3E26               	incfsz	___fttol@exp1,f,c
  3543  000FAE  D7F9               	goto	l1884
  3544  000FB0  D015               	goto	l1898
  3545  000FB2                     l1888:
  3546  000FB2  0E17               	movlw	23
  3547  000FB4  6426               	cpfsgt	___fttol@exp1,c
  3548  000FB6  D00F               	goto	l1896
  3549  000FB8  0E00               	movlw	0
  3550  000FBA  6E18               	movwf	?___fttol,c
  3551  000FBC  0E00               	movlw	0
  3552  000FBE  6E19               	movwf	?___fttol+1,c
  3553  000FC0  0E00               	movlw	0
  3554  000FC2  6E1A               	movwf	?___fttol+2,c
  3555  000FC4  0E00               	movlw	0
  3556  000FC6  6E1B               	movwf	?___fttol+3,c
  3557  000FC8  0012               	return	
  3558  000FCA                     l1894:
  3559  000FCA  90D8               	bcf	status,0,c
  3560  000FCC  3622               	rlcf	___fttol@lval,f,c
  3561  000FCE  3623               	rlcf	___fttol@lval+1,f,c
  3562  000FD0  3624               	rlcf	___fttol@lval+2,f,c
  3563  000FD2  3625               	rlcf	___fttol@lval+3,f,c
  3564  000FD4  0626               	decf	___fttol@exp1,f,c
  3565  000FD6                     l1896:
  3566  000FD6  5026               	movf	___fttol@exp1,w,c
  3567  000FD8  A4D8               	btfss	status,2,c
  3568  000FDA  D7F7               	goto	l1894
  3569  000FDC                     l1898:
  3570  000FDC  5021               	movf	___fttol@sign1,w,c
  3571  000FDE  B4D8               	btfsc	status,2,c
  3572  000FE0  D008               	goto	l1902
  3573  000FE2  1E25               	comf	___fttol@lval+3,f,c
  3574  000FE4  1E24               	comf	___fttol@lval+2,f,c
  3575  000FE6  1E23               	comf	___fttol@lval+1,f,c
  3576  000FE8  6C22               	negf	___fttol@lval,c
  3577  000FEA  0E00               	movlw	0
  3578  000FEC  2223               	addwfc	___fttol@lval+1,f,c
  3579  000FEE  2224               	addwfc	___fttol@lval+2,f,c
  3580  000FF0  2225               	addwfc	___fttol@lval+3,f,c
  3581  000FF2                     l1902:
  3582  000FF2  C022  F018         	movff	___fttol@lval,?___fttol
  3583  000FF6  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  3584  000FFA  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  3585  000FFE  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  3586  001002  0012               	return	
  3587  001004                     __end_of___fttol:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           postdec1	equ	0xFE5
  3598                           plusw1	equ	0xFE3
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           plusw2	equ	0xFDB
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function ___ftdiv *****************
  3609 ;; Defined at:
  3610 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  f1              3   18[COMRAM] float 
  3613 ;;  f2              3   21[COMRAM] float 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  f3              3   28[COMRAM] float 
  3616 ;;  sign            1   32[COMRAM] unsigned char 
  3617 ;;  exp             1   31[COMRAM] unsigned char 
  3618 ;;  cntr            1   27[COMRAM] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  3   18[COMRAM] float 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3628 ;;      Params:         6       0       0       0       0       0       0       0       0
  3629 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3630 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3631 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3632 ;;Total ram usage:       15 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    1
  3635 ;; This function calls:
  3636 ;;		___ftpack
  3637 ;; This function is called by:
  3638 ;;		_USART_Init
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text24
  3643  001004                     __ptext24:
  3644                           	opt stack 0
  3645  001004                     ___ftdiv:
  3646                           	opt stack 28
  3647                           
  3648                           ;incstack = 0
  3649  001004  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  3650  001008  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  3651  00100A  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  3652  00100C  3414               	rlcf	___ftdiv@f1+1,w,c
  3653  00100E  3619               	rlcf	??___ftdiv& (0+255),f,c
  3654  001010  E301               	bnc	u1961
  3655  001012  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3656  001014                     u1961:
  3657  001014  5019               	movf	??___ftdiv,w,c
  3658  001016  6E20               	movwf	___ftdiv@exp,c
  3659  001018  5020               	movf	___ftdiv@exp,w,c
  3660  00101A  A4D8               	btfss	status,2,c
  3661  00101C  D007               	goto	l2012
  3662  00101E  0E00               	movlw	0
  3663  001020  6E13               	movwf	?___ftdiv,c
  3664  001022  0E00               	movlw	0
  3665  001024  6E14               	movwf	?___ftdiv+1,c
  3666  001026  0E00               	movlw	0
  3667  001028  6E15               	movwf	?___ftdiv+2,c
  3668  00102A  0012               	return	
  3669  00102C                     l2012:
  3670  00102C  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  3671  001030  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  3672  001032  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  3673  001034  3417               	rlcf	___ftdiv@f2+1,w,c
  3674  001036  3619               	rlcf	??___ftdiv& (0+255),f,c
  3675  001038  E301               	bnc	u1981
  3676  00103A  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3677  00103C                     u1981:
  3678  00103C  5019               	movf	??___ftdiv,w,c
  3679  00103E  6E21               	movwf	___ftdiv@sign,c
  3680  001040  5021               	movf	___ftdiv@sign,w,c
  3681  001042  A4D8               	btfss	status,2,c
  3682  001044  D007               	goto	l2018
  3683  001046  0E00               	movlw	0
  3684  001048  6E13               	movwf	?___ftdiv,c
  3685  00104A  0E00               	movlw	0
  3686  00104C  6E14               	movwf	?___ftdiv+1,c
  3687  00104E  0E00               	movlw	0
  3688  001050  6E15               	movwf	?___ftdiv+2,c
  3689  001052  0012               	return	
  3690  001054                     l2018:
  3691  001054  0E00               	movlw	0
  3692  001056  6E1D               	movwf	___ftdiv@f3,c
  3693  001058  0E00               	movlw	0
  3694  00105A  6E1E               	movwf	___ftdiv@f3+1,c
  3695  00105C  0E00               	movlw	0
  3696  00105E  6E1F               	movwf	___ftdiv@f3+2,c
  3697  001060  5021               	movf	___ftdiv@sign,w,c
  3698  001062  0F89               	addlw	137
  3699  001064  5E20               	subwf	___ftdiv@exp,f,c
  3700  001066  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  3701  00106A  5018               	movf	___ftdiv@f2+2,w,c
  3702  00106C  1A21               	xorwf	___ftdiv@sign,f,c
  3703  00106E  0E80               	movlw	128
  3704  001070  1621               	andwf	___ftdiv@sign,f,c
  3705  001072  8E14               	bsf	___ftdiv@f1+1,7,c
  3706  001074  0EFF               	movlw	255
  3707  001076  1613               	andwf	___ftdiv@f1,f,c
  3708  001078  0EFF               	movlw	255
  3709  00107A  1614               	andwf	___ftdiv@f1+1,f,c
  3710  00107C  0E00               	movlw	0
  3711  00107E  1615               	andwf	___ftdiv@f1+2,f,c
  3712  001080  8E17               	bsf	___ftdiv@f2+1,7,c
  3713  001082  0EFF               	movlw	255
  3714  001084  1616               	andwf	___ftdiv@f2,f,c
  3715  001086  0EFF               	movlw	255
  3716  001088  1617               	andwf	___ftdiv@f2+1,f,c
  3717  00108A  0E00               	movlw	0
  3718  00108C  1618               	andwf	___ftdiv@f2+2,f,c
  3719  00108E  0E18               	movlw	24
  3720  001090  6E1C               	movwf	___ftdiv@cntr,c
  3721  001092                     l2038:
  3722  001092  90D8               	bcf	status,0,c
  3723  001094  361D               	rlcf	___ftdiv@f3,f,c
  3724  001096  361E               	rlcf	___ftdiv@f3+1,f,c
  3725  001098  361F               	rlcf	___ftdiv@f3+2,f,c
  3726  00109A  5016               	movf	___ftdiv@f2,w,c
  3727  00109C  5C13               	subwf	___ftdiv@f1,w,c
  3728  00109E  5017               	movf	___ftdiv@f2+1,w,c
  3729  0010A0  5814               	subwfb	___ftdiv@f1+1,w,c
  3730  0010A2  5018               	movf	___ftdiv@f2+2,w,c
  3731  0010A4  5815               	subwfb	___ftdiv@f1+2,w,c
  3732  0010A6  A0D8               	btfss	status,0,c
  3733  0010A8  D007               	goto	l418
  3734  0010AA  5016               	movf	___ftdiv@f2,w,c
  3735  0010AC  5E13               	subwf	___ftdiv@f1,f,c
  3736  0010AE  5017               	movf	___ftdiv@f2+1,w,c
  3737  0010B0  5A14               	subwfb	___ftdiv@f1+1,f,c
  3738  0010B2  5018               	movf	___ftdiv@f2+2,w,c
  3739  0010B4  5A15               	subwfb	___ftdiv@f1+2,f,c
  3740  0010B6  801D               	bsf	___ftdiv@f3,0,c
  3741  0010B8                     l418:
  3742  0010B8  90D8               	bcf	status,0,c
  3743  0010BA  3613               	rlcf	___ftdiv@f1,f,c
  3744  0010BC  3614               	rlcf	___ftdiv@f1+1,f,c
  3745  0010BE  3615               	rlcf	___ftdiv@f1+2,f,c
  3746  0010C0  2E1C               	decfsz	___ftdiv@cntr,f,c
  3747  0010C2  D7E7               	goto	l2038
  3748  0010C4  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  3749  0010C8  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3750  0010CC  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3751  0010D0  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  3752  0010D4  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  3753  0010D8  ECDB  F008         	call	___ftpack	;wreg free
  3754  0010DC  C001  F013         	movff	?___ftpack,?___ftdiv
  3755  0010E0  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  3756  0010E4  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  3757  0010E8  0012               	return	
  3758  0010EA                     __end_of___ftdiv:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           plusw1	equ	0xFE3
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           plusw2	equ	0xFDB
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function ___ftadd *****************
  3780 ;; Defined at:
  3781 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  f1              3   33[COMRAM] float 
  3784 ;;  f2              3   36[COMRAM] float 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  exp1            1   44[COMRAM] unsigned char 
  3787 ;;  exp2            1   43[COMRAM] unsigned char 
  3788 ;;  sign            1   42[COMRAM] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  3   33[COMRAM] float 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3798 ;;      Params:         6       0       0       0       0       0       0       0       0
  3799 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3800 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3801 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3802 ;;Total ram usage:       12 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    1
  3805 ;; This function calls:
  3806 ;;		___ftpack
  3807 ;; This function is called by:
  3808 ;;		_USART_Init
  3809 ;;		___ftsub
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text25
  3814  000B62                     __ptext25:
  3815                           	opt stack 0
  3816  000B62                     ___ftadd:
  3817                           	opt stack 26
  3818                           
  3819                           ;incstack = 0
  3820  000B62  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  3821  000B66  6A29               	clrf	(??___ftadd+1)& (0+255),c
  3822  000B68  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  3823  000B6A  3423               	rlcf	___ftadd@f1+1,w,c
  3824  000B6C  3628               	rlcf	??___ftadd& (0+255),f,c
  3825  000B6E  E301               	bnc	u1131
  3826  000B70  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  3827  000B72                     u1131:
  3828  000B72  5028               	movf	??___ftadd,w,c
  3829  000B74  6E2D               	movwf	___ftadd@exp1,c
  3830  000B76  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  3831  000B7A  6A29               	clrf	(??___ftadd+1)& (0+255),c
  3832  000B7C  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  3833  000B7E  3426               	rlcf	___ftadd@f2+1,w,c
  3834  000B80  3628               	rlcf	??___ftadd& (0+255),f,c
  3835  000B82  E301               	bnc	u1141
  3836  000B84  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  3837  000B86                     u1141:
  3838  000B86  5028               	movf	??___ftadd,w,c
  3839  000B88  6E2C               	movwf	___ftadd@exp2,c
  3840  000B8A  502D               	movf	___ftadd@exp1,w,c
  3841  000B8C  B4D8               	btfsc	status,2,c
  3842  000B8E  D00B               	goto	l383
  3843  000B90  502C               	movf	___ftadd@exp2,w,c
  3844  000B92  5C2D               	subwf	___ftadd@exp1,w,c
  3845  000B94  B0D8               	btfsc	status,0,c
  3846  000B96  D00E               	goto	l1506
  3847  000B98  502D               	movf	___ftadd@exp1,w,c
  3848  000B9A  0800               	sublw	0
  3849  000B9C  242C               	addwf	___ftadd@exp2,w,c
  3850  000B9E  6E28               	movwf	??___ftadd& (0+255),c
  3851  000BA0  0E18               	movlw	24
  3852  000BA2  6428               	cpfsgt	??___ftadd,c
  3853  000BA4  D007               	goto	l1506
  3854  000BA6                     l383:
  3855  000BA6  C025  F022         	movff	___ftadd@f2,?___ftadd
  3856  000BAA  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  3857  000BAE  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  3858  000BB2  0012               	return	
  3859  000BB4                     l1506:
  3860  000BB4  502C               	movf	___ftadd@exp2,w,c
  3861  000BB6  B4D8               	btfsc	status,2,c
  3862  000BB8  D00B               	goto	l387
  3863  000BBA  502D               	movf	___ftadd@exp1,w,c
  3864  000BBC  5C2C               	subwf	___ftadd@exp2,w,c
  3865  000BBE  B0D8               	btfsc	status,0,c
  3866  000BC0  D00E               	goto	l1512
  3867  000BC2  502C               	movf	___ftadd@exp2,w,c
  3868  000BC4  0800               	sublw	0
  3869  000BC6  242D               	addwf	___ftadd@exp1,w,c
  3870  000BC8  6E28               	movwf	??___ftadd& (0+255),c
  3871  000BCA  0E18               	movlw	24
  3872  000BCC  6428               	cpfsgt	??___ftadd,c
  3873  000BCE  D007               	goto	l1512
  3874  000BD0                     l387:
  3875  000BD0  C022  F022         	movff	___ftadd@f1,?___ftadd
  3876  000BD4  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  3877  000BD8  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  3878  000BDC  0012               	return	
  3879  000BDE                     l1512:
  3880  000BDE  0E06               	movlw	6
  3881  000BE0  6E2B               	movwf	___ftadd@sign,c
  3882  000BE2  BE24               	btfsc	___ftadd@f1+2,7,c
  3883  000BE4  8E2B               	bsf	___ftadd@sign,7,c
  3884  000BE6  BE27               	btfsc	___ftadd@f2+2,7,c
  3885  000BE8  8C2B               	bsf	___ftadd@sign,6,c
  3886  000BEA  8E23               	bsf	___ftadd@f1+1,7,c
  3887  000BEC  0EFF               	movlw	255
  3888  000BEE  1622               	andwf	___ftadd@f1,f,c
  3889  000BF0  0EFF               	movlw	255
  3890  000BF2  1623               	andwf	___ftadd@f1+1,f,c
  3891  000BF4  0E00               	movlw	0
  3892  000BF6  1624               	andwf	___ftadd@f1+2,f,c
  3893  000BF8  8E26               	bsf	___ftadd@f2+1,7,c
  3894  000BFA  0EFF               	movlw	255
  3895  000BFC  1625               	andwf	___ftadd@f2,f,c
  3896  000BFE  0EFF               	movlw	255
  3897  000C00  1626               	andwf	___ftadd@f2+1,f,c
  3898  000C02  0E00               	movlw	0
  3899  000C04  1627               	andwf	___ftadd@f2+2,f,c
  3900  000C06  502C               	movf	___ftadd@exp2,w,c
  3901  000C08  5C2D               	subwf	___ftadd@exp1,w,c
  3902  000C0A  B0D8               	btfsc	status,0,c
  3903  000C0C  D01B               	goto	l1538
  3904  000C0E                     l1528:
  3905  000C0E  90D8               	bcf	status,0,c
  3906  000C10  3625               	rlcf	___ftadd@f2,f,c
  3907  000C12  3626               	rlcf	___ftadd@f2+1,f,c
  3908  000C14  3627               	rlcf	___ftadd@f2+2,f,c
  3909  000C16  062C               	decf	___ftadd@exp2,f,c
  3910  000C18  502D               	movf	___ftadd@exp1,w,c
  3911  000C1A  182C               	xorwf	___ftadd@exp2,w,c
  3912  000C1C  B4D8               	btfsc	status,2,c
  3913  000C1E  D00D               	goto	l1536
  3914  000C20  062B               	decf	___ftadd@sign,f,c
  3915  000C22  C02B  F028         	movff	___ftadd@sign,??___ftadd
  3916  000C26  0E07               	movlw	7
  3917  000C28  1628               	andwf	??___ftadd,f,c
  3918  000C2A  B4D8               	btfsc	status,2,c
  3919  000C2C  D006               	goto	l1536
  3920  000C2E  D7EF               	goto	l1528
  3921  000C30                     l1534:
  3922  000C30  90D8               	bcf	status,0,c
  3923  000C32  3224               	rrcf	___ftadd@f1+2,f,c
  3924  000C34  3223               	rrcf	___ftadd@f1+1,f,c
  3925  000C36  3222               	rrcf	___ftadd@f1,f,c
  3926  000C38  2A2D               	incf	___ftadd@exp1,f,c
  3927  000C3A                     l1536:
  3928  000C3A  502C               	movf	___ftadd@exp2,w,c
  3929  000C3C  182D               	xorwf	___ftadd@exp1,w,c
  3930  000C3E  B4D8               	btfsc	status,2,c
  3931  000C40  D01F               	goto	l398
  3932  000C42  D7F6               	goto	l1534
  3933  000C44                     l1538:
  3934  000C44  502D               	movf	___ftadd@exp1,w,c
  3935  000C46  5C2C               	subwf	___ftadd@exp2,w,c
  3936  000C48  B0D8               	btfsc	status,0,c
  3937  000C4A  D01A               	goto	l398
  3938  000C4C                     l1540:
  3939  000C4C  90D8               	bcf	status,0,c
  3940  000C4E  3622               	rlcf	___ftadd@f1,f,c
  3941  000C50  3623               	rlcf	___ftadd@f1+1,f,c
  3942  000C52  3624               	rlcf	___ftadd@f1+2,f,c
  3943  000C54  062D               	decf	___ftadd@exp1,f,c
  3944  000C56  502D               	movf	___ftadd@exp1,w,c
  3945  000C58  182C               	xorwf	___ftadd@exp2,w,c
  3946  000C5A  B4D8               	btfsc	status,2,c
  3947  000C5C  D00D               	goto	l1548
  3948  000C5E  062B               	decf	___ftadd@sign,f,c
  3949  000C60  C02B  F028         	movff	___ftadd@sign,??___ftadd
  3950  000C64  0E07               	movlw	7
  3951  000C66  1628               	andwf	??___ftadd,f,c
  3952  000C68  B4D8               	btfsc	status,2,c
  3953  000C6A  D006               	goto	l1548
  3954  000C6C  D7EF               	goto	l1540
  3955  000C6E                     l1546:
  3956  000C6E  90D8               	bcf	status,0,c
  3957  000C70  3227               	rrcf	___ftadd@f2+2,f,c
  3958  000C72  3226               	rrcf	___ftadd@f2+1,f,c
  3959  000C74  3225               	rrcf	___ftadd@f2,f,c
  3960  000C76  2A2C               	incf	___ftadd@exp2,f,c
  3961  000C78                     l1548:
  3962  000C78  502C               	movf	___ftadd@exp2,w,c
  3963  000C7A  182D               	xorwf	___ftadd@exp1,w,c
  3964  000C7C  A4D8               	btfss	status,2,c
  3965  000C7E  D7F7               	goto	l1546
  3966  000C80                     l398:
  3967  000C80  AE2B               	btfss	___ftadd@sign,7,c
  3968  000C82  D00C               	goto	l407
  3969  000C84  0EFF               	movlw	255
  3970  000C86  1A22               	xorwf	___ftadd@f1,f,c
  3971  000C88  0EFF               	movlw	255
  3972  000C8A  1A23               	xorwf	___ftadd@f1+1,f,c
  3973  000C8C  0EFF               	movlw	255
  3974  000C8E  1A24               	xorwf	___ftadd@f1+2,f,c
  3975  000C90  0E01               	movlw	1
  3976  000C92  2622               	addwf	___ftadd@f1,f,c
  3977  000C94  0E00               	movlw	0
  3978  000C96  2223               	addwfc	___ftadd@f1+1,f,c
  3979  000C98  0E00               	movlw	0
  3980  000C9A  2224               	addwfc	___ftadd@f1+2,f,c
  3981  000C9C                     l407:
  3982  000C9C  AC2B               	btfss	___ftadd@sign,6,c
  3983  000C9E  D00C               	goto	l1554
  3984  000CA0  0EFF               	movlw	255
  3985  000CA2  1A25               	xorwf	___ftadd@f2,f,c
  3986  000CA4  0EFF               	movlw	255
  3987  000CA6  1A26               	xorwf	___ftadd@f2+1,f,c
  3988  000CA8  0EFF               	movlw	255
  3989  000CAA  1A27               	xorwf	___ftadd@f2+2,f,c
  3990  000CAC  0E01               	movlw	1
  3991  000CAE  2625               	addwf	___ftadd@f2,f,c
  3992  000CB0  0E00               	movlw	0
  3993  000CB2  2226               	addwfc	___ftadd@f2+1,f,c
  3994  000CB4  0E00               	movlw	0
  3995  000CB6  2227               	addwfc	___ftadd@f2+2,f,c
  3996  000CB8                     l1554:
  3997  000CB8  0E00               	movlw	0
  3998  000CBA  6E2B               	movwf	___ftadd@sign,c
  3999  000CBC  5022               	movf	___ftadd@f1,w,c
  4000  000CBE  2625               	addwf	___ftadd@f2,f,c
  4001  000CC0  5023               	movf	___ftadd@f1+1,w,c
  4002  000CC2  2226               	addwfc	___ftadd@f2+1,f,c
  4003  000CC4  5024               	movf	___ftadd@f1+2,w,c
  4004  000CC6  2227               	addwfc	___ftadd@f2+2,f,c
  4005  000CC8  AE27               	btfss	___ftadd@f2+2,7,c
  4006  000CCA  D00E               	goto	l1564
  4007  000CCC  0EFF               	movlw	255
  4008  000CCE  1A25               	xorwf	___ftadd@f2,f,c
  4009  000CD0  0EFF               	movlw	255
  4010  000CD2  1A26               	xorwf	___ftadd@f2+1,f,c
  4011  000CD4  0EFF               	movlw	255
  4012  000CD6  1A27               	xorwf	___ftadd@f2+2,f,c
  4013  000CD8  0E01               	movlw	1
  4014  000CDA  2625               	addwf	___ftadd@f2,f,c
  4015  000CDC  0E00               	movlw	0
  4016  000CDE  2226               	addwfc	___ftadd@f2+1,f,c
  4017  000CE0  0E00               	movlw	0
  4018  000CE2  2227               	addwfc	___ftadd@f2+2,f,c
  4019  000CE4  0E01               	movlw	1
  4020  000CE6  6E2B               	movwf	___ftadd@sign,c
  4021  000CE8                     l1564:
  4022  000CE8  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  4023  000CEC  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4024  000CF0  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4025  000CF4  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  4026  000CF8  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  4027  000CFC  ECDB  F008         	call	___ftpack	;wreg free
  4028  000D00  C001  F022         	movff	?___ftpack,?___ftadd
  4029  000D04  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  4030  000D08  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  4031  000D0C  0012               	return	
  4032  000D0E                     __end_of___ftadd:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           postdec1	equ	0xFE5
  4043                           plusw1	equ	0xFE3
  4044                           fsr1l	equ	0xFE1
  4045                           indf2	equ	0xFDF
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           plusw2	equ	0xFDB
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function ___altoft *****************
  4054 ;; Defined at:
  4055 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  c               4    8[COMRAM] long 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  sign            1   17[COMRAM] unsigned char 
  4060 ;;  exp             1   16[COMRAM] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  3    8[COMRAM] float 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4070 ;;      Params:         4       0       0       0       0       0       0       0       0
  4071 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4072 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4073 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4074 ;;Total ram usage:       10 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    1
  4077 ;; This function calls:
  4078 ;;		___ftpack
  4079 ;; This function is called by:
  4080 ;;		_USART_Init
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text26
  4085  0014A8                     __ptext26:
  4086                           	opt stack 0
  4087  0014A8                     ___altoft:
  4088                           	opt stack 28
  4089                           
  4090                           ;incstack = 0
  4091  0014A8  0E00               	movlw	0
  4092  0014AA  6E12               	movwf	___altoft@sign,c
  4093  0014AC  0E8E               	movlw	142
  4094  0014AE  6E11               	movwf	___altoft@exp,c
  4095  0014B0  AE0C               	btfss	___altoft@c+3,7,c
  4096  0014B2  D011               	goto	l2000
  4097  0014B4  1E0C               	comf	___altoft@c+3,f,c
  4098  0014B6  1E0B               	comf	___altoft@c+2,f,c
  4099  0014B8  1E0A               	comf	___altoft@c+1,f,c
  4100  0014BA  6C09               	negf	___altoft@c,c
  4101  0014BC  0E00               	movlw	0
  4102  0014BE  220A               	addwfc	___altoft@c+1,f,c
  4103  0014C0  220B               	addwfc	___altoft@c+2,f,c
  4104  0014C2  220C               	addwfc	___altoft@c+3,f,c
  4105  0014C4  0E01               	movlw	1
  4106  0014C6  6E12               	movwf	___altoft@sign,c
  4107  0014C8  D006               	goto	l2000
  4108  0014CA                     l1998:
  4109  0014CA  90D8               	bcf	status,0,c
  4110  0014CC  320C               	rrcf	___altoft@c+3,f,c
  4111  0014CE  320B               	rrcf	___altoft@c+2,f,c
  4112  0014D0  320A               	rrcf	___altoft@c+1,f,c
  4113  0014D2  3209               	rrcf	___altoft@c,f,c
  4114  0014D4  2A11               	incf	___altoft@exp,f,c
  4115  0014D6                     l2000:
  4116  0014D6  0E00               	movlw	0
  4117  0014D8  1409               	andwf	___altoft@c,w,c
  4118  0014DA  6E0D               	movwf	??___altoft& (0+255),c
  4119  0014DC  0E00               	movlw	0
  4120  0014DE  140A               	andwf	___altoft@c+1,w,c
  4121  0014E0  6E0E               	movwf	(??___altoft+1)& (0+255),c
  4122  0014E2  0E00               	movlw	0
  4123  0014E4  140B               	andwf	___altoft@c+2,w,c
  4124  0014E6  6E0F               	movwf	(??___altoft+2)& (0+255),c
  4125  0014E8  0EFF               	movlw	255
  4126  0014EA  140C               	andwf	___altoft@c+3,w,c
  4127  0014EC  6E10               	movwf	(??___altoft+3)& (0+255),c
  4128  0014EE  500D               	movf	??___altoft,w,c
  4129  0014F0  100E               	iorwf	??___altoft+1,w,c
  4130  0014F2  100F               	iorwf	??___altoft+2,w,c
  4131  0014F4  1010               	iorwf	??___altoft+3,w,c
  4132  0014F6  A4D8               	btfss	status,2,c
  4133  0014F8  D7E8               	goto	l1998
  4134  0014FA  C009  F001         	movff	___altoft@c,___ftpack@arg
  4135  0014FE  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  4136  001502  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  4137  001506  C011  F004         	movff	___altoft@exp,___ftpack@exp
  4138  00150A  C012  F005         	movff	___altoft@sign,___ftpack@sign
  4139  00150E  ECDB  F008         	call	___ftpack	;wreg free
  4140  001512  C001  F009         	movff	?___ftpack,?___altoft
  4141  001516  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  4142  00151A  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  4143  00151E  0012               	return	
  4144  001520                     __end_of___altoft:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           postdec1	equ	0xFE5
  4155                           plusw1	equ	0xFE3
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           plusw2	equ	0xFDB
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function ___ftpack *****************
  4166 ;; Defined at:
  4167 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  arg             3    0[COMRAM] unsigned um
  4170 ;;  exp             1    3[COMRAM] unsigned char 
  4171 ;;  sign            1    4[COMRAM] unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  3    0[COMRAM] float 
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, status,0
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4183 ;;      Params:         5       0       0       0       0       0       0       0       0
  4184 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4185 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4186 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4187 ;;Total ram usage:        8 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		___altoft
  4193 ;;		___ftadd
  4194 ;;		___ftdiv
  4195 ;;		___ftmul
  4196 ;;		___lltoft
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text27
  4201  0011B6                     __ptext27:
  4202                           	opt stack 0
  4203  0011B6                     ___ftpack:
  4204                           	opt stack 27
  4205                           
  4206                           ;incstack = 0
  4207  0011B6  5004               	movf	___ftpack@exp,w,c
  4208  0011B8  B4D8               	btfsc	status,2,c
  4209  0011BA  D005               	goto	l1448
  4210  0011BC  5001               	movf	___ftpack@arg,w,c
  4211  0011BE  1002               	iorwf	___ftpack@arg+1,w,c
  4212  0011C0  1003               	iorwf	___ftpack@arg+2,w,c
  4213  0011C2  A4D8               	btfss	status,2,c
  4214  0011C4  D00C               	goto	l1454
  4215  0011C6                     l1448:
  4216  0011C6  0E00               	movlw	0
  4217  0011C8  6E01               	movwf	?___ftpack,c
  4218  0011CA  0E00               	movlw	0
  4219  0011CC  6E02               	movwf	?___ftpack+1,c
  4220  0011CE  0E00               	movlw	0
  4221  0011D0  6E03               	movwf	?___ftpack+2,c
  4222  0011D2  0012               	return	
  4223  0011D4                     l1452:
  4224  0011D4  2A04               	incf	___ftpack@exp,f,c
  4225  0011D6  90D8               	bcf	status,0,c
  4226  0011D8  3203               	rrcf	___ftpack@arg+2,f,c
  4227  0011DA  3202               	rrcf	___ftpack@arg+1,f,c
  4228  0011DC  3201               	rrcf	___ftpack@arg,f,c
  4229  0011DE                     l1454:
  4230  0011DE  0E00               	movlw	0
  4231  0011E0  1401               	andwf	___ftpack@arg,w,c
  4232  0011E2  6E06               	movwf	??___ftpack& (0+255),c
  4233  0011E4  0E00               	movlw	0
  4234  0011E6  1402               	andwf	___ftpack@arg+1,w,c
  4235  0011E8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4236  0011EA  0EFE               	movlw	254
  4237  0011EC  1403               	andwf	___ftpack@arg+2,w,c
  4238  0011EE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4239  0011F0  5006               	movf	??___ftpack,w,c
  4240  0011F2  1007               	iorwf	??___ftpack+1,w,c
  4241  0011F4  1008               	iorwf	??___ftpack+2,w,c
  4242  0011F6  B4D8               	btfsc	status,2,c
  4243  0011F8  D00C               	goto	l1460
  4244  0011FA  D7EC               	goto	l1452
  4245  0011FC                     l1456:
  4246  0011FC  2A04               	incf	___ftpack@exp,f,c
  4247  0011FE  0E01               	movlw	1
  4248  001200  2601               	addwf	___ftpack@arg,f,c
  4249  001202  0E00               	movlw	0
  4250  001204  2202               	addwfc	___ftpack@arg+1,f,c
  4251  001206  0E00               	movlw	0
  4252  001208  2203               	addwfc	___ftpack@arg+2,f,c
  4253  00120A  90D8               	bcf	status,0,c
  4254  00120C  3203               	rrcf	___ftpack@arg+2,f,c
  4255  00120E  3202               	rrcf	___ftpack@arg+1,f,c
  4256  001210  3201               	rrcf	___ftpack@arg,f,c
  4257  001212                     l1460:
  4258  001212  0E00               	movlw	0
  4259  001214  1401               	andwf	___ftpack@arg,w,c
  4260  001216  6E06               	movwf	??___ftpack& (0+255),c
  4261  001218  0E00               	movlw	0
  4262  00121A  1402               	andwf	___ftpack@arg+1,w,c
  4263  00121C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4264  00121E  0EFF               	movlw	255
  4265  001220  1403               	andwf	___ftpack@arg+2,w,c
  4266  001222  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4267  001224  5006               	movf	??___ftpack,w,c
  4268  001226  1007               	iorwf	??___ftpack+1,w,c
  4269  001228  1008               	iorwf	??___ftpack+2,w,c
  4270  00122A  B4D8               	btfsc	status,2,c
  4271  00122C  D006               	goto	l1464
  4272  00122E  D7E6               	goto	l1456
  4273  001230                     l1462:
  4274  001230  0604               	decf	___ftpack@exp,f,c
  4275  001232  90D8               	bcf	status,0,c
  4276  001234  3601               	rlcf	___ftpack@arg,f,c
  4277  001236  3602               	rlcf	___ftpack@arg+1,f,c
  4278  001238  3603               	rlcf	___ftpack@arg+2,f,c
  4279  00123A                     l1464:
  4280  00123A  BE02               	btfsc	___ftpack@arg+1,7,c
  4281  00123C  D003               	goto	l360
  4282  00123E  0E02               	movlw	2
  4283  001240  6004               	cpfslt	___ftpack@exp,c
  4284  001242  D7F6               	goto	l1462
  4285  001244                     l360:
  4286  001244  A004               	btfss	___ftpack@exp,0,c
  4287  001246  9E02               	bcf	___ftpack@arg+1,7,c
  4288  001248  90D8               	bcf	status,0,c
  4289  00124A  3204               	rrcf	___ftpack@exp,f,c
  4290  00124C  5004               	movf	___ftpack@exp,w,c
  4291  00124E  1203               	iorwf	___ftpack@arg+2,f,c
  4292  001250  5005               	movf	___ftpack@sign,w,c
  4293  001252  A4D8               	btfss	status,2,c
  4294  001254  8E03               	bsf	___ftpack@arg+2,7,c
  4295  001256  C001  F001         	movff	___ftpack@arg,?___ftpack
  4296  00125A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4297  00125E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4298  001262  0012               	return	
  4299  001264                     __end_of___ftpack:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec1	equ	0xFE5
  4310                           plusw1	equ	0xFE3
  4311                           fsr1l	equ	0xFE1
  4312                           indf2	equ	0xFDF
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           plusw2	equ	0xFDB
  4316                           fsr2h	equ	0xFDA
  4317                           fsr2l	equ	0xFD9
  4318                           status	equ	0xFD8
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           postdec1	equ	0xFE5
  4328                           plusw1	equ	0xFE3
  4329                           fsr1l	equ	0xFE1
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           plusw2	equ	0xFDB
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338                           	psect	rparam
  4339  0000                     tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           postinc0	equ	0xFEE
  4346                           wreg	equ	0xFE8
  4347                           postdec1	equ	0xFE5
  4348                           plusw1	equ	0xFE3
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           postinc2	equ	0xFDE
  4352                           postdec2	equ	0xFDD
  4353                           plusw2	equ	0xFDB
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    40
    Data        5
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      83
    BANK0           160      0      17
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(2) Largest target is 2
		 -> USART_Write_Float@status(COMRAM[2]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 8
		 -> USART_Write_Integer@buf(COMRAM[8]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 8
		 -> USART_Write_Integer@buf(COMRAM[8]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 8
		 -> USART_Write_Integer@buf(COMRAM[8]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 8
		 -> USART_Write_Integer@buf(COMRAM[8]), 

    ftoa@cp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    USART_Write_Float@buf1	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 8
		 -> USART_Write_Integer@buf(COMRAM[8]), 

    USART_Write_Text@text	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), USART_Write_Integer@buf(COMRAM[8]), main@my_char(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_USART_Write_Float
    _delay_ms->_delay_us
    _delay_us->___aldiv
    _USART_Write_Integer->_USART_Write_Text
    _itoa->_utoa
    _utoa->___lwdiv
    _USART_Write_Float->_ftoa
    _ftoa->___ftsub
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftmul->___ftpack
    _USART_Write_Text->_itoa
    _USART_Init->___ftadd
    ___fttol->___ftmul
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   23921
                                             73 COMRAM     5     5      0
                         _USART_Init
                        _USART_Write
                  _USART_Write_Float
                _USART_Write_Integer
                   _USART_Write_Text
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2     838
                                             17 COMRAM     3     1      2
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             3     1      2     537
                                             14 COMRAM     3     1      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     428
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _USART_Write_Integer                                 10     8      2    1990
                                             28 COMRAM    10     8      2
                   _USART_Write_Text
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 8     2      6    1570
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     3      6    1199
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _USART_Write_Float                                    7     4      3   11952
                                             66 COMRAM     7     4      3
                   _USART_Write_Text
                               _ftoa
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                15    10      5   11517
                                             51 COMRAM    15    10      5
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             37    25     12    2099
                                             22 COMRAM    28    16     12
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3604
                                             45 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2665
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _USART_Write_Text                                     4     2      2     304
                                             24 COMRAM     4     2      2
                        _USART_Write
                               _itoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _USART_Write                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4    8790
                                             45 COMRAM     7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             23 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2619
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3307
                                             33 COMRAM    12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2311
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
   _USART_Write
   _USART_Write_Float
     _USART_Write_Text
       _USART_Write
       _itoa (ARG)
         _utoa
           ___lwdiv
           ___lwmod
     _ftoa
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
   _USART_Write_Integer
     _USART_Write_Text
       _USART_Write
       _itoa (ARG)
         _utoa
           ___lwdiv
           ___lwmod
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _USART_Write_Text
     _USART_Write
     _itoa (ARG)
       _utoa
         ___lwdiv
         ___lwmod
   _delay_ms
     _delay_us
       ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      11       5       10.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      53       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      20        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Sep 07 20:54:27 2018

                ___altoft@exp 0011                             l3 17BE                 ___altoft@sign 0012  
                          l65 187C                   __CFG_BOR$ON 000000           ___wmul@multiplicand 0003  
                 __CFG_BORV$3 000000                  ___ftadd@exp1 002D                  ___ftadd@exp2 002C  
                ___ftadd@sign 002B    __size_of_USART_Write_Float 002E                           l116 0986  
                         l407 0C9C                           l360 1244                           l440 184E  
                         l512 141C                           l418 10B8                           l522 1574  
                         l383 0BA6                           l387 0BD0                           l565 162A  
                         l398 0C80                           l486 1388                           l575 16B6  
                         wreg 000FE8                  __CFG_LVP$OFF 000000                  ___ftdiv@cntr 001C  
                ___ftdiv@sign 0021                  __CFG_WDT$OFF 000000                          l2000 14D6  
                        l2012 102C                          l2018 1054                          l2052 1814  
                        l2038 1092                          l2054 1818                          l1512 0BDE  
                        l2080 1296                          l1506 0BB4                          l1602 1566  
                        l1460 1212                          l1452 11D4                          l1540 0C4C  
                        l1612 15F8                          l1462 1230                          l1454 11DE  
                        l1534 0C30                          l1614 1600                          l1464 123A  
                        l1456 11FC                          l1448 11C6                          l1536 0C3A  
                        l1528 0C0E                          l1720 0A1E                          l1624 1620  
                        l1616 1604                          l1640 16AC                          l1632 168C  
                        l1554 0CB8                          l1546 0C6E                          l1538 0C44  
                        l1706 09E2                          l1650 0840                          l1634 1694  
                        l1564 0CE8                          l1548 0C78                          l1812 0E6C  
                        l1732 0A7E                          l1724 0A3A                          l1708 09E6  
                        l1636 1698                          l1902 0FF2                          l1830 0EAE  
                        l1806 0E44                          l1574 13CE                          l1742 0AA6  
                        l1734 0A86                          l1662 0882                          l1670 08DE  
                        l1750 0B3C                          l1840 0ED6                          l1576 13DA  
                        l1488 1872                          l1728 0A5A                          l1752 0B54  
                        l1680 0934                          l1656 085A                          l1826 0E9E  
                        l1586 140E                          l1578 13DE                          l1594 1532  
                        l1690 095E                          l1682 094A                          l1770 111E  
                        l1836 0EC6                          l1852 16D6                          l1940 1598  
                        l1596 153E                          l1748 0B2C                          l1684 0954  
                        l1676 08FE                          l1908 1310                          l1780 1150  
                        l1764 1106                          l1950 1740                          l1598 1542  
                        l1686 0958                          l1918 134A                          l1696 09A6  
                        l1776 1140                          l1792 118E                          l1866 0F3C  
                        l1954 1756                          l1938 158C                          l1778 114C  
                        l1884 0FA2                          l1964 1658                          l1796 11A4  
                        l1788 1180                          l1894 0FCA                          l1896 0FD6  
                        l1888 0FB2                          l1898 0FDC                          l1978 0D46  
                        l1998 14CA                          STR_1 0829                          _CREN 007D5C  
                        u1131 0B72                          u1141 0B86                          u2021 126E  
                        u1711 0E2C                          u1810 0F5A                          u1731 0E54  
                        u1815 0F52                          u1791 0F20                          u1961 1014  
                        u1981 103C                          _RCIF 007CF5                          _TXIF 007CF4  
                __CFG_PWRT$ON 000000                  __CFG_WRTC$ON 000000                          _main 1264  
                 main@my_char 004A                          _ftoa 0D0E                  ___ftpack@arg 0001  
                        _itoa 1634                  ___ftpack@exp 0004                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        _utoa 1308                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 0016                  ___param_bank 000010                  ___ftmul@sign 0017  
                ___fttol@exp1 0026                  ___fttol@lval 0022                 __CFG_PLLDIV$4 000000  
              __CFG_CCP2MX$ON 000000               __end_of___aldiv 11B6                         ?_main 0001  
                       ?_ftoa 0034                         ?_itoa 0011               __end_of___ftadd 0D0E  
             __end_of___ftdiv 10EA               __end_of___ftneg 185C               __end_of___lldiv 142E  
                       ?_utoa 0008               __end_of___ftmul 0F10               __end_of___llmod 1586  
             __end_of___ftsub 1700               __end_of___fttol 1004                __CFG_DEBUG$OFF 000000  
             __end_of___lwdiv 1634  __size_of_USART_Write_Integer 002A               __end_of___lwmod 16C0  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _SPBRG 000FAF  
                       _TXREG 000FAD                         _TXSTA 000FAC                  ___lltoft@exp 0011  
               __CFG_WRTD$OFF 000000               __end_of_dpowers 0829               __end_of_isdigit 187A  
               ___ftpack@sign 0005                         ftoa@f 0034                         ftoa@l 003D  
                       tablat 000FF5                         plusw1 000FE3                         plusw2 000FDB  
                       utoa@c 0010                         utoa@v 000E                         status 000FD8  
             __end_of_sprintf 0B62                   ?_USART_Init 002E               __initialization 1700  
                __end_of_main 1308                  __end_of_ftoa 0E1C                  __end_of_itoa 167E  
                __end_of_utoa 13AC      __end_of_USART_Write_Text 176A                        ??_main 004A  
                      ??_ftoa 0039                 ___fttol@sign1 0021                        ??_itoa 0017  
                      ??_utoa 000E                 __activetblptr 000002              __end_of___altoft 1520  
            ___llmod@dividend 000E              __end_of___ftpack 1264              __end_of___lltoft 15E2  
              __CFG_WDTPS$128 000000                __CFG_VREGEN$ON 000000              __end_of_delay_ms 1838  
            __end_of_delay_us 17C4                     ??___aldiv 0009                        ___wmul 17EE  
                   ??___ftadd 0028                     ??___ftdiv 0019                     ??___ftneg 0004  
                   ??___lldiv 0009                     ??___ftmul 000F                     ??___llmod 0016  
                   ??___ftsub 0034                     ??___fttol 001C                     ??___lwdiv 0005  
                   ??___lwmod 0005                        clear_0 1726                        ftoa@cp 0041  
       ___ftmul@f3_as_product 0013                        itoa@cp 0017                  __pdataCOMRAM 004F  
                   ??_isdigit 0001                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8           __size_of_USART_Init 007A  
                   ??_sprintf 0023                    __accesstop 0060       __end_of__initialization 172C  
                  ___altoft@c 0009               __CFG_PBADEN$OFF 000000                    ___ftadd@f1 0022  
                  ___ftadd@f2 0025                 ___rparam_used 000001                    ___ftdiv@f1 0013  
                  ___ftdiv@f2 0016                    ___ftdiv@f3 001D                    ___ftneg@f1 0001  
                ?_USART_Write 0001                    ___ftmul@f1 0009                    ___ftmul@f2 000C  
                  ___ftsub@f1 002E                    ___ftsub@f2 0031                    ___fttol@f1 0018  
              __pcstackCOMRAM 0001                    ___lltoft@c 0009                  sprintf@width 002E  
                  __pbssBANK0 0060           _USART_Write_Integer 17C4                       ?___wmul 0001  
                   ?___altoft 0009                     ?___ftpack 0001                     ?___lltoft 0009  
        ?_USART_Write_Integer 001D                     ?_delay_ms 0012                     ?_delay_us 000F  
                ??_USART_Init 0032                       __Hparam 0000                       __Lparam 0000  
                     ___aldiv 10EA                       ___ftadd 0B62                       ___ftdiv 1004  
                     ___ftneg 1838                       ___lldiv 13AC               __size_of___wmul 0026  
                     ___ftmul 0E1C                       ___llmod 1520                       ___ftsub 16C0  
                     ___fttol 0F10                       ___lwdiv 15E2                       ___lwmod 167E  
                __psmallconst 0800                    ??___altoft 000D               __CFG_STVREN$OFF 000000  
                     __pcinit 1700                    ??___ftpack 0006                       __ramtop 0800  
                  ??___lltoft 000D                       __ptext0 1264                       __ptext1 1814  
                     __ptext2 1798                       __ptext3 10EA                       __ptext4 17C4  
                     __ptext5 1634                       __ptext6 1308                       __ptext7 167E  
                     __ptext8 15E2                       __ptext9 176A         ??_USART_Write_Integer 001F  
           ?_USART_Write_Text 0019                USART_Init@temp 0032                       _dpowers 0801  
                     _isdigit 185C            ??_USART_Write_Text 001B              ___aldiv@dividend 0001  
                  ??_delay_ms 0014                    ??_delay_us 0011            __end_of_USART_Init 14A8  
                     _sprintf 0836                    delay_ms@ms 0012          end_of_initialization 172C  
                     ftoa@buf 0060                       ftoa@rem 0039                    delay_us@us 0011  
                     itoa@buf 0011                       itoa@val 0013                 __Lmediumconst 0000  
      USART_Write_Integer@buf 001F        USART_Write_Integer@num 001D               ___lldiv@divisor 0005  
             ___lldiv@counter 000D                     _RCSTAbits 000FAB              ___aldiv@quotient 000B  
                     postdec1 000FE5                       postdec2 000FDD          __size_of_USART_Write 000C  
                     postinc0 000FEE                       postinc2 000FDE                       utoa@buf 0008  
                     utoa@val 000A                USART_Write@out 0001                     _TRISCbits 000F94  
         USART_Init@baud_rate 002E                   ___ftdiv@exp 0020                   ___ftmul@exp 0012  
              __end_of___wmul 1814                 __pidataCOMRAM 1886           start_initialization 1700  
                  ftoa@status 0037               ___llmod@divisor 0012               ___llmod@counter 0016  
                    ??___wmul 0005              __CFG_LPT1OSC$OFF 000000             __size_of___altoft 0078  
           __size_of___ftpack 00AE             __size_of___lltoft 005C             __size_of_delay_ms 0024  
           __size_of_delay_us 002C                   sprintf@flag 0027                   sprintf@prec 0030  
            ___lwdiv@dividend 0001                      ?___aldiv 0001                      ?___ftadd 0022  
                    ?___ftdiv 0013                      ?___ftneg 0001                      ?___lldiv 0001  
                    ?___ftmul 0009         USART_Write_Float@buf1 0048                      ?___llmod 000E  
                    ?___ftsub 002E                      ?___fttol 0018                      ?___lwdiv 0001  
                    ?___lwmod 0001                   __smallconst 0800                      ?_isdigit 0001  
            ___lwdiv@quotient 0005                      ?_sprintf 0017       USART_Write_Float@status 0046  
             ___aldiv@divisor 0005     __size_of_USART_Write_Text 0034               ___aldiv@counter 0009  
              ___wmul@product 0005                     delay_ms@i 0014                     delay_us@x 000F  
 __end_of_USART_Write_Integer 17EE                     main@F4434 004F             ___wmul@multiplier 0001  
                   copy_data0 1714                 ??_USART_Write 0001                      __Hrparam 0000  
                    __Lrparam 0000              __size_of___aldiv 00CC              __size_of___ftadd 01AC  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024              __size_of___lldiv 0082  
                    ___altoft 14A8              __size_of___ftmul 00F4              __size_of___llmod 0066  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                      ___ftpack 11B6                      ___lltoft 1586  
                 _isdigit$456 0002                    sprintf@val 002A             _USART_Write_Float 176A  
            __size_of_isdigit 001E                      _delay_ms 1814                      _delay_us 1798  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 0D0E  
                    __ptext11 0836                      __ptext20 1736                      __ptext12 185C  
                    __ptext21 187A                      __ptext13 17EE                      __ptext22 142E  
                    __ptext14 1520                      __ptext23 0F10                      __ptext15 13AC  
                    __ptext24 1004                      __ptext16 1586                      __ptext25 0B62  
                    __ptext17 16C0                      __ptext26 14A8                      __ptext18 1838  
                    __ptext27 11B6                      __ptext19 0E1C            ?_USART_Write_Float 0043  
        USART_Write_Float@num 0043              __size_of_sprintf 032C           ??_USART_Write_Float 0046  
               __size_of_main 00A4                 __size_of_ftoa 010E                 __size_of_itoa 004A  
               __size_of_utoa 00A4           __end_of_USART_Write 1886         __CFG_CPUDIV$OSC1_PLL2 000000  
   __end_of_USART_Write_Float 1798          USART_Write_Text@text 0019                      itoa@base 0015  
                    isdigit@c 0003                     sprintf@ap 0028                     sprintf@sp 0017  
            _USART_Write_Text 1736              ___lwmod@dividend 0001              ___lldiv@dividend 0001  
                    utoa@base 000C                      sprintf@c 0032                      sprintf@f 0019  
            ___lldiv@quotient 0009               ___lwmod@divisor 0003               ___lwmod@counter 0005  
                ___aldiv@sign 000A            __CFG_FOSC$HSPLL_HS 000000             USART_Write_Text@i 001B  
                  _USART_Init 142E                   _USART_Write 187A  
