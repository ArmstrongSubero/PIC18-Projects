

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 10 19:15:03 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	text36,global,reloc=2,class=CODE,delta=1
    46                           	psect	text37,global,reloc=2,class=CODE,delta=1
    47                           	psect	text38,global,reloc=2,class=CODE,delta=1
    48                           	psect	text39,global,reloc=2,class=CODE,delta=1
    49                           	psect	text40,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	mediumconst
    54  007C76                     __pmediumconst:
    55                           	opt stack 0
    56  007C76  00                 	db	0
    57  007C77                     _dpowers:
    58                           	opt stack 0
    59  007C77  0001               	dw	1
    60  007C79  0000               	dw	0
    61  007C7B  000A               	dw	10
    62  007C7D  0000               	dw	0
    63  007C7F  0064               	dw	100
    64  007C81  0000               	dw	0
    65  007C83  03E8               	dw	1000
    66  007C85  0000               	dw	0
    67  007C87  2710               	dw	10000
    68  007C89  0000               	dw	0
    69  007C8B  86A0               	dw	34464
    70  007C8D  0001               	dw	1
    71  007C8F  4240               	dw	16960
    72  007C91  000F               	dw	15
    73  007C93  9680               	dw	38528
    74  007C95  0098               	dw	152
    75  007C97  E100               	dw	57600
    76  007C99  05F5               	dw	1525
    77  007C9B  CA00               	dw	51712
    78  007C9D  3B9A               	dw	15258
    79  007C9F                     __end_of_dpowers:
    80                           	opt stack 0
    81  007C9F                     _OledFont:
    82                           	opt stack 0
    83  007C9F  00                 	db	0
    84  007CA0  00                 	db	0
    85  007CA1  00                 	db	0
    86  007CA2  00                 	db	0
    87  007CA3  00                 	db	0
    88  007CA4  00                 	db	0
    89  007CA5  00                 	db	0
    90  007CA6  00                 	db	0
    91  007CA7  00                 	db	0
    92  007CA8  00                 	db	0
    93  007CA9  5F                 	db	95
    94  007CAA  00                 	db	0
    95  007CAB  00                 	db	0
    96  007CAC  00                 	db	0
    97  007CAD  00                 	db	0
    98  007CAE  00                 	db	0
    99  007CAF  00                 	db	0
   100  007CB0  00                 	db	0
   101  007CB1  07                 	db	7
   102  007CB2  00                 	db	0
   103  007CB3  07                 	db	7
   104  007CB4  00                 	db	0
   105  007CB5  00                 	db	0
   106  007CB6  00                 	db	0
   107  007CB7  00                 	db	0
   108  007CB8  14                 	db	20
   109  007CB9  7F                 	db	127
   110  007CBA  14                 	db	20
   111  007CBB  7F                 	db	127
   112  007CBC  14                 	db	20
   113  007CBD  00                 	db	0
   114  007CBE  00                 	db	0
   115  007CBF  00                 	db	0
   116  007CC0  24                 	db	36
   117  007CC1  2A                 	db	42
   118  007CC2  7F                 	db	127
   119  007CC3  2A                 	db	42
   120  007CC4  12                 	db	18
   121  007CC5  00                 	db	0
   122  007CC6  00                 	db	0
   123  007CC7  00                 	db	0
   124  007CC8  23                 	db	35
   125  007CC9  13                 	db	19
   126  007CCA  08                 	db	8
   127  007CCB  64                 	db	100
   128  007CCC  62                 	db	98
   129  007CCD  00                 	db	0
   130  007CCE  00                 	db	0
   131  007CCF  00                 	db	0
   132  007CD0  36                 	db	54
   133  007CD1  49                 	db	73
   134  007CD2  55                 	db	85
   135  007CD3  22                 	db	34
   136  007CD4  50                 	db	80
   137  007CD5  00                 	db	0
   138  007CD6  00                 	db	0
   139  007CD7  00                 	db	0
   140  007CD8  00                 	db	0
   141  007CD9  05                 	db	5
   142  007CDA  03                 	db	3
   143  007CDB  00                 	db	0
   144  007CDC  00                 	db	0
   145  007CDD  00                 	db	0
   146  007CDE  00                 	db	0
   147  007CDF  00                 	db	0
   148  007CE0  1C                 	db	28
   149  007CE1  22                 	db	34
   150  007CE2  41                 	db	65
   151  007CE3  00                 	db	0
   152  007CE4  00                 	db	0
   153  007CE5  00                 	db	0
   154  007CE6  00                 	db	0
   155  007CE7  00                 	db	0
   156  007CE8  41                 	db	65
   157  007CE9  22                 	db	34
   158  007CEA  1C                 	db	28
   159  007CEB  00                 	db	0
   160  007CEC  00                 	db	0
   161  007CED  00                 	db	0
   162  007CEE  00                 	db	0
   163  007CEF  00                 	db	0
   164  007CF0  08                 	db	8
   165  007CF1  2A                 	db	42
   166  007CF2  1C                 	db	28
   167  007CF3  2A                 	db	42
   168  007CF4  08                 	db	8
   169  007CF5  00                 	db	0
   170  007CF6  00                 	db	0
   171  007CF7  00                 	db	0
   172  007CF8  08                 	db	8
   173  007CF9  08                 	db	8
   174  007CFA  3E                 	db	62
   175  007CFB  08                 	db	8
   176  007CFC  08                 	db	8
   177  007CFD  00                 	db	0
   178  007CFE  00                 	db	0
   179  007CFF  00                 	db	0
   180  007D00  A0                 	db	160
   181  007D01  60                 	db	96
   182  007D02  00                 	db	0
   183  007D03  00                 	db	0
   184  007D04  00                 	db	0
   185  007D05  00                 	db	0
   186  007D06  00                 	db	0
   187  007D07  00                 	db	0
   188  007D08  08                 	db	8
   189  007D09  08                 	db	8
   190  007D0A  08                 	db	8
   191  007D0B  08                 	db	8
   192  007D0C  08                 	db	8
   193  007D0D  00                 	db	0
   194  007D0E  00                 	db	0
   195  007D0F  00                 	db	0
   196  007D10  60                 	db	96
   197  007D11  60                 	db	96
   198  007D12  00                 	db	0
   199  007D13  00                 	db	0
   200  007D14  00                 	db	0
   201  007D15  00                 	db	0
   202  007D16  00                 	db	0
   203  007D17  00                 	db	0
   204  007D18  20                 	db	32
   205  007D19  10                 	db	16
   206  007D1A  08                 	db	8
   207  007D1B  04                 	db	4
   208  007D1C  02                 	db	2
   209  007D1D  00                 	db	0
   210  007D1E  00                 	db	0
   211  007D1F  00                 	db	0
   212  007D20  3E                 	db	62
   213  007D21  51                 	db	81
   214  007D22  49                 	db	73
   215  007D23  45                 	db	69
   216  007D24  3E                 	db	62
   217  007D25  00                 	db	0
   218  007D26  00                 	db	0
   219  007D27  00                 	db	0
   220  007D28  00                 	db	0
   221  007D29  42                 	db	66
   222  007D2A  7F                 	db	127
   223  007D2B  40                 	db	64
   224  007D2C  00                 	db	0
   225  007D2D  00                 	db	0
   226  007D2E  00                 	db	0
   227  007D2F  00                 	db	0
   228  007D30  62                 	db	98
   229  007D31  51                 	db	81
   230  007D32  49                 	db	73
   231  007D33  49                 	db	73
   232  007D34  46                 	db	70
   233  007D35  00                 	db	0
   234  007D36  00                 	db	0
   235  007D37  00                 	db	0
   236  007D38  22                 	db	34
   237  007D39  41                 	db	65
   238  007D3A  49                 	db	73
   239  007D3B  49                 	db	73
   240  007D3C  36                 	db	54
   241  007D3D  00                 	db	0
   242  007D3E  00                 	db	0
   243  007D3F  00                 	db	0
   244  007D40  18                 	db	24
   245  007D41  14                 	db	20
   246  007D42  12                 	db	18
   247  007D43  7F                 	db	127
   248  007D44  10                 	db	16
   249  007D45  00                 	db	0
   250  007D46  00                 	db	0
   251  007D47  00                 	db	0
   252  007D48  27                 	db	39
   253  007D49  45                 	db	69
   254  007D4A  45                 	db	69
   255  007D4B  45                 	db	69
   256  007D4C  39                 	db	57
   257  007D4D  00                 	db	0
   258  007D4E  00                 	db	0
   259  007D4F  00                 	db	0
   260  007D50  3C                 	db	60
   261  007D51  4A                 	db	74
   262  007D52  49                 	db	73
   263  007D53  49                 	db	73
   264  007D54  30                 	db	48
   265  007D55  00                 	db	0
   266  007D56  00                 	db	0
   267  007D57  00                 	db	0
   268  007D58  01                 	db	1
   269  007D59  71                 	db	113
   270  007D5A  09                 	db	9
   271  007D5B  05                 	db	5
   272  007D5C  03                 	db	3
   273  007D5D  00                 	db	0
   274  007D5E  00                 	db	0
   275  007D5F  00                 	db	0
   276  007D60  36                 	db	54
   277  007D61  49                 	db	73
   278  007D62  49                 	db	73
   279  007D63  49                 	db	73
   280  007D64  36                 	db	54
   281  007D65  00                 	db	0
   282  007D66  00                 	db	0
   283  007D67  00                 	db	0
   284  007D68  06                 	db	6
   285  007D69  49                 	db	73
   286  007D6A  49                 	db	73
   287  007D6B  29                 	db	41
   288  007D6C  1E                 	db	30
   289  007D6D  00                 	db	0
   290  007D6E  00                 	db	0
   291  007D6F  00                 	db	0
   292  007D70  00                 	db	0
   293  007D71  36                 	db	54
   294  007D72  36                 	db	54
   295  007D73  00                 	db	0
   296  007D74  00                 	db	0
   297  007D75  00                 	db	0
   298  007D76  00                 	db	0
   299  007D77  00                 	db	0
   300  007D78  00                 	db	0
   301  007D79  AC                 	db	172
   302  007D7A  6C                 	db	108
   303  007D7B  00                 	db	0
   304  007D7C  00                 	db	0
   305  007D7D  00                 	db	0
   306  007D7E  00                 	db	0
   307  007D7F  00                 	db	0
   308  007D80  08                 	db	8
   309  007D81  14                 	db	20
   310  007D82  22                 	db	34
   311  007D83  41                 	db	65
   312  007D84  00                 	db	0
   313  007D85  00                 	db	0
   314  007D86  00                 	db	0
   315  007D87  00                 	db	0
   316  007D88  14                 	db	20
   317  007D89  14                 	db	20
   318  007D8A  14                 	db	20
   319  007D8B  14                 	db	20
   320  007D8C  14                 	db	20
   321  007D8D  00                 	db	0
   322  007D8E  00                 	db	0
   323  007D8F  00                 	db	0
   324  007D90  41                 	db	65
   325  007D91  22                 	db	34
   326  007D92  14                 	db	20
   327  007D93  08                 	db	8
   328  007D94  00                 	db	0
   329  007D95  00                 	db	0
   330  007D96  00                 	db	0
   331  007D97  00                 	db	0
   332  007D98  02                 	db	2
   333  007D99  01                 	db	1
   334  007D9A  51                 	db	81
   335  007D9B  09                 	db	9
   336  007D9C  06                 	db	6
   337  007D9D  00                 	db	0
   338  007D9E  00                 	db	0
   339  007D9F  00                 	db	0
   340  007DA0  32                 	db	50
   341  007DA1  49                 	db	73
   342  007DA2  79                 	db	121
   343  007DA3  41                 	db	65
   344  007DA4  3E                 	db	62
   345  007DA5  00                 	db	0
   346  007DA6  00                 	db	0
   347  007DA7  00                 	db	0
   348  007DA8  7E                 	db	126
   349  007DA9  09                 	db	9
   350  007DAA  09                 	db	9
   351  007DAB  09                 	db	9
   352  007DAC  7E                 	db	126
   353  007DAD  00                 	db	0
   354  007DAE  00                 	db	0
   355  007DAF  00                 	db	0
   356  007DB0  7F                 	db	127
   357  007DB1  49                 	db	73
   358  007DB2  49                 	db	73
   359  007DB3  49                 	db	73
   360  007DB4  36                 	db	54
   361  007DB5  00                 	db	0
   362  007DB6  00                 	db	0
   363  007DB7  00                 	db	0
   364  007DB8  3E                 	db	62
   365  007DB9  41                 	db	65
   366  007DBA  41                 	db	65
   367  007DBB  41                 	db	65
   368  007DBC  22                 	db	34
   369  007DBD  00                 	db	0
   370  007DBE  00                 	db	0
   371  007DBF  00                 	db	0
   372  007DC0  7F                 	db	127
   373  007DC1  41                 	db	65
   374  007DC2  41                 	db	65
   375  007DC3  22                 	db	34
   376  007DC4  1C                 	db	28
   377  007DC5  00                 	db	0
   378  007DC6  00                 	db	0
   379  007DC7  00                 	db	0
   380  007DC8  7F                 	db	127
   381  007DC9  49                 	db	73
   382  007DCA  49                 	db	73
   383  007DCB  49                 	db	73
   384  007DCC  41                 	db	65
   385  007DCD  00                 	db	0
   386  007DCE  00                 	db	0
   387  007DCF  00                 	db	0
   388  007DD0  7F                 	db	127
   389  007DD1  09                 	db	9
   390  007DD2  09                 	db	9
   391  007DD3  09                 	db	9
   392  007DD4  01                 	db	1
   393  007DD5  00                 	db	0
   394  007DD6  00                 	db	0
   395  007DD7  00                 	db	0
   396  007DD8  3E                 	db	62
   397  007DD9  41                 	db	65
   398  007DDA  41                 	db	65
   399  007DDB  51                 	db	81
   400  007DDC  72                 	db	114
   401  007DDD  00                 	db	0
   402  007DDE  00                 	db	0
   403  007DDF  00                 	db	0
   404  007DE0  7F                 	db	127
   405  007DE1  08                 	db	8
   406  007DE2  08                 	db	8
   407  007DE3  08                 	db	8
   408  007DE4  7F                 	db	127
   409  007DE5  00                 	db	0
   410  007DE6  00                 	db	0
   411  007DE7  00                 	db	0
   412  007DE8  41                 	db	65
   413  007DE9  7F                 	db	127
   414  007DEA  41                 	db	65
   415  007DEB  00                 	db	0
   416  007DEC  00                 	db	0
   417  007DED  00                 	db	0
   418  007DEE  00                 	db	0
   419  007DEF  00                 	db	0
   420  007DF0  20                 	db	32
   421  007DF1  40                 	db	64
   422  007DF2  41                 	db	65
   423  007DF3  3F                 	db	63
   424  007DF4  01                 	db	1
   425  007DF5  00                 	db	0
   426  007DF6  00                 	db	0
   427  007DF7  00                 	db	0
   428  007DF8  7F                 	db	127
   429  007DF9  08                 	db	8
   430  007DFA  14                 	db	20
   431  007DFB  22                 	db	34
   432  007DFC  41                 	db	65
   433  007DFD  00                 	db	0
   434  007DFE  00                 	db	0
   435  007DFF  00                 	db	0
   436  007E00  7F                 	db	127
   437  007E01  40                 	db	64
   438  007E02  40                 	db	64
   439  007E03  40                 	db	64
   440  007E04  40                 	db	64
   441  007E05  00                 	db	0
   442  007E06  00                 	db	0
   443  007E07  00                 	db	0
   444  007E08  7F                 	db	127
   445  007E09  02                 	db	2
   446  007E0A  0C                 	db	12
   447  007E0B  02                 	db	2
   448  007E0C  7F                 	db	127
   449  007E0D  00                 	db	0
   450  007E0E  00                 	db	0
   451  007E0F  00                 	db	0
   452  007E10  7F                 	db	127
   453  007E11  04                 	db	4
   454  007E12  08                 	db	8
   455  007E13  10                 	db	16
   456  007E14  7F                 	db	127
   457  007E15  00                 	db	0
   458  007E16  00                 	db	0
   459  007E17  00                 	db	0
   460  007E18  3E                 	db	62
   461  007E19  41                 	db	65
   462  007E1A  41                 	db	65
   463  007E1B  41                 	db	65
   464  007E1C  3E                 	db	62
   465  007E1D  00                 	db	0
   466  007E1E  00                 	db	0
   467  007E1F  00                 	db	0
   468  007E20  7F                 	db	127
   469  007E21  09                 	db	9
   470  007E22  09                 	db	9
   471  007E23  09                 	db	9
   472  007E24  06                 	db	6
   473  007E25  00                 	db	0
   474  007E26  00                 	db	0
   475  007E27  00                 	db	0
   476  007E28  3E                 	db	62
   477  007E29  41                 	db	65
   478  007E2A  51                 	db	81
   479  007E2B  21                 	db	33
   480  007E2C  5E                 	db	94
   481  007E2D  00                 	db	0
   482  007E2E  00                 	db	0
   483  007E2F  00                 	db	0
   484  007E30  7F                 	db	127
   485  007E31  09                 	db	9
   486  007E32  19                 	db	25
   487  007E33  29                 	db	41
   488  007E34  46                 	db	70
   489  007E35  00                 	db	0
   490  007E36  00                 	db	0
   491  007E37  00                 	db	0
   492  007E38  26                 	db	38
   493  007E39  49                 	db	73
   494  007E3A  49                 	db	73
   495  007E3B  49                 	db	73
   496  007E3C  32                 	db	50
   497  007E3D  00                 	db	0
   498  007E3E  00                 	db	0
   499  007E3F  00                 	db	0
   500  007E40  01                 	db	1
   501  007E41  01                 	db	1
   502  007E42  7F                 	db	127
   503  007E43  01                 	db	1
   504  007E44  01                 	db	1
   505  007E45  00                 	db	0
   506  007E46  00                 	db	0
   507  007E47  00                 	db	0
   508  007E48  3F                 	db	63
   509  007E49  40                 	db	64
   510  007E4A  40                 	db	64
   511  007E4B  40                 	db	64
   512  007E4C  3F                 	db	63
   513  007E4D  00                 	db	0
   514  007E4E  00                 	db	0
   515  007E4F  00                 	db	0
   516  007E50  1F                 	db	31
   517  007E51  20                 	db	32
   518  007E52  40                 	db	64
   519  007E53  20                 	db	32
   520  007E54  1F                 	db	31
   521  007E55  00                 	db	0
   522  007E56  00                 	db	0
   523  007E57  00                 	db	0
   524  007E58  3F                 	db	63
   525  007E59  40                 	db	64
   526  007E5A  38                 	db	56
   527  007E5B  40                 	db	64
   528  007E5C  3F                 	db	63
   529  007E5D  00                 	db	0
   530  007E5E  00                 	db	0
   531  007E5F  00                 	db	0
   532  007E60  63                 	db	99
   533  007E61  14                 	db	20
   534  007E62  08                 	db	8
   535  007E63  14                 	db	20
   536  007E64  63                 	db	99
   537  007E65  00                 	db	0
   538  007E66  00                 	db	0
   539  007E67  00                 	db	0
   540  007E68  03                 	db	3
   541  007E69  04                 	db	4
   542  007E6A  78                 	db	120
   543  007E6B  04                 	db	4
   544  007E6C  03                 	db	3
   545  007E6D  00                 	db	0
   546  007E6E  00                 	db	0
   547  007E6F  00                 	db	0
   548  007E70  61                 	db	97
   549  007E71  51                 	db	81
   550  007E72  49                 	db	73
   551  007E73  45                 	db	69
   552  007E74  43                 	db	67
   553  007E75  00                 	db	0
   554  007E76  00                 	db	0
   555  007E77  00                 	db	0
   556  007E78  7F                 	db	127
   557  007E79  41                 	db	65
   558  007E7A  41                 	db	65
   559  007E7B  00                 	db	0
   560  007E7C  00                 	db	0
   561  007E7D  00                 	db	0
   562  007E7E  00                 	db	0
   563  007E7F  00                 	db	0
   564  007E80  02                 	db	2
   565  007E81  04                 	db	4
   566  007E82  08                 	db	8
   567  007E83  10                 	db	16
   568  007E84  20                 	db	32
   569  007E85  00                 	db	0
   570  007E86  00                 	db	0
   571  007E87  00                 	db	0
   572  007E88  41                 	db	65
   573  007E89  41                 	db	65
   574  007E8A  7F                 	db	127
   575  007E8B  00                 	db	0
   576  007E8C  00                 	db	0
   577  007E8D  00                 	db	0
   578  007E8E  00                 	db	0
   579  007E8F  00                 	db	0
   580  007E90  04                 	db	4
   581  007E91  02                 	db	2
   582  007E92  01                 	db	1
   583  007E93  02                 	db	2
   584  007E94  04                 	db	4
   585  007E95  00                 	db	0
   586  007E96  00                 	db	0
   587  007E97  00                 	db	0
   588  007E98  80                 	db	128
   589  007E99  80                 	db	128
   590  007E9A  80                 	db	128
   591  007E9B  80                 	db	128
   592  007E9C  80                 	db	128
   593  007E9D  00                 	db	0
   594  007E9E  00                 	db	0
   595  007E9F  00                 	db	0
   596  007EA0  01                 	db	1
   597  007EA1  02                 	db	2
   598  007EA2  04                 	db	4
   599  007EA3  00                 	db	0
   600  007EA4  00                 	db	0
   601  007EA5  00                 	db	0
   602  007EA6  00                 	db	0
   603  007EA7  00                 	db	0
   604  007EA8  20                 	db	32
   605  007EA9  54                 	db	84
   606  007EAA  54                 	db	84
   607  007EAB  54                 	db	84
   608  007EAC  78                 	db	120
   609  007EAD  00                 	db	0
   610  007EAE  00                 	db	0
   611  007EAF  00                 	db	0
   612  007EB0  7F                 	db	127
   613  007EB1  48                 	db	72
   614  007EB2  44                 	db	68
   615  007EB3  44                 	db	68
   616  007EB4  38                 	db	56
   617  007EB5  00                 	db	0
   618  007EB6  00                 	db	0
   619  007EB7  00                 	db	0
   620  007EB8  38                 	db	56
   621  007EB9  44                 	db	68
   622  007EBA  44                 	db	68
   623  007EBB  28                 	db	40
   624  007EBC  00                 	db	0
   625  007EBD  00                 	db	0
   626  007EBE  00                 	db	0
   627  007EBF  00                 	db	0
   628  007EC0  38                 	db	56
   629  007EC1  44                 	db	68
   630  007EC2  44                 	db	68
   631  007EC3  48                 	db	72
   632  007EC4  7F                 	db	127
   633  007EC5  00                 	db	0
   634  007EC6  00                 	db	0
   635  007EC7  00                 	db	0
   636  007EC8  38                 	db	56
   637  007EC9  54                 	db	84
   638  007ECA  54                 	db	84
   639  007ECB  54                 	db	84
   640  007ECC  18                 	db	24
   641  007ECD  00                 	db	0
   642  007ECE  00                 	db	0
   643  007ECF  00                 	db	0
   644  007ED0  08                 	db	8
   645  007ED1  7E                 	db	126
   646  007ED2  09                 	db	9
   647  007ED3  02                 	db	2
   648  007ED4  00                 	db	0
   649  007ED5  00                 	db	0
   650  007ED6  00                 	db	0
   651  007ED7  00                 	db	0
   652  007ED8  18                 	db	24
   653  007ED9  A4                 	db	164
   654  007EDA  A4                 	db	164
   655  007EDB  A4                 	db	164
   656  007EDC  7C                 	db	124
   657  007EDD  00                 	db	0
   658  007EDE  00                 	db	0
   659  007EDF  00                 	db	0
   660  007EE0  7F                 	db	127
   661  007EE1  08                 	db	8
   662  007EE2  04                 	db	4
   663  007EE3  04                 	db	4
   664  007EE4  78                 	db	120
   665  007EE5  00                 	db	0
   666  007EE6  00                 	db	0
   667  007EE7  00                 	db	0
   668  007EE8  00                 	db	0
   669  007EE9  7D                 	db	125
   670  007EEA  00                 	db	0
   671  007EEB  00                 	db	0
   672  007EEC  00                 	db	0
   673  007EED  00                 	db	0
   674  007EEE  00                 	db	0
   675  007EEF  00                 	db	0
   676  007EF0  80                 	db	128
   677  007EF1  84                 	db	132
   678  007EF2  7D                 	db	125
   679  007EF3  00                 	db	0
   680  007EF4  00                 	db	0
   681  007EF5  00                 	db	0
   682  007EF6  00                 	db	0
   683  007EF7  00                 	db	0
   684  007EF8  7F                 	db	127
   685  007EF9  10                 	db	16
   686  007EFA  28                 	db	40
   687  007EFB  44                 	db	68
   688  007EFC  00                 	db	0
   689  007EFD  00                 	db	0
   690  007EFE  00                 	db	0
   691  007EFF  00                 	db	0
   692  007F00  41                 	db	65
   693  007F01  7F                 	db	127
   694  007F02  40                 	db	64
   695  007F03  00                 	db	0
   696  007F04  00                 	db	0
   697  007F05  00                 	db	0
   698  007F06  00                 	db	0
   699  007F07  00                 	db	0
   700  007F08  7C                 	db	124
   701  007F09  04                 	db	4
   702  007F0A  18                 	db	24
   703  007F0B  04                 	db	4
   704  007F0C  78                 	db	120
   705  007F0D  00                 	db	0
   706  007F0E  00                 	db	0
   707  007F0F  00                 	db	0
   708  007F10  7C                 	db	124
   709  007F11  08                 	db	8
   710  007F12  04                 	db	4
   711  007F13  7C                 	db	124
   712  007F14  00                 	db	0
   713  007F15  00                 	db	0
   714  007F16  00                 	db	0
   715  007F17  00                 	db	0
   716  007F18  38                 	db	56
   717  007F19  44                 	db	68
   718  007F1A  44                 	db	68
   719  007F1B  38                 	db	56
   720  007F1C  00                 	db	0
   721  007F1D  00                 	db	0
   722  007F1E  00                 	db	0
   723  007F1F  00                 	db	0
   724  007F20  FC                 	db	252
   725  007F21  24                 	db	36
   726  007F22  24                 	db	36
   727  007F23  18                 	db	24
   728  007F24  00                 	db	0
   729  007F25  00                 	db	0
   730  007F26  00                 	db	0
   731  007F27  00                 	db	0
   732  007F28  18                 	db	24
   733  007F29  24                 	db	36
   734  007F2A  24                 	db	36
   735  007F2B  FC                 	db	252
   736  007F2C  00                 	db	0
   737  007F2D  00                 	db	0
   738  007F2E  00                 	db	0
   739  007F2F  00                 	db	0
   740  007F30  00                 	db	0
   741  007F31  7C                 	db	124
   742  007F32  08                 	db	8
   743  007F33  04                 	db	4
   744  007F34  00                 	db	0
   745  007F35  00                 	db	0
   746  007F36  00                 	db	0
   747  007F37  00                 	db	0
   748  007F38  48                 	db	72
   749  007F39  54                 	db	84
   750  007F3A  54                 	db	84
   751  007F3B  24                 	db	36
   752  007F3C  00                 	db	0
   753  007F3D  00                 	db	0
   754  007F3E  00                 	db	0
   755  007F3F  00                 	db	0
   756  007F40  04                 	db	4
   757  007F41  7F                 	db	127
   758  007F42  44                 	db	68
   759  007F43  00                 	db	0
   760  007F44  00                 	db	0
   761  007F45  00                 	db	0
   762  007F46  00                 	db	0
   763  007F47  00                 	db	0
   764  007F48  3C                 	db	60
   765  007F49  40                 	db	64
   766  007F4A  40                 	db	64
   767  007F4B  7C                 	db	124
   768  007F4C  00                 	db	0
   769  007F4D  00                 	db	0
   770  007F4E  00                 	db	0
   771  007F4F  00                 	db	0
   772  007F50  1C                 	db	28
   773  007F51  20                 	db	32
   774  007F52  40                 	db	64
   775  007F53  20                 	db	32
   776  007F54  1C                 	db	28
   777  007F55  00                 	db	0
   778  007F56  00                 	db	0
   779  007F57  00                 	db	0
   780  007F58  3C                 	db	60
   781  007F59  40                 	db	64
   782  007F5A  30                 	db	48
   783  007F5B  40                 	db	64
   784  007F5C  3C                 	db	60
   785  007F5D  00                 	db	0
   786  007F5E  00                 	db	0
   787  007F5F  00                 	db	0
   788  007F60  44                 	db	68
   789  007F61  28                 	db	40
   790  007F62  10                 	db	16
   791  007F63  28                 	db	40
   792  007F64  44                 	db	68
   793  007F65  00                 	db	0
   794  007F66  00                 	db	0
   795  007F67  00                 	db	0
   796  007F68  1C                 	db	28
   797  007F69  A0                 	db	160
   798  007F6A  A0                 	db	160
   799  007F6B  7C                 	db	124
   800  007F6C  00                 	db	0
   801  007F6D  00                 	db	0
   802  007F6E  00                 	db	0
   803  007F6F  00                 	db	0
   804  007F70  44                 	db	68
   805  007F71  64                 	db	100
   806  007F72  54                 	db	84
   807  007F73  4C                 	db	76
   808  007F74  44                 	db	68
   809  007F75  00                 	db	0
   810  007F76  00                 	db	0
   811  007F77  00                 	db	0
   812  007F78  08                 	db	8
   813  007F79  36                 	db	54
   814  007F7A  41                 	db	65
   815  007F7B  00                 	db	0
   816  007F7C  00                 	db	0
   817  007F7D  00                 	db	0
   818  007F7E  00                 	db	0
   819  007F7F  00                 	db	0
   820  007F80  00                 	db	0
   821  007F81  7F                 	db	127
   822  007F82  00                 	db	0
   823  007F83  00                 	db	0
   824  007F84  00                 	db	0
   825  007F85  00                 	db	0
   826  007F86  00                 	db	0
   827  007F87  00                 	db	0
   828  007F88  41                 	db	65
   829  007F89  36                 	db	54
   830  007F8A  08                 	db	8
   831  007F8B  00                 	db	0
   832  007F8C  00                 	db	0
   833  007F8D  00                 	db	0
   834  007F8E  00                 	db	0
   835  007F8F  00                 	db	0
   836  007F90  02                 	db	2
   837  007F91  01                 	db	1
   838  007F92  01                 	db	1
   839  007F93  02                 	db	2
   840  007F94  01                 	db	1
   841  007F95  00                 	db	0
   842  007F96  00                 	db	0
   843  007F97  00                 	db	0
   844  007F98  02                 	db	2
   845  007F99  05                 	db	5
   846  007F9A  05                 	db	5
   847  007F9B  02                 	db	2
   848  007F9C  00                 	db	0
   849  007F9D  00                 	db	0
   850  007F9E  00                 	db	0
   851  007F9F                     __end_of_OledFont:
   852                           	opt stack 0
   853  0000                     _RCREG	set	4014
   854  0000                     _RCSTA	set	4011
   855  0000                     _RCSTAbits	set	4011
   856  0000                     _SPBRG	set	4015
   857  0000                     _SSPADD	set	4040
   858  0000                     _SSPBUF	set	4041
   859  0000                     _SSPCON1	set	4038
   860  0000                     _SSPCON2	set	4037
   861  0000                     _SSPCON2bits	set	4037
   862  0000                     _SSPSTAT	set	4039
   863  0000                     _SSPSTATbits	set	4039
   864  0000                     _TRISCbits	set	3988
   865  0000                     _TXREG	set	4013
   866  0000                     _TXSTA	set	4012
   867  0000                     _ACKDT	set	32301
   868  0000                     _ACKEN	set	32300
   869  0000                     _ACKSTAT	set	32302
   870  0000                     _CREN	set	32092
   871  0000                     _PEN	set	32298
   872  0000                     _RCEN	set	32299
   873  0000                     _RCIF	set	31989
   874  0000                     _RSEN	set	32297
   875  0000                     _SSPIE	set	31979
   876  0000                     _SSPIF	set	31987
   877  0000                     _TRISB0	set	31896
   878  0000                     _TRISB1	set	31897
   879  0000                     _TXIF	set	31988
   880  007F9F                     STR_8:
   881  007F9F  49                 	db	73	;'I'
   882  007FA0  6E                 	db	110	;'n'
   883  007FA1  74                 	db	116	;'t'
   884  007FA2  65                 	db	101	;'e'
   885  007FA3  67                 	db	103	;'g'
   886  007FA4  65                 	db	101	;'e'
   887  007FA5  72                 	db	114	;'r'
   888  007FA6  20                 	db	32
   889  007FA7  43                 	db	67	;'C'
   890  007FA8  6F                 	db	111	;'o'
   891  007FA9  75                 	db	117	;'u'
   892  007FAA  6E                 	db	110	;'n'
   893  007FAB  74                 	db	116	;'t'
   894  007FAC  3A                 	db	58	;':'
   895  007FAD  00                 	db	0
   896  007FAE                     STR_4:
   897  007FAE  4F                 	db	79	;'O'
   898  007FAF  4C                 	db	76	;'L'
   899  007FB0  45                 	db	69	;'E'
   900  007FB1  44                 	db	68	;'D'
   901  007FB2  20                 	db	32
   902  007FB3  53                 	db	83	;'S'
   903  007FB4  53                 	db	83	;'S'
   904  007FB5  44                 	db	68	;'D'
   905  007FB6  31                 	db	49	;'1'
   906  007FB7  33                 	db	51	;'3'
   907  007FB8  30                 	db	48	;'0'
   908  007FB9  36                 	db	54	;'6'
   909  007FBA  00                 	db	0
   910  007FBB                     STR_9:
   911  007FBB  46                 	db	70	;'F'
   912  007FBC  6C                 	db	108	;'l'
   913  007FBD  6F                 	db	111	;'o'
   914  007FBE  61                 	db	97	;'a'
   915  007FBF  74                 	db	116	;'t'
   916  007FC0  20                 	db	32
   917  007FC1  43                 	db	67	;'C'
   918  007FC2  6F                 	db	111	;'o'
   919  007FC3  75                 	db	117	;'u'
   920  007FC4  6E                 	db	110	;'n'
   921  007FC5  74                 	db	116	;'t'
   922  007FC6  3A                 	db	58	;':'
   923  007FC7  00                 	db	0
   924  007FC8                     STR_7:
   925  007FC8  62                 	db	98	;'b'
   926  007FC9  79                 	db	121	;'y'
   927  007FCA  20                 	db	32
   928  007FCB  41                 	db	65	;'A'
   929  007FCC  72                 	db	114	;'r'
   930  007FCD  6D                 	db	109	;'m'
   931  007FCE  73                 	db	115	;'s'
   932  007FCF  74                 	db	116	;'t'
   933  007FD0  72                 	db	114	;'r'
   934  007FD1  6F                 	db	111	;'o'
   935  007FD2  6E                 	db	110	;'n'
   936  007FD3  67                 	db	103	;'g'
   937  007FD4  00                 	db	0
   938  007FD5                     STR_10:
   939  007FD5  25                 	db	37
   940  007FD6  6C                 	db	108	;'l'
   941  007FD7  75                 	db	117	;'u'
   942  007FD8  2E                 	db	46
   943  007FD9  25                 	db	37
   944  007FDA  36                 	db	54	;'6'
   945  007FDB  2E                 	db	46
   946  007FDC  36                 	db	54	;'6'
   947  007FDD  6C                 	db	108	;'l'
   948  007FDE  75                 	db	117	;'u'
   949  007FDF  00                 	db	0
   950  007FE0                     STR_5:
   951  007FE0  4E                 	db	78	;'N'
   952  007FE1  6F                 	db	111	;'o'
   953  007FE2  20                 	db	32
   954  007FE3  42                 	db	66	;'B'
   955  007FE4  75                 	db	117	;'u'
   956  007FE5  66                 	db	102	;'f'
   957  007FE6  66                 	db	102	;'f'
   958  007FE7  65                 	db	101	;'e'
   959  007FE8  72                 	db	114	;'r'
   960  007FE9  00                 	db	0
   961  007FEA                     STR_6:
   962  007FEA  46                 	db	70	;'F'
   963  007FEB  6F                 	db	111	;'o'
   964  007FEC  72                 	db	114	;'r'
   965  007FED  20                 	db	32
   966  007FEE  58                 	db	88	;'X'
   967  007FEF  43                 	db	67	;'C'
   968  007FF0  38                 	db	56	;'8'
   969  007FF1  00                 	db	0
   970  007FF2                     STR_1:
   971  007FF2  20                 	db	32
   972  007FF3  20                 	db	32
   973  007FF4  20                 	db	32
   974  007FF5  20                 	db	32
   975  007FF6  20                 	db	32
   976  007FF7  00                 	db	0
   977  007FF8                     STR_3:
   978  007FF8  42                 	db	66	;'B'
   979  007FF9  65                 	db	101	;'e'
   980  007FFA  67                 	db	103	;'g'
   981  007FFB  69                 	db	105	;'i'
   982  007FFC  6E                 	db	110	;'n'
   983  007FFD  00                 	db	0
   984  0000                     
   985                           ; #config settings
   986  007FFE  00                 	db	0	; dummy byte at the end
   987  0000                     
   988                           	psect	cinit
   989  006710                     __pcinit:
   990                           	opt stack 0
   991  006710                     start_initialization:
   992                           	opt stack 0
   993  006710                     __initialization:
   994                           	opt stack 0
   995                           
   996                           ; Clear objects allocated to COMRAM (17 bytes)
   997  006710  EE00  F04F         	lfsr	0,__pbssCOMRAM
   998  006714  0E11               	movlw	17
   999  006716                     clear_0:
  1000  006716  6AEE               	clrf	postinc0,c
  1001  006718  06E8               	decf	wreg,f,c
  1002  00671A  E1FD               	bnz	clear_0
  1003  00671C                     end_of_initialization:
  1004                           	opt stack 0
  1005  00671C                     __end_of__initialization:
  1006                           	opt stack 0
  1007  00671C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1008  00671E  6EF8               	movwf	tblptru,c
  1009  006720  0100               	movlb	0
  1010  006722  EF97  F03B         	goto	_main	;jump to C main() function
  1011                           tblptru	equ	0xFF8
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           
  1015                           	psect	bssCOMRAM
  1016  00004F                     __pbssCOMRAM:
  1017                           	opt stack 0
  1018  00004F                     ftoa@buf:
  1019                           	opt stack 0
  1020  00004F                     	ds	17
  1021                           tblptru	equ	0xFF8
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           
  1025                           	psect	cstackCOMRAM
  1026  000001                     __pcstackCOMRAM:
  1027                           	opt stack 0
  1028  000001                     ??_isdigit:
  1029  000001                     ?___wmul:
  1030                           	opt stack 0
  1031  000001                     ?___lwdiv:
  1032                           	opt stack 0
  1033  000001                     ?___lwmod:
  1034                           	opt stack 0
  1035  000001                     ?___ftpack:
  1036                           	opt stack 0
  1037  000001                     ?___ftneg:
  1038                           	opt stack 0
  1039  000001                     ?___aldiv:
  1040                           	opt stack 0
  1041  000001                     ?___lldiv:
  1042                           	opt stack 0
  1043  000001                     I2C_Write@data:
  1044                           	opt stack 0
  1045  000001                     USART_Write@out:
  1046                           	opt stack 0
  1047  000001                     ___wmul@multiplier:
  1048                           	opt stack 0
  1049  000001                     ___lwdiv@dividend:
  1050                           	opt stack 0
  1051  000001                     ___lwmod@dividend:
  1052                           	opt stack 0
  1053  000001                     memmove@d1:
  1054                           	opt stack 0
  1055  000001                     ___ftpack@arg:
  1056                           	opt stack 0
  1057  000001                     ___ftge@ff1:
  1058                           	opt stack 0
  1059  000001                     ___ftneg@f1:
  1060                           	opt stack 0
  1061  000001                     ___aldiv@dividend:
  1062                           	opt stack 0
  1063  000001                     ___lldiv@dividend:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x0
  1067  000001                     	ds	1
  1068  000002                     I2C_Start@slave_write_address:
  1069                           	opt stack 0
  1070  000002                     _isdigit$752:
  1071                           	opt stack 0
  1072  000002                     USART_Write_Text@text:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x1
  1076  000002                     	ds	1
  1077  000003                     OLED_Command@temp:
  1078                           	opt stack 0
  1079  000003                     isdigit@c:
  1080                           	opt stack 0
  1081  000003                     ___wmul@multiplicand:
  1082                           	opt stack 0
  1083  000003                     ___lwdiv@divisor:
  1084                           	opt stack 0
  1085  000003                     ___lwmod@divisor:
  1086                           	opt stack 0
  1087  000003                     memmove@s1:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x2
  1091  000003                     	ds	1
  1092  000004                     ??_USART_Write_Text:
  1093  000004                     OLED_YX@Column:
  1094                           	opt stack 0
  1095  000004                     ___ftpack@exp:
  1096                           	opt stack 0
  1097  000004                     ___ftge@ff2:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x3
  1101  000004                     	ds	1
  1102  000005                     ??_OLED_YX:
  1103  000005                     ___ftpack@sign:
  1104                           	opt stack 0
  1105  000005                     ___lwmod@counter:
  1106                           	opt stack 0
  1107  000005                     ___wmul@product:
  1108                           	opt stack 0
  1109  000005                     ___lwdiv@quotient:
  1110                           	opt stack 0
  1111  000005                     memmove@n:
  1112                           	opt stack 0
  1113  000005                     ___aldiv@divisor:
  1114                           	opt stack 0
  1115  000005                     ___lldiv@divisor:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x4
  1119  000005                     	ds	1
  1120  000006                     ??___ftpack:
  1121  000006                     OLED_YX@Row:
  1122                           	opt stack 0
  1123  000006                     USART_Write_Text@i:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x5
  1127  000006                     	ds	1
  1128  000007                     ??_memmove:
  1129  000007                     ??___ftge:
  1130  000007                     ___lwdiv@counter:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x6
  1134  000007                     	ds	1
  1135  000008                     utoa@buf:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x7
  1139  000008                     	ds	1
  1140  000009                     ?___ftmul:
  1141                           	opt stack 0
  1142  000009                     ?___altoft:
  1143                           	opt stack 0
  1144  000009                     ?___lltoft:
  1145                           	opt stack 0
  1146  000009                     ___aldiv@counter:
  1147                           	opt stack 0
  1148  000009                     memmove@d:
  1149                           	opt stack 0
  1150  000009                     ___ftmul@f1:
  1151                           	opt stack 0
  1152  000009                     ___altoft@c:
  1153                           	opt stack 0
  1154  000009                     ___lldiv@quotient:
  1155                           	opt stack 0
  1156  000009                     ___lltoft@c:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x8
  1160  000009                     	ds	1
  1161  00000A                     ___aldiv@sign:
  1162                           	opt stack 0
  1163  00000A                     utoa@val:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x9
  1167  00000A                     	ds	1
  1168  00000B                     memmove@s:
  1169                           	opt stack 0
  1170  00000B                     ___aldiv@quotient:
  1171                           	opt stack 0
  1172                           
  1173                           ; 4 bytes @ 0xA
  1174  00000B                     	ds	1
  1175  00000C                     utoa@base:
  1176                           	opt stack 0
  1177  00000C                     ___ftmul@f2:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0xB
  1181  00000C                     	ds	1
  1182  00000D                     ??_OLED_PutChar:
  1183  00000D                     ??___altoft:
  1184  00000D                     ??___lltoft:
  1185  00000D                     ___lldiv@counter:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0xC
  1189  00000D                     	ds	1
  1190  00000E                     ?___llmod:
  1191                           	opt stack 0
  1192  00000E                     utoa@v:
  1193                           	opt stack 0
  1194  00000E                     ___llmod@dividend:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0xD
  1198  00000E                     	ds	1
  1199  00000F                     ??___ftmul:
  1200  00000F                     delay_us@x:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0xE
  1204  00000F                     	ds	1
  1205  000010                     utoa@c:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0xF
  1209  000010                     	ds	1
  1210  000011                     ?_itoa:
  1211                           	opt stack 0
  1212  000011                     delay_us@us:
  1213                           	opt stack 0
  1214  000011                     ___altoft@exp:
  1215                           	opt stack 0
  1216  000011                     ___lltoft@exp:
  1217                           	opt stack 0
  1218  000011                     itoa@buf:
  1219                           	opt stack 0
  1220  000011                     OLED_PutChar@bytes:
  1221                           	opt stack 0
  1222                           
  1223                           ; 9 bytes @ 0x10
  1224  000011                     	ds	1
  1225  000012                     ___altoft@sign:
  1226                           	opt stack 0
  1227  000012                     ___ftmul@exp:
  1228                           	opt stack 0
  1229  000012                     delay_ms@ms:
  1230                           	opt stack 0
  1231  000012                     ___llmod@divisor:
  1232                           	opt stack 0
  1233                           
  1234                           ; 4 bytes @ 0x11
  1235  000012                     	ds	1
  1236  000013                     ?___ftdiv:
  1237                           	opt stack 0
  1238  000013                     itoa@val:
  1239                           	opt stack 0
  1240  000013                     ___ftdiv@f1:
  1241                           	opt stack 0
  1242  000013                     ___ftmul@f3_as_product:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x12
  1246  000013                     	ds	1
  1247  000014                     delay_ms@i:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x13
  1251  000014                     	ds	1
  1252  000015                     itoa@base:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x14
  1256  000015                     	ds	1
  1257  000016                     ___ftmul@cntr:
  1258                           	opt stack 0
  1259  000016                     ___llmod@counter:
  1260                           	opt stack 0
  1261  000016                     ___ftdiv@f2:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x15
  1265  000016                     	ds	1
  1266  000017                     ?_sprintf:
  1267                           	opt stack 0
  1268  000017                     ___ftmul@sign:
  1269                           	opt stack 0
  1270  000017                     sprintf@sp:
  1271                           	opt stack 0
  1272  000017                     itoa@cp:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x16
  1276  000017                     	ds	1
  1277  000018                     ?___fttol:
  1278                           	opt stack 0
  1279  000018                     ___fttol@f1:
  1280                           	opt stack 0
  1281                           
  1282                           ; 3 bytes @ 0x17
  1283  000018                     	ds	1
  1284  000019                     ??___ftdiv:
  1285  000019                     sprintf@f:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x18
  1289  000019                     	ds	1
  1290  00001A                     OLED_PutChar@base:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x19
  1294  00001A                     	ds	2
  1295  00001C                     ??___fttol:
  1296  00001C                     ___ftdiv@cntr:
  1297                           	opt stack 0
  1298  00001C                     OLED_PutChar@i:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1B
  1302  00001C                     	ds	1
  1303  00001D                     ___ftdiv@f3:
  1304                           	opt stack 0
  1305                           
  1306                           ; 3 bytes @ 0x1C
  1307  00001D                     	ds	1
  1308  00001E                     OLED_PutChar@ch:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x1D
  1312  00001E                     	ds	1
  1313  00001F                     OLED_Clear@row:
  1314                           	opt stack 0
  1315  00001F                     OLED_Write_String@s:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1E
  1319  00001F                     	ds	1
  1320  000020                     ___ftdiv@exp:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x1F
  1324  000020                     	ds	1
  1325  000021                     ___ftdiv@sign:
  1326                           	opt stack 0
  1327  000021                     ___fttol@sign1:
  1328                           	opt stack 0
  1329  000021                     OLED_Clear@col:
  1330                           	opt stack 0
  1331  000021                     OLED_Write_Integer@s:
  1332                           	opt stack 0
  1333                           
  1334                           ; 20 bytes @ 0x20
  1335  000021                     	ds	1
  1336  000022                     ?___ftadd:
  1337                           	opt stack 0
  1338  000022                     ___ftadd@f1:
  1339                           	opt stack 0
  1340  000022                     ___fttol@lval:
  1341                           	opt stack 0
  1342                           
  1343                           ; 4 bytes @ 0x21
  1344  000022                     	ds	1
  1345  000023                     ??_sprintf:
  1346                           
  1347                           ; 1 bytes @ 0x22
  1348  000023                     	ds	2
  1349  000025                     ___ftadd@f2:
  1350                           	opt stack 0
  1351                           
  1352                           ; 3 bytes @ 0x24
  1353  000025                     	ds	1
  1354  000026                     ___fttol@exp1:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x25
  1358  000026                     	ds	1
  1359  000027                     sprintf@flag:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x26
  1363  000027                     	ds	1
  1364  000028                     ??___ftadd:
  1365  000028                     sprintf@ap:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x27
  1369  000028                     	ds	2
  1370  00002A                     sprintf@val:
  1371                           	opt stack 0
  1372                           
  1373                           ; 4 bytes @ 0x29
  1374  00002A                     	ds	1
  1375  00002B                     ___ftadd@sign:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x2A
  1379  00002B                     	ds	1
  1380  00002C                     ___ftadd@exp2:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x2B
  1384  00002C                     	ds	1
  1385  00002D                     ___ftadd@exp1:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x2C
  1389  00002D                     	ds	1
  1390  00002E                     ?___ftsub:
  1391                           	opt stack 0
  1392  00002E                     sprintf@width:
  1393                           	opt stack 0
  1394  00002E                     ___ftsub@f1:
  1395                           	opt stack 0
  1396  00002E                     USART_Init@baud_rate:
  1397                           	opt stack 0
  1398                           
  1399                           ; 4 bytes @ 0x2D
  1400  00002E                     	ds	2
  1401  000030                     sprintf@prec:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x2F
  1405  000030                     	ds	1
  1406  000031                     ___ftsub@f2:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0x30
  1410  000031                     	ds	1
  1411  000032                     sprintf@c:
  1412                           	opt stack 0
  1413  000032                     USART_Init@temp:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x31
  1417  000032                     	ds	2
  1418  000034                     ?_ftoa:
  1419                           	opt stack 0
  1420  000034                     ftoa@f:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x33
  1424  000034                     	ds	1
  1425  000035                     OLED_Write_Integer@i:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x34
  1429  000035                     	ds	2
  1430  000037                     ftoa@status:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x36
  1434  000037                     	ds	2
  1435  000039                     ftoa@rem:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x38
  1439  000039                     	ds	4
  1440  00003D                     ftoa@l:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x3C
  1444  00003D                     	ds	4
  1445  000041                     ftoa@cp:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x40
  1449  000041                     	ds	2
  1450  000043                     OLED_Write_Float@f:
  1451                           	opt stack 0
  1452                           
  1453                           ; 3 bytes @ 0x42
  1454  000043                     	ds	3
  1455  000046                     OLED_Write_Float@status:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x45
  1459  000046                     	ds	2
  1460  000048                     OLED_Write_Float@buf11:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x47
  1464  000048                     	ds	2
  1465  00004A                     main@count:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x49
  1469  00004A                     	ds	2
  1470  00004C                     main@dec:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x4B
  1474  00004C                     	ds	3
  1475                           tblptru	equ	0xFF8
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           
  1479 ;;
  1480 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1481 ;;
  1482 ;; *************** function _main *****************
  1483 ;; Defined at:
  1484 ;;		line 373 in file "Main.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  dec             3   75[COMRAM] float 
  1489 ;;  count           2   73[COMRAM] int 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1502 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1503 ;;Total ram usage:        5 bytes
  1504 ;; Hardware stack levels required when called:    6
  1505 ;; This function calls:
  1506 ;;		_I2C_Init
  1507 ;;		_OLED_Clear
  1508 ;;		_OLED_Init
  1509 ;;		_OLED_Write_Float
  1510 ;;		_OLED_Write_Integer
  1511 ;;		_OLED_Write_String
  1512 ;;		_OLED_YX
  1513 ;;		_USART_Init
  1514 ;;		_USART_Write
  1515 ;;		_USART_Write_Text
  1516 ;;		___ftadd
  1517 ;;		___ftge
  1518 ;;		_delay_ms
  1519 ;; This function is called by:
  1520 ;;		Startup code after reset
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text0
  1525  00772E                     __ptext0:
  1526                           	opt stack 0
  1527  00772E                     _main:
  1528                           	opt stack 25
  1529                           
  1530                           ;Main.c: 376: USART_Init(19200);
  1531                           
  1532                           ;incstack = 0
  1533  00772E  0E00               	movlw	0
  1534  007730  6E2E               	movwf	USART_Init@baud_rate,c
  1535  007732  0E4B               	movlw	75
  1536  007734  6E2F               	movwf	USART_Init@baud_rate+1,c
  1537  007736  0E00               	movlw	0
  1538  007738  6E30               	movwf	USART_Init@baud_rate+2,c
  1539  00773A  0E00               	movlw	0
  1540  00773C  6E31               	movwf	USART_Init@baud_rate+3,c
  1541  00773E  EC0C  F036         	call	_USART_Init	;wreg free
  1542                           
  1543                           ;Main.c: 377: delay_ms(1000);
  1544  007742  0E03               	movlw	3
  1545  007744  6E13               	movwf	delay_ms@ms+1,c
  1546  007746  0EE8               	movlw	232
  1547  007748  6E12               	movwf	delay_ms@ms,c
  1548  00774A  ECCE  F033         	call	_delay_ms	;wreg free
  1549                           
  1550                           ;Main.c: 380: USART_Write_Text("Begin");
  1551  00774E  0EF8               	movlw	low STR_3
  1552  007750  6E02               	movwf	USART_Write_Text@text,c
  1553  007752  0E7F               	movlw	high STR_3
  1554  007754  6E03               	movwf	USART_Write_Text@text+1,c
  1555  007756  EC97  F035         	call	_USART_Write_Text	;wreg free
  1556                           
  1557                           ;Main.c: 381: delay_ms(1000);
  1558  00775A  0E03               	movlw	3
  1559  00775C  6E13               	movwf	delay_ms@ms+1,c
  1560  00775E  0EE8               	movlw	232
  1561  007760  6E12               	movwf	delay_ms@ms,c
  1562  007762  ECCE  F033         	call	_delay_ms	;wreg free
  1563                           
  1564                           ;Main.c: 382: USART_Write(12);
  1565  007766  0E0C               	movlw	12
  1566  007768  EC6C  F033         	call	_USART_Write
  1567                           
  1568                           ;Main.c: 383: USART_Write(13);
  1569  00776C  0E0D               	movlw	13
  1570  00776E  EC6C  F033         	call	_USART_Write
  1571                           
  1572                           ;Main.c: 384: delay_ms(1000);
  1573  007772  0E03               	movlw	3
  1574  007774  6E13               	movwf	delay_ms@ms+1,c
  1575  007776  0EE8               	movlw	232
  1576  007778  6E12               	movwf	delay_ms@ms,c
  1577  00777A  ECCE  F033         	call	_delay_ms	;wreg free
  1578                           
  1579                           ;Main.c: 386: I2C_Init();
  1580  00777E  EC93  F033         	call	_I2C_Init	;wreg free
  1581                           
  1582                           ;Main.c: 388: delay_ms(1000);
  1583  007782  0E03               	movlw	3
  1584  007784  6E13               	movwf	delay_ms@ms+1,c
  1585  007786  0EE8               	movlw	232
  1586  007788  6E12               	movwf	delay_ms@ms,c
  1587  00778A  ECCE  F033         	call	_delay_ms	;wreg free
  1588                           
  1589                           ;Main.c: 392: OLED_Init();
  1590  00778E  ECD2  F036         	call	_OLED_Init	;wreg free
  1591                           
  1592                           ;Main.c: 395: OLED_Clear();
  1593  007792  EC9C  F034         	call	_OLED_Clear	;wreg free
  1594                           
  1595                           ;Main.c: 397: int count = 0;
  1596  007796  0E00               	movlw	0
  1597  007798  6E4B               	movwf	main@count+1,c
  1598  00779A  0E00               	movlw	0
  1599  00779C  6E4A               	movwf	main@count,c
  1600                           
  1601                           ;Main.c: 398: float dec = 0.0;
  1602  00779E  0E00               	movlw	0
  1603  0077A0  6E4C               	movwf	main@dec,c
  1604  0077A2  0E00               	movlw	0
  1605  0077A4  6E4D               	movwf	main@dec+1,c
  1606  0077A6  0E00               	movlw	0
  1607  0077A8  6E4E               	movwf	main@dec+2,c
  1608  0077AA                     l2655:
  1609                           
  1610                           ;Main.c: 401: {
  1611                           ;Main.c: 402: OLED_YX( 0, 0 );
  1612  0077AA  0E00               	movlw	0
  1613  0077AC  6E04               	movwf	OLED_YX@Column,c
  1614  0077AE  0E00               	movlw	0
  1615  0077B0  EC09  F034         	call	_OLED_YX
  1616                           
  1617                           ;Main.c: 403: OLED_Write_String( "OLED SSD1306" );
  1618  0077B4  0EAE               	movlw	low STR_4
  1619  0077B6  6E1F               	movwf	OLED_Write_String@s,c
  1620  0077B8  0E7F               	movlw	high STR_4
  1621  0077BA  6E20               	movwf	OLED_Write_String@s+1,c
  1622  0077BC  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1623                           
  1624                           ;Main.c: 404: delay_ms(1000);
  1625  0077C0  0E03               	movlw	3
  1626  0077C2  6E13               	movwf	delay_ms@ms+1,c
  1627  0077C4  0EE8               	movlw	232
  1628  0077C6  6E12               	movwf	delay_ms@ms,c
  1629  0077C8  ECCE  F033         	call	_delay_ms	;wreg free
  1630                           
  1631                           ;Main.c: 407: OLED_YX(1, 0);
  1632  0077CC  0E00               	movlw	0
  1633  0077CE  6E04               	movwf	OLED_YX@Column,c
  1634  0077D0  0E01               	movlw	1
  1635  0077D2  EC09  F034         	call	_OLED_YX
  1636                           
  1637                           ;Main.c: 408: OLED_Write_String ("No Buffer");
  1638  0077D6  0EE0               	movlw	low STR_5
  1639  0077D8  6E1F               	movwf	OLED_Write_String@s,c
  1640  0077DA  0E7F               	movlw	high STR_5
  1641  0077DC  6E20               	movwf	OLED_Write_String@s+1,c
  1642  0077DE  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1643                           
  1644                           ;Main.c: 410: OLED_YX(2, 0);
  1645  0077E2  0E00               	movlw	0
  1646  0077E4  6E04               	movwf	OLED_YX@Column,c
  1647  0077E6  0E02               	movlw	2
  1648  0077E8  EC09  F034         	call	_OLED_YX
  1649                           
  1650                           ;Main.c: 411: OLED_Write_String("For XC8");
  1651  0077EC  0EEA               	movlw	low STR_6
  1652  0077EE  6E1F               	movwf	OLED_Write_String@s,c
  1653  0077F0  0E7F               	movlw	high STR_6
  1654  0077F2  6E20               	movwf	OLED_Write_String@s+1,c
  1655  0077F4  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1656                           
  1657                           ;Main.c: 413: OLED_YX(3,0);
  1658  0077F8  0E00               	movlw	0
  1659  0077FA  6E04               	movwf	OLED_YX@Column,c
  1660  0077FC  0E03               	movlw	3
  1661  0077FE  EC09  F034         	call	_OLED_YX
  1662                           
  1663                           ;Main.c: 414: OLED_Write_String("by Armstrong");
  1664  007802  0EC8               	movlw	low STR_7
  1665  007804  6E1F               	movwf	OLED_Write_String@s,c
  1666  007806  0E7F               	movlw	high STR_7
  1667  007808  6E20               	movwf	OLED_Write_String@s+1,c
  1668  00780A  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1669                           
  1670                           ;Main.c: 416: delay_ms(1000);
  1671  00780E  0E03               	movlw	3
  1672  007810  6E13               	movwf	delay_ms@ms+1,c
  1673  007812  0EE8               	movlw	232
  1674  007814  6E12               	movwf	delay_ms@ms,c
  1675  007816  ECCE  F033         	call	_delay_ms	;wreg free
  1676                           
  1677                           ;Main.c: 417: OLED_Clear();
  1678  00781A  EC9C  F034         	call	_OLED_Clear	;wreg free
  1679                           
  1680                           ;Main.c: 418: delay_ms(100);
  1681  00781E  0E00               	movlw	0
  1682  007820  6E13               	movwf	delay_ms@ms+1,c
  1683  007822  0E64               	movlw	100
  1684  007824  6E12               	movwf	delay_ms@ms,c
  1685  007826  ECCE  F033         	call	_delay_ms	;wreg free
  1686                           
  1687                           ;Main.c: 424: for (count = 0; count <= 100; count++){
  1688  00782A  0E00               	movlw	0
  1689  00782C  6E4B               	movwf	main@count+1,c
  1690  00782E  0E00               	movlw	0
  1691  007830  6E4A               	movwf	main@count,c
  1692  007832                     l2677:
  1693  007832  BE4B               	btfsc	main@count+1,7,c
  1694  007834  D006               	goto	l2681
  1695  007836  504B               	movf	main@count+1,w,c
  1696  007838  E120               	bnz	l2693
  1697  00783A  0E65               	movlw	101
  1698  00783C  5C4A               	subwf	main@count,w,c
  1699  00783E  B0D8               	btfsc	status,0,c
  1700  007840  D01C               	goto	l2693
  1701  007842                     l2681:
  1702                           
  1703                           ;Main.c: 425: OLED_YX( 0, 0 );
  1704  007842  0E00               	movlw	0
  1705  007844  6E04               	movwf	OLED_YX@Column,c
  1706  007846  0E00               	movlw	0
  1707  007848  EC09  F034         	call	_OLED_YX
  1708                           
  1709                           ;Main.c: 426: OLED_Write_String( "Integer Count:" );
  1710  00784C  0E9F               	movlw	low STR_8
  1711  00784E  6E1F               	movwf	OLED_Write_String@s,c
  1712  007850  0E7F               	movlw	high STR_8
  1713  007852  6E20               	movwf	OLED_Write_String@s+1,c
  1714  007854  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1715                           
  1716                           ;Main.c: 427: OLED_YX(2, 0);
  1717  007858  0E00               	movlw	0
  1718  00785A  6E04               	movwf	OLED_YX@Column,c
  1719  00785C  0E02               	movlw	2
  1720  00785E  EC09  F034         	call	_OLED_YX
  1721                           
  1722                           ;Main.c: 428: OLED_Write_Integer(count);
  1723  007862  504A               	movf	main@count,w,c
  1724  007864  EC23  F034         	call	_OLED_Write_Integer
  1725                           
  1726                           ;Main.c: 429: delay_ms(100);
  1727  007868  0E00               	movlw	0
  1728  00786A  6E13               	movwf	delay_ms@ms+1,c
  1729  00786C  0E64               	movlw	100
  1730  00786E  6E12               	movwf	delay_ms@ms,c
  1731  007870  ECCE  F033         	call	_delay_ms	;wreg free
  1732  007874  4A4A               	infsnz	main@count,f,c
  1733  007876  2A4B               	incf	main@count+1,f,c
  1734  007878  D7DC               	goto	l2677
  1735  00787A                     l2693:
  1736                           
  1737                           ;Main.c: 430: }
  1738                           ;Main.c: 432: OLED_Clear();
  1739  00787A  EC9C  F034         	call	_OLED_Clear	;wreg free
  1740                           
  1741                           ;Main.c: 433: delay_ms(100);
  1742  00787E  0E00               	movlw	0
  1743  007880  6E13               	movwf	delay_ms@ms+1,c
  1744  007882  0E64               	movlw	100
  1745  007884  6E12               	movwf	delay_ms@ms,c
  1746  007886  ECCE  F033         	call	_delay_ms	;wreg free
  1747                           
  1748                           ;Main.c: 440: for(dec = 0.0; dec <= 20.0; dec+= 0.5)
  1749  00788A  0E00               	movlw	0
  1750  00788C  6E4C               	movwf	main@dec,c
  1751  00788E  0E00               	movlw	0
  1752  007890  6E4D               	movwf	main@dec+1,c
  1753  007892  0E00               	movlw	0
  1754  007894  6E4E               	movwf	main@dec+2,c
  1755  007896  0E00               	movlw	0
  1756  007898  6E01               	movwf	___ftge@ff1,c
  1757  00789A  0EA0               	movlw	160
  1758  00789C  6E02               	movwf	___ftge@ff1+1,c
  1759  00789E  0E41               	movlw	65
  1760  0078A0  6E03               	movwf	___ftge@ff1+2,c
  1761  0078A2  C04C  F004         	movff	main@dec,___ftge@ff2
  1762  0078A6  C04D  F005         	movff	main@dec+1,___ftge@ff2+1
  1763  0078AA  C04E  F006         	movff	main@dec+2,___ftge@ff2+2
  1764  0078AE  EC8A  F036         	call	___ftge	;wreg free
  1765  0078B2  A0D8               	btfss	status,0,c
  1766  0078B4  D041               	goto	l2717
  1767                           
  1768                           ;Main.c: 441: {
  1769                           ;Main.c: 442: OLED_YX( 0, 0 );
  1770  0078B6  0E00               	movlw	0
  1771  0078B8  6E04               	movwf	OLED_YX@Column,c
  1772  0078BA  0E00               	movlw	0
  1773  0078BC  EC09  F034         	call	_OLED_YX
  1774                           
  1775                           ;Main.c: 443: OLED_Write_String( "Float Count:" );
  1776  0078C0  0EBB               	movlw	low STR_9
  1777  0078C2  6E1F               	movwf	OLED_Write_String@s,c
  1778  0078C4  0E7F               	movlw	high STR_9
  1779  0078C6  6E20               	movwf	OLED_Write_String@s+1,c
  1780  0078C8  ECE4  F034         	call	_OLED_Write_String	;wreg free
  1781                           
  1782                           ;Main.c: 444: OLED_YX(2, 0);
  1783  0078CC  0E00               	movlw	0
  1784  0078CE  6E04               	movwf	OLED_YX@Column,c
  1785  0078D0  0E02               	movlw	2
  1786  0078D2  EC09  F034         	call	_OLED_YX
  1787                           
  1788                           ;Main.c: 445: OLED_Write_Float(dec);
  1789  0078D6  C04C  F043         	movff	main@dec,OLED_Write_Float@f
  1790  0078DA  C04D  F044         	movff	main@dec+1,OLED_Write_Float@f+1
  1791  0078DE  C04E  F045         	movff	main@dec+2,OLED_Write_Float@f+2
  1792  0078E2  EC3E  F034         	call	_OLED_Write_Float	;wreg free
  1793                           
  1794                           ;Main.c: 446: delay_ms(100);
  1795  0078E6  0E00               	movlw	0
  1796  0078E8  6E13               	movwf	delay_ms@ms+1,c
  1797  0078EA  0E64               	movlw	100
  1798  0078EC  6E12               	movwf	delay_ms@ms,c
  1799  0078EE  ECCE  F033         	call	_delay_ms	;wreg free
  1800  0078F2  C04C  F022         	movff	main@dec,___ftadd@f1
  1801  0078F6  C04D  F023         	movff	main@dec+1,___ftadd@f1+1
  1802  0078FA  C04E  F024         	movff	main@dec+2,___ftadd@f1+2
  1803  0078FE  0E00               	movlw	0
  1804  007900  6E25               	movwf	___ftadd@f2,c
  1805  007902  0E00               	movlw	0
  1806  007904  6E26               	movwf	___ftadd@f2+1,c
  1807  007906  0E3F               	movlw	63
  1808  007908  6E27               	movwf	___ftadd@f2+2,c
  1809  00790A  ECC1  F03A         	call	___ftadd	;wreg free
  1810  00790E  C022  F04C         	movff	?___ftadd,main@dec
  1811  007912  C023  F04D         	movff	?___ftadd+1,main@dec+1
  1812  007916  C024  F04E         	movff	?___ftadd+2,main@dec+2
  1813  00791A  0E00               	movlw	0
  1814  00791C  6E01               	movwf	___ftge@ff1,c
  1815  00791E  0EA0               	movlw	160
  1816  007920  6E02               	movwf	___ftge@ff1+1,c
  1817  007922  0E41               	movlw	65
  1818  007924  6E03               	movwf	___ftge@ff1+2,c
  1819  007926  C04C  F004         	movff	main@dec,___ftge@ff2
  1820  00792A  C04D  F005         	movff	main@dec+1,___ftge@ff2+1
  1821  00792E  C04E  F006         	movff	main@dec+2,___ftge@ff2+2
  1822  007932  EC8A  F036         	call	___ftge	;wreg free
  1823  007936  D7BD               	goto	L1
  1824  007938                     l2717:
  1825                           
  1826                           ;Main.c: 447: }
  1827                           ;Main.c: 449: delay_ms(100);
  1828  007938  0E00               	movlw	0
  1829  00793A  6E13               	movwf	delay_ms@ms+1,c
  1830  00793C  0E64               	movlw	100
  1831  00793E  6E12               	movwf	delay_ms@ms,c
  1832  007940  ECCE  F033         	call	_delay_ms	;wreg free
  1833                           
  1834                           ;Main.c: 450: OLED_Clear();
  1835  007944  EC9C  F034         	call	_OLED_Clear	;wreg free
  1836  007948  D730               	goto	l2655
  1837  00794A                     __end_of_main:
  1838                           	opt stack 0
  1839                           tblptru	equ	0xFF8
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _delay_ms *****************
  1845 ;; Defined at:
  1846 ;;		line 43 in file "18F4553_STD.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  ms              2   17[COMRAM] unsigned int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  i               1   19[COMRAM] unsigned char 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1860 ;;      Params:         2       0       0       0       0       0       0       0       0
  1861 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1863 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1864 ;;Total ram usage:        3 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    2
  1867 ;; This function calls:
  1868 ;;		_delay_us
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text1
  1875  00679C                     __ptext1:
  1876                           	opt stack 0
  1877  00679C                     _delay_ms:
  1878                           	opt stack 28
  1879  00679C                     
  1880                           ;18F4553_STD.c: 47: i = 4;
  1881  00679C  0E04               	movlw	4
  1882  00679E  6E14               	movwf	delay_ms@i,c
  1883  0067A0                     l2555:
  1884                           
  1885                           ;18F4553_STD.c: 49: delay_us(250);
  1886  0067A0  0E00               	movlw	0
  1887  0067A2  6E10               	movwf	delay_us@x+1,c
  1888  0067A4  0EFA               	movlw	250
  1889  0067A6  6E0F               	movwf	delay_us@x,c
  1890  0067A8  ECF3  F033         	call	_delay_us	;wreg free
  1891                           
  1892                           ;18F4553_STD.c: 50: } while(--i);
  1893  0067AC  2E14               	decfsz	delay_ms@i,f,c
  1894  0067AE  D7F8               	goto	l2555
  1895                           
  1896                           ;18F4553_STD.c: 51: }while(--ms);
  1897  0067B0  0612               	decf	delay_ms@ms,f,c
  1898  0067B2  A0D8               	btfss	status,0,c
  1899  0067B4  0613               	decf	delay_ms@ms+1,f,c
  1900  0067B6  5012               	movf	delay_ms@ms,w,c
  1901  0067B8  1013               	iorwf	delay_ms@ms+1,w,c
  1902  0067BA  B4D8               	btfsc	status,2,c
  1903  0067BC  0012               	return	
  1904  0067BE  D7EE               	goto	l2553
  1905  0067C0                     __end_of_delay_ms:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           status	equ	0xFD8
  1911                           
  1912 ;; *************** function _delay_us *****************
  1913 ;; Defined at:
  1914 ;;		line 29 in file "18F4553_STD.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  x               2   14[COMRAM] unsigned int 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  us              1   16[COMRAM] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, cstack
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1928 ;;      Params:         2       0       0       0       0       0       0       0       0
  1929 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1931 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1932 ;;Total ram usage:        3 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    1
  1935 ;; This function calls:
  1936 ;;		___aldiv
  1937 ;; This function is called by:
  1938 ;;		_delay_ms
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text2
  1943  0067E6                     __ptext2:
  1944                           	opt stack 0
  1945  0067E6                     _delay_us:
  1946                           	opt stack 28
  1947                           
  1948                           ;18F4553_STD.c: 31: unsigned char us;
  1949                           ;18F4553_STD.c: 32: us = x /(144000000/48000000)|1;
  1950                           
  1951                           ;incstack = 0
  1952  0067E6  C00F  F001         	movff	delay_us@x,___aldiv@dividend
  1953  0067EA  C010  F002         	movff	delay_us@x+1,___aldiv@dividend+1
  1954  0067EE  6A03               	clrf	___aldiv@dividend+2,c
  1955  0067F0  6A04               	clrf	___aldiv@dividend+3,c
  1956  0067F2  0E03               	movlw	3
  1957  0067F4  6E05               	movwf	___aldiv@divisor,c
  1958  0067F6  0E00               	movlw	0
  1959  0067F8  6E06               	movwf	___aldiv@divisor+1,c
  1960  0067FA  0E00               	movlw	0
  1961  0067FC  6E07               	movwf	___aldiv@divisor+2,c
  1962  0067FE  0E00               	movlw	0
  1963  006800  6E08               	movwf	___aldiv@divisor+3,c
  1964  006802  EC6D  F038         	call	___aldiv	;wreg free
  1965  006806  5001               	movf	?___aldiv,w,c
  1966  006808  0901               	iorlw	1
  1967  00680A  6E11               	movwf	delay_us@us,c
  1968  00680C                     l3:
  1969  00680C  2E11               	decfsz	delay_us@us,f,c
  1970  00680E  D7FE               	goto	l3
  1971  006810  0012               	return	
  1972  006812                     __end_of_delay_us:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function ___aldiv *****************
  1980 ;; Defined at:
  1981 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  dividend        4    0[COMRAM] long 
  1984 ;;  divisor         4    4[COMRAM] long 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  quotient        4   10[COMRAM] long 
  1987 ;;  sign            1    9[COMRAM] unsigned char 
  1988 ;;  counter         1    8[COMRAM] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  4    0[COMRAM] long 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1998 ;;      Params:         8       0       0       0       0       0       0       0       0
  1999 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2001 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2002 ;;Total ram usage:       14 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_delay_us
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text3
  2012  0070DA                     __ptext3:
  2013                           	opt stack 0
  2014  0070DA                     ___aldiv:
  2015                           	opt stack 28
  2016                           
  2017                           ;incstack = 0
  2018  0070DA  0E00               	movlw	0
  2019  0070DC  6E0A               	movwf	___aldiv@sign,c
  2020  0070DE  AE08               	btfss	___aldiv@divisor+3,7,c
  2021  0070E0  D00A               	goto	l2259
  2022  0070E2  1E08               	comf	___aldiv@divisor+3,f,c
  2023  0070E4  1E07               	comf	___aldiv@divisor+2,f,c
  2024  0070E6  1E06               	comf	___aldiv@divisor+1,f,c
  2025  0070E8  6C05               	negf	___aldiv@divisor,c
  2026  0070EA  0E00               	movlw	0
  2027  0070EC  2206               	addwfc	___aldiv@divisor+1,f,c
  2028  0070EE  2207               	addwfc	___aldiv@divisor+2,f,c
  2029  0070F0  2208               	addwfc	___aldiv@divisor+3,f,c
  2030  0070F2  0E01               	movlw	1
  2031  0070F4  6E0A               	movwf	___aldiv@sign,c
  2032  0070F6                     l2259:
  2033  0070F6  AE04               	btfss	___aldiv@dividend+3,7,c
  2034  0070F8  D00A               	goto	l2265
  2035  0070FA  1E04               	comf	___aldiv@dividend+3,f,c
  2036  0070FC  1E03               	comf	___aldiv@dividend+2,f,c
  2037  0070FE  1E02               	comf	___aldiv@dividend+1,f,c
  2038  007100  6C01               	negf	___aldiv@dividend,c
  2039  007102  0E00               	movlw	0
  2040  007104  2202               	addwfc	___aldiv@dividend+1,f,c
  2041  007106  2203               	addwfc	___aldiv@dividend+2,f,c
  2042  007108  2204               	addwfc	___aldiv@dividend+3,f,c
  2043  00710A  0E01               	movlw	1
  2044  00710C  1A0A               	xorwf	___aldiv@sign,f,c
  2045  00710E                     l2265:
  2046  00710E  0E00               	movlw	0
  2047  007110  6E0B               	movwf	___aldiv@quotient,c
  2048  007112  0E00               	movlw	0
  2049  007114  6E0C               	movwf	___aldiv@quotient+1,c
  2050  007116  0E00               	movlw	0
  2051  007118  6E0D               	movwf	___aldiv@quotient+2,c
  2052  00711A  0E00               	movlw	0
  2053  00711C  6E0E               	movwf	___aldiv@quotient+3,c
  2054  00711E  5005               	movf	___aldiv@divisor,w,c
  2055  007120  1006               	iorwf	___aldiv@divisor+1,w,c
  2056  007122  1007               	iorwf	___aldiv@divisor+2,w,c
  2057  007124  1008               	iorwf	___aldiv@divisor+3,w,c
  2058  007126  B4D8               	btfsc	status,2,c
  2059  007128  D02A               	goto	l2287
  2060  00712A  0E01               	movlw	1
  2061  00712C  6E09               	movwf	___aldiv@counter,c
  2062  00712E  D006               	goto	l2273
  2063  007130                     l2271:
  2064  007130  90D8               	bcf	status,0,c
  2065  007132  3605               	rlcf	___aldiv@divisor,f,c
  2066  007134  3606               	rlcf	___aldiv@divisor+1,f,c
  2067  007136  3607               	rlcf	___aldiv@divisor+2,f,c
  2068  007138  3608               	rlcf	___aldiv@divisor+3,f,c
  2069  00713A  2A09               	incf	___aldiv@counter,f,c
  2070  00713C                     l2273:
  2071  00713C  AE08               	btfss	___aldiv@divisor+3,7,c
  2072  00713E  D7F8               	goto	l2271
  2073  007140                     l2275:
  2074  007140  90D8               	bcf	status,0,c
  2075  007142  360B               	rlcf	___aldiv@quotient,f,c
  2076  007144  360C               	rlcf	___aldiv@quotient+1,f,c
  2077  007146  360D               	rlcf	___aldiv@quotient+2,f,c
  2078  007148  360E               	rlcf	___aldiv@quotient+3,f,c
  2079  00714A  5005               	movf	___aldiv@divisor,w,c
  2080  00714C  5C01               	subwf	___aldiv@dividend,w,c
  2081  00714E  5006               	movf	___aldiv@divisor+1,w,c
  2082  007150  5802               	subwfb	___aldiv@dividend+1,w,c
  2083  007152  5007               	movf	___aldiv@divisor+2,w,c
  2084  007154  5803               	subwfb	___aldiv@dividend+2,w,c
  2085  007156  5008               	movf	___aldiv@divisor+3,w,c
  2086  007158  5804               	subwfb	___aldiv@dividend+3,w,c
  2087  00715A  A0D8               	btfss	status,0,c
  2088  00715C  D009               	goto	l2283
  2089  00715E  5005               	movf	___aldiv@divisor,w,c
  2090  007160  5E01               	subwf	___aldiv@dividend,f,c
  2091  007162  5006               	movf	___aldiv@divisor+1,w,c
  2092  007164  5A02               	subwfb	___aldiv@dividend+1,f,c
  2093  007166  5007               	movf	___aldiv@divisor+2,w,c
  2094  007168  5A03               	subwfb	___aldiv@dividend+2,f,c
  2095  00716A  5008               	movf	___aldiv@divisor+3,w,c
  2096  00716C  5A04               	subwfb	___aldiv@dividend+3,f,c
  2097  00716E  800B               	bsf	___aldiv@quotient,0,c
  2098  007170                     l2283:
  2099  007170  90D8               	bcf	status,0,c
  2100  007172  3208               	rrcf	___aldiv@divisor+3,f,c
  2101  007174  3207               	rrcf	___aldiv@divisor+2,f,c
  2102  007176  3206               	rrcf	___aldiv@divisor+1,f,c
  2103  007178  3205               	rrcf	___aldiv@divisor,f,c
  2104  00717A  2E09               	decfsz	___aldiv@counter,f,c
  2105  00717C  D7E1               	goto	l2275
  2106  00717E                     l2287:
  2107  00717E  500A               	movf	___aldiv@sign,w,c
  2108  007180  B4D8               	btfsc	status,2,c
  2109  007182  D008               	goto	l2291
  2110  007184  1E0E               	comf	___aldiv@quotient+3,f,c
  2111  007186  1E0D               	comf	___aldiv@quotient+2,f,c
  2112  007188  1E0C               	comf	___aldiv@quotient+1,f,c
  2113  00718A  6C0B               	negf	___aldiv@quotient,c
  2114  00718C  0E00               	movlw	0
  2115  00718E  220C               	addwfc	___aldiv@quotient+1,f,c
  2116  007190  220D               	addwfc	___aldiv@quotient+2,f,c
  2117  007192  220E               	addwfc	___aldiv@quotient+3,f,c
  2118  007194                     l2291:
  2119  007194  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2120  007198  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2121  00719C  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2122  0071A0  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2123  0071A4  0012               	return	
  2124  0071A6                     __end_of___aldiv:
  2125                           	opt stack 0
  2126                           tblptru	equ	0xFF8
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function ___ftge *****************
  2132 ;; Defined at:
  2133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  ff1             3    0[COMRAM] float 
  2136 ;;  ff2             3    3[COMRAM] float 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:         6       0       0       0       0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2150 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2151 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2152 ;;Total ram usage:        9 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text4
  2162  006D14                     __ptext4:
  2163                           	opt stack 0
  2164  006D14                     ___ftge:
  2165                           	opt stack 30
  2166                           
  2167                           ;incstack = 0
  2168  006D14  AE03               	btfss	___ftge@ff1+2,7,c
  2169  006D16  D016               	goto	l2617
  2170  006D18  C001  F007         	movff	___ftge@ff1,??___ftge
  2171  006D1C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2172  006D20  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2173  006D24  1E07               	comf	??___ftge,f,c
  2174  006D26  1E08               	comf	??___ftge+1,f,c
  2175  006D28  1E09               	comf	??___ftge+2,f,c
  2176  006D2A  2A07               	incf	??___ftge,f,c
  2177  006D2C  0E00               	movlw	0
  2178  006D2E  2208               	addwfc	??___ftge+1,f,c
  2179  006D30  2209               	addwfc	??___ftge+2,f,c
  2180  006D32  0E00               	movlw	0
  2181  006D34  2407               	addwf	??___ftge,w,c
  2182  006D36  6E01               	movwf	___ftge@ff1,c
  2183  006D38  0E00               	movlw	0
  2184  006D3A  2008               	addwfc	??___ftge+1,w,c
  2185  006D3C  6E02               	movwf	___ftge@ff1+1,c
  2186  006D3E  0E80               	movlw	128
  2187  006D40  2009               	addwfc	??___ftge+2,w,c
  2188  006D42  6E03               	movwf	___ftge@ff1+2,c
  2189  006D44                     l2617:
  2190  006D44  AE06               	btfss	___ftge@ff2+2,7,c
  2191  006D46  D016               	goto	l2621
  2192  006D48  C004  F007         	movff	___ftge@ff2,??___ftge
  2193  006D4C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2194  006D50  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2195  006D54  1E07               	comf	??___ftge,f,c
  2196  006D56  1E08               	comf	??___ftge+1,f,c
  2197  006D58  1E09               	comf	??___ftge+2,f,c
  2198  006D5A  2A07               	incf	??___ftge,f,c
  2199  006D5C  0E00               	movlw	0
  2200  006D5E  2208               	addwfc	??___ftge+1,f,c
  2201  006D60  2209               	addwfc	??___ftge+2,f,c
  2202  006D62  0E00               	movlw	0
  2203  006D64  2407               	addwf	??___ftge,w,c
  2204  006D66  6E04               	movwf	___ftge@ff2,c
  2205  006D68  0E00               	movlw	0
  2206  006D6A  2008               	addwfc	??___ftge+1,w,c
  2207  006D6C  6E05               	movwf	___ftge@ff2+1,c
  2208  006D6E  0E80               	movlw	128
  2209  006D70  2009               	addwfc	??___ftge+2,w,c
  2210  006D72  6E06               	movwf	___ftge@ff2+2,c
  2211  006D74                     l2621:
  2212  006D74  0E00               	movlw	0
  2213  006D76  1A01               	xorwf	___ftge@ff1,f,c
  2214  006D78  0E00               	movlw	0
  2215  006D7A  1A02               	xorwf	___ftge@ff1+1,f,c
  2216  006D7C  0E80               	movlw	128
  2217  006D7E  1A03               	xorwf	___ftge@ff1+2,f,c
  2218  006D80  0E00               	movlw	0
  2219  006D82  1A04               	xorwf	___ftge@ff2,f,c
  2220  006D84  0E00               	movlw	0
  2221  006D86  1A05               	xorwf	___ftge@ff2+1,f,c
  2222  006D88  0E80               	movlw	128
  2223  006D8A  1A06               	xorwf	___ftge@ff2+2,f,c
  2224  006D8C  5004               	movf	___ftge@ff2,w,c
  2225  006D8E  5C01               	subwf	___ftge@ff1,w,c
  2226  006D90  5005               	movf	___ftge@ff2+1,w,c
  2227  006D92  5802               	subwfb	___ftge@ff1+1,w,c
  2228  006D94  5006               	movf	___ftge@ff2+2,w,c
  2229  006D96  5803               	subwfb	___ftge@ff1+2,w,c
  2230  006D98  B0D8               	btfsc	status,0,c
  2231  006D9A  D002               	goto	l2627
  2232  006D9C  90D8               	bcf	status,0,c
  2233  006D9E  0012               	return	
  2234  006DA0                     l2627:
  2235  006DA0  80D8               	bsf	status,0,c
  2236  006DA2  0012               	return	
  2237  006DA4                     __end_of___ftge:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _USART_Write_Text *****************
  2245 ;; Defined at:
  2246 ;;		line 65 in file "USART.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  text            2    1[COMRAM] PTR unsigned char 
  2249 ;;		 -> ftoa@buf(17), USART_Write_Integer@buf(8), STR_3(6), OLED_Write_Integer@s(20), 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  i               2    5[COMRAM] int 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2261 ;;      Params:         2       0       0       0       0       0       0       0       0
  2262 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2263 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2264 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2265 ;;Total ram usage:        6 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    1
  2268 ;; This function calls:
  2269 ;;		_USART_Write
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;;		_USART_Write_Integer
  2273 ;;		_USART_Write_Float
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text5
  2278  006B2E                     __ptext5:
  2279                           	opt stack 0
  2280  006B2E                     _USART_Write_Text:
  2281                           	opt stack 29
  2282                           
  2283                           ;USART.c: 67: int i;
  2284                           ;USART.c: 68: for(i=0;text[i]!='\0';i++)
  2285                           
  2286                           ;incstack = 0
  2287  006B2E  0E00               	movlw	0
  2288  006B30  6E07               	movwf	USART_Write_Text@i+1,c
  2289  006B32  0E00               	movlw	0
  2290  006B34  6E06               	movwf	USART_Write_Text@i,c
  2291  006B36  D01A               	goto	l2611
  2292  006B38                     l2607:
  2293                           
  2294                           ;USART.c: 69: USART_Write(text[i]);
  2295  006B38  5006               	movf	USART_Write_Text@i,w,c
  2296  006B3A  2402               	addwf	USART_Write_Text@text,w,c
  2297  006B3C  6E04               	movwf	??_USART_Write_Text& (0+255),c
  2298  006B3E  5007               	movf	USART_Write_Text@i+1,w,c
  2299  006B40  2003               	addwfc	USART_Write_Text@text+1,w,c
  2300  006B42  6E05               	movwf	(??_USART_Write_Text+1)& (0+255),c
  2301  006B44  C004  FFF6         	movff	??_USART_Write_Text,tblptrl
  2302  006B48  C005  FFF7         	movff	??_USART_Write_Text+1,tblptrh
  2303  006B4C  6AF8               	clrf	tblptru,c
  2304  006B4E  0E07               	movlw	(high __ramtop+-1)
  2305  006B50  64F7               	cpfsgt	tblptrh,c
  2306  006B52  D003               	bra	u2567
  2307  006B54  0008               	tblrd		*
  2308  006B56  50F5               	movf	tablat,w,c
  2309  006B58  D005               	bra	u2560
  2310  006B5A                     u2567:
  2311  006B5A  CFF6 FFD9          	movff	tblptrl,fsr2l
  2312  006B5E  CFF7 FFDA          	movff	tblptrh,fsr2h
  2313  006B62  50DF               	movf	indf2,w,c
  2314  006B64                     u2560:
  2315  006B64  EC6C  F033         	call	_USART_Write
  2316  006B68  4A06               	infsnz	USART_Write_Text@i,f,c
  2317  006B6A  2A07               	incf	USART_Write_Text@i+1,f,c
  2318  006B6C                     l2611:
  2319  006B6C  5006               	movf	USART_Write_Text@i,w,c
  2320  006B6E  2402               	addwf	USART_Write_Text@text,w,c
  2321  006B70  6E04               	movwf	??_USART_Write_Text& (0+255),c
  2322  006B72  5007               	movf	USART_Write_Text@i+1,w,c
  2323  006B74  2003               	addwfc	USART_Write_Text@text+1,w,c
  2324  006B76  6E05               	movwf	(??_USART_Write_Text+1)& (0+255),c
  2325  006B78  C004  FFF6         	movff	??_USART_Write_Text,tblptrl
  2326  006B7C  C005  FFF7         	movff	??_USART_Write_Text+1,tblptrh
  2327  006B80  6AF8               	clrf	tblptru,c
  2328  006B82  0E07               	movlw	(high __ramtop+-1)
  2329  006B84  64F7               	cpfsgt	tblptrh,c
  2330  006B86  D003               	bra	u2577
  2331  006B88  0008               	tblrd		*
  2332  006B8A  50F5               	movf	tablat,w,c
  2333  006B8C  D005               	bra	u2570
  2334  006B8E                     u2577:
  2335  006B8E  CFF6 FFD9          	movff	tblptrl,fsr2l
  2336  006B92  CFF7 FFDA          	movff	tblptrh,fsr2h
  2337  006B96  50DF               	movf	indf2,w,c
  2338  006B98                     u2570:
  2339  006B98  0900               	iorlw	0
  2340  006B9A  B4D8               	btfsc	status,2,c
  2341  006B9C  0012               	return	
  2342  006B9E  D7CC               	goto	l2607
  2343  006BA0                     __end_of_USART_Write_Text:
  2344                           	opt stack 0
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           indf2	equ	0xFDF
  2352                           fsr2h	equ	0xFDA
  2353                           fsr2l	equ	0xFD9
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function _USART_Write *****************
  2357 ;; Defined at:
  2358 ;;		line 51 in file "USART.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  out             1    wreg     unsigned char 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  out             1    0[COMRAM] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2372 ;;      Params:         0       0       0       0       0       0       0       0       0
  2373 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2375 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2376 ;;Total ram usage:        1 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;;		_USART_Write_Text
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text6
  2387  0066D8                     __ptext6:
  2388                           	opt stack 0
  2389  0066D8                     _USART_Write:
  2390                           	opt stack 29
  2391                           
  2392                           ;incstack = 0
  2393                           ;USART_Write@out stored from wreg
  2394  0066D8  6E01               	movwf	USART_Write@out,c
  2395  0066DA                     l226:
  2396  0066DA  A89E               	btfss	3998,4,c	;volatile
  2397  0066DC  D7FE               	goto	l226
  2398                           
  2399                           ;USART.c: 54: TXREG = out;
  2400  0066DE  C001  FFAD         	movff	USART_Write@out,4013	;volatile
  2401  0066E2  0012               	return		;funcret
  2402  0066E4                     __end_of_USART_Write:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           postinc0	equ	0xFEE
  2409                           wreg	equ	0xFE8
  2410                           indf2	equ	0xFDF
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _USART_Init *****************
  2416 ;; Defined at:
  2417 ;;		line 27 in file "USART.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  baud_rate       4   45[COMRAM] long 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  temp            3   49[COMRAM] float 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, status,2, status,0, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2431 ;;      Params:         4       0       0       0       0       0       0       0       0
  2432 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2434 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2435 ;;Total ram usage:        7 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    2
  2438 ;; This function calls:
  2439 ;;		___altoft
  2440 ;;		___ftadd
  2441 ;;		___ftdiv
  2442 ;;		___fttol
  2443 ;; This function is called by:
  2444 ;;		_main
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text7
  2449  006C18                     __ptext7:
  2450                           	opt stack 0
  2451  006C18                     _USART_Init:
  2452                           	opt stack 28
  2453                           
  2454                           ;USART.c: 29: float temp;
  2455                           ;USART.c: 32: TRISCbits.TRISC6=0;
  2456                           
  2457                           ;incstack = 0
  2458  006C18  9C94               	bcf	3988,6,c	;volatile
  2459                           
  2460                           ;USART.c: 34: TRISCbits.TRISC7=1;
  2461  006C1A  8E94               	bsf	3988,7,c	;volatile
  2462                           
  2463                           ;USART.c: 37: temp= (( (float) (48000000/64) / (float) baud_rate ) - 1);
  2464  006C1C  C02E  F009         	movff	USART_Init@baud_rate,___altoft@c
  2465  006C20  C02F  F00A         	movff	USART_Init@baud_rate+1,___altoft@c+1
  2466  006C24  C030  F00B         	movff	USART_Init@baud_rate+2,___altoft@c+2
  2467  006C28  C031  F00C         	movff	USART_Init@baud_rate+3,___altoft@c+3
  2468  006C2C  ECD0  F035         	call	___altoft	;wreg free
  2469  006C30  C009  F016         	movff	?___altoft,___ftdiv@f2
  2470  006C34  C00A  F017         	movff	?___altoft+1,___ftdiv@f2+1
  2471  006C38  C00B  F018         	movff	?___altoft+2,___ftdiv@f2+2
  2472  006C3C  0E1B               	movlw	27
  2473  006C3E  6E13               	movwf	___ftdiv@f1,c
  2474  006C40  0E37               	movlw	55
  2475  006C42  6E14               	movwf	___ftdiv@f1+1,c
  2476  006C44  0E49               	movlw	73
  2477  006C46  6E15               	movwf	___ftdiv@f1+2,c
  2478  006C48  ECD3  F038         	call	___ftdiv	;wreg free
  2479  006C4C  C013  F022         	movff	?___ftdiv,___ftadd@f1
  2480  006C50  C014  F023         	movff	?___ftdiv+1,___ftadd@f1+1
  2481  006C54  C015  F024         	movff	?___ftdiv+2,___ftadd@f1+2
  2482  006C58  0E00               	movlw	0
  2483  006C5A  6E25               	movwf	___ftadd@f2,c
  2484  006C5C  0E80               	movlw	128
  2485  006C5E  6E26               	movwf	___ftadd@f2+1,c
  2486  006C60  0EBF               	movlw	191
  2487  006C62  6E27               	movwf	___ftadd@f2+2,c
  2488  006C64  ECC1  F03A         	call	___ftadd	;wreg free
  2489  006C68  C022  F032         	movff	?___ftadd,USART_Init@temp
  2490  006C6C  C023  F033         	movff	?___ftadd+1,USART_Init@temp+1
  2491  006C70  C024  F034         	movff	?___ftadd+2,USART_Init@temp+2
  2492                           
  2493                           ;USART.c: 38: SPBRG = (int) temp;
  2494  006C74  C032  F018         	movff	USART_Init@temp,___fttol@f1
  2495  006C78  C033  F019         	movff	USART_Init@temp+1,___fttol@f1+1
  2496  006C7C  C034  F01A         	movff	USART_Init@temp+2,___fttol@f1+2
  2497  006C80  ECC0  F039         	call	___fttol	;wreg free
  2498  006C84  5018               	movf	?___fttol,w,c
  2499  006C86  6EAF               	movwf	4015,c	;volatile
  2500                           
  2501                           ;USART.c: 40: TXSTA = 0x20;
  2502  006C88  0E20               	movlw	32
  2503  006C8A  6EAC               	movwf	4012,c	;volatile
  2504                           
  2505                           ;USART.c: 41: RCSTA = 0x90;
  2506  006C8C  0E90               	movlw	144
  2507  006C8E  6EAB               	movwf	4011,c	;volatile
  2508  006C90  0012               	return		;funcret
  2509  006C92                     __end_of_USART_Init:
  2510                           	opt stack 0
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           postinc0	equ	0xFEE
  2516                           wreg	equ	0xFE8
  2517                           indf2	equ	0xFDF
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function ___ftdiv *****************
  2523 ;; Defined at:
  2524 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  f1              3   18[COMRAM] float 
  2527 ;;  f2              3   21[COMRAM] float 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  f3              3   28[COMRAM] float 
  2530 ;;  sign            1   32[COMRAM] unsigned char 
  2531 ;;  exp             1   31[COMRAM] unsigned char 
  2532 ;;  cntr            1   27[COMRAM] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  3   18[COMRAM] float 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2, status,0, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2542 ;;      Params:         6       0       0       0       0       0       0       0       0
  2543 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2544 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2545 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2546 ;;Total ram usage:       15 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    1
  2549 ;; This function calls:
  2550 ;;		___ftpack
  2551 ;; This function is called by:
  2552 ;;		_USART_Init
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text8
  2557  0071A6                     __ptext8:
  2558                           	opt stack 0
  2559  0071A6                     ___ftdiv:
  2560                           	opt stack 28
  2561                           
  2562                           ;incstack = 0
  2563  0071A6  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  2564  0071AA  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2565  0071AC  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2566  0071AE  3414               	rlcf	___ftdiv@f1+1,w,c
  2567  0071B0  3619               	rlcf	??___ftdiv& (0+255),f,c
  2568  0071B2  E301               	bnc	u2461
  2569  0071B4  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2570  0071B6                     u2461:
  2571  0071B6  5019               	movf	??___ftdiv,w,c
  2572  0071B8  6E20               	movwf	___ftdiv@exp,c
  2573  0071BA  5020               	movf	___ftdiv@exp,w,c
  2574  0071BC  A4D8               	btfss	status,2,c
  2575  0071BE  D007               	goto	l2513
  2576  0071C0  0E00               	movlw	0
  2577  0071C2  6E13               	movwf	?___ftdiv,c
  2578  0071C4  0E00               	movlw	0
  2579  0071C6  6E14               	movwf	?___ftdiv+1,c
  2580  0071C8  0E00               	movlw	0
  2581  0071CA  6E15               	movwf	?___ftdiv+2,c
  2582  0071CC  0012               	return	
  2583  0071CE                     l2513:
  2584  0071CE  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  2585  0071D2  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  2586  0071D4  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  2587  0071D6  3417               	rlcf	___ftdiv@f2+1,w,c
  2588  0071D8  3619               	rlcf	??___ftdiv& (0+255),f,c
  2589  0071DA  E301               	bnc	u2481
  2590  0071DC  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  2591  0071DE                     u2481:
  2592  0071DE  5019               	movf	??___ftdiv,w,c
  2593  0071E0  6E21               	movwf	___ftdiv@sign,c
  2594  0071E2  5021               	movf	___ftdiv@sign,w,c
  2595  0071E4  A4D8               	btfss	status,2,c
  2596  0071E6  D007               	goto	l2519
  2597  0071E8  0E00               	movlw	0
  2598  0071EA  6E13               	movwf	?___ftdiv,c
  2599  0071EC  0E00               	movlw	0
  2600  0071EE  6E14               	movwf	?___ftdiv+1,c
  2601  0071F0  0E00               	movlw	0
  2602  0071F2  6E15               	movwf	?___ftdiv+2,c
  2603  0071F4  0012               	return	
  2604  0071F6                     l2519:
  2605  0071F6  0E00               	movlw	0
  2606  0071F8  6E1D               	movwf	___ftdiv@f3,c
  2607  0071FA  0E00               	movlw	0
  2608  0071FC  6E1E               	movwf	___ftdiv@f3+1,c
  2609  0071FE  0E00               	movlw	0
  2610  007200  6E1F               	movwf	___ftdiv@f3+2,c
  2611  007202  5021               	movf	___ftdiv@sign,w,c
  2612  007204  0F89               	addlw	137
  2613  007206  5E20               	subwf	___ftdiv@exp,f,c
  2614  007208  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  2615  00720C  5018               	movf	___ftdiv@f2+2,w,c
  2616  00720E  1A21               	xorwf	___ftdiv@sign,f,c
  2617  007210  0E80               	movlw	128
  2618  007212  1621               	andwf	___ftdiv@sign,f,c
  2619  007214  8E14               	bsf	___ftdiv@f1+1,7,c
  2620  007216  0EFF               	movlw	255
  2621  007218  1613               	andwf	___ftdiv@f1,f,c
  2622  00721A  0EFF               	movlw	255
  2623  00721C  1614               	andwf	___ftdiv@f1+1,f,c
  2624  00721E  0E00               	movlw	0
  2625  007220  1615               	andwf	___ftdiv@f1+2,f,c
  2626  007222  8E17               	bsf	___ftdiv@f2+1,7,c
  2627  007224  0EFF               	movlw	255
  2628  007226  1616               	andwf	___ftdiv@f2,f,c
  2629  007228  0EFF               	movlw	255
  2630  00722A  1617               	andwf	___ftdiv@f2+1,f,c
  2631  00722C  0E00               	movlw	0
  2632  00722E  1618               	andwf	___ftdiv@f2+2,f,c
  2633  007230  0E18               	movlw	24
  2634  007232  6E1C               	movwf	___ftdiv@cntr,c
  2635  007234                     l2539:
  2636  007234  90D8               	bcf	status,0,c
  2637  007236  361D               	rlcf	___ftdiv@f3,f,c
  2638  007238  361E               	rlcf	___ftdiv@f3+1,f,c
  2639  00723A  361F               	rlcf	___ftdiv@f3+2,f,c
  2640  00723C  5016               	movf	___ftdiv@f2,w,c
  2641  00723E  5C13               	subwf	___ftdiv@f1,w,c
  2642  007240  5017               	movf	___ftdiv@f2+1,w,c
  2643  007242  5814               	subwfb	___ftdiv@f1+1,w,c
  2644  007244  5018               	movf	___ftdiv@f2+2,w,c
  2645  007246  5815               	subwfb	___ftdiv@f1+2,w,c
  2646  007248  A0D8               	btfss	status,0,c
  2647  00724A  D007               	goto	l579
  2648  00724C  5016               	movf	___ftdiv@f2,w,c
  2649  00724E  5E13               	subwf	___ftdiv@f1,f,c
  2650  007250  5017               	movf	___ftdiv@f2+1,w,c
  2651  007252  5A14               	subwfb	___ftdiv@f1+1,f,c
  2652  007254  5018               	movf	___ftdiv@f2+2,w,c
  2653  007256  5A15               	subwfb	___ftdiv@f1+2,f,c
  2654  007258  801D               	bsf	___ftdiv@f3,0,c
  2655  00725A                     l579:
  2656  00725A  90D8               	bcf	status,0,c
  2657  00725C  3613               	rlcf	___ftdiv@f1,f,c
  2658  00725E  3614               	rlcf	___ftdiv@f1+1,f,c
  2659  007260  3615               	rlcf	___ftdiv@f1+2,f,c
  2660  007262  2E1C               	decfsz	___ftdiv@cntr,f,c
  2661  007264  D7E7               	goto	l2539
  2662  007266  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  2663  00726A  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2664  00726E  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2665  007272  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  2666  007276  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  2667  00727A  EC16  F038         	call	___ftpack	;wreg free
  2668  00727E  C001  F013         	movff	?___ftpack,?___ftdiv
  2669  007282  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  2670  007286  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  2671  00728A  0012               	return	
  2672  00728C                     __end_of___ftdiv:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           indf2	equ	0xFDF
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function ___altoft *****************
  2686 ;; Defined at:
  2687 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  c               4    8[COMRAM] long 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  sign            1   17[COMRAM] unsigned char 
  2692 ;;  exp             1   16[COMRAM] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  3    8[COMRAM] float 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2702 ;;      Params:         4       0       0       0       0       0       0       0       0
  2703 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2704 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2705 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2706 ;;Total ram usage:       10 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    1
  2709 ;; This function calls:
  2710 ;;		___ftpack
  2711 ;; This function is called by:
  2712 ;;		_USART_Init
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text9
  2717  006BA0                     __ptext9:
  2718                           	opt stack 0
  2719  006BA0                     ___altoft:
  2720                           	opt stack 28
  2721                           
  2722                           ;incstack = 0
  2723  006BA0  0E00               	movlw	0
  2724  006BA2  6E12               	movwf	___altoft@sign,c
  2725  006BA4  0E8E               	movlw	142
  2726  006BA6  6E11               	movwf	___altoft@exp,c
  2727  006BA8  AE0C               	btfss	___altoft@c+3,7,c
  2728  006BAA  D011               	goto	l2501
  2729  006BAC  1E0C               	comf	___altoft@c+3,f,c
  2730  006BAE  1E0B               	comf	___altoft@c+2,f,c
  2731  006BB0  1E0A               	comf	___altoft@c+1,f,c
  2732  006BB2  6C09               	negf	___altoft@c,c
  2733  006BB4  0E00               	movlw	0
  2734  006BB6  220A               	addwfc	___altoft@c+1,f,c
  2735  006BB8  220B               	addwfc	___altoft@c+2,f,c
  2736  006BBA  220C               	addwfc	___altoft@c+3,f,c
  2737  006BBC  0E01               	movlw	1
  2738  006BBE  6E12               	movwf	___altoft@sign,c
  2739  006BC0  D006               	goto	l2501
  2740  006BC2                     l2499:
  2741  006BC2  90D8               	bcf	status,0,c
  2742  006BC4  320C               	rrcf	___altoft@c+3,f,c
  2743  006BC6  320B               	rrcf	___altoft@c+2,f,c
  2744  006BC8  320A               	rrcf	___altoft@c+1,f,c
  2745  006BCA  3209               	rrcf	___altoft@c,f,c
  2746  006BCC  2A11               	incf	___altoft@exp,f,c
  2747  006BCE                     l2501:
  2748  006BCE  0E00               	movlw	0
  2749  006BD0  1409               	andwf	___altoft@c,w,c
  2750  006BD2  6E0D               	movwf	??___altoft& (0+255),c
  2751  006BD4  0E00               	movlw	0
  2752  006BD6  140A               	andwf	___altoft@c+1,w,c
  2753  006BD8  6E0E               	movwf	(??___altoft+1)& (0+255),c
  2754  006BDA  0E00               	movlw	0
  2755  006BDC  140B               	andwf	___altoft@c+2,w,c
  2756  006BDE  6E0F               	movwf	(??___altoft+2)& (0+255),c
  2757  006BE0  0EFF               	movlw	255
  2758  006BE2  140C               	andwf	___altoft@c+3,w,c
  2759  006BE4  6E10               	movwf	(??___altoft+3)& (0+255),c
  2760  006BE6  500D               	movf	??___altoft,w,c
  2761  006BE8  100E               	iorwf	??___altoft+1,w,c
  2762  006BEA  100F               	iorwf	??___altoft+2,w,c
  2763  006BEC  1010               	iorwf	??___altoft+3,w,c
  2764  006BEE  A4D8               	btfss	status,2,c
  2765  006BF0  D7E8               	goto	l2499
  2766  006BF2  C009  F001         	movff	___altoft@c,___ftpack@arg
  2767  006BF6  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2768  006BFA  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2769  006BFE  C011  F004         	movff	___altoft@exp,___ftpack@exp
  2770  006C02  C012  F005         	movff	___altoft@sign,___ftpack@sign
  2771  006C06  EC16  F038         	call	___ftpack	;wreg free
  2772  006C0A  C001  F009         	movff	?___ftpack,?___altoft
  2773  006C0E  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  2774  006C12  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  2775  006C16  0012               	return	
  2776  006C18                     __end_of___altoft:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           indf2	equ	0xFDF
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _OLED_Write_Integer *****************
  2790 ;; Defined at:
  2791 ;;		line 335 in file "Main.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  i               1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  i               1   52[COMRAM] unsigned char 
  2796 ;;  s              20   32[COMRAM] unsigned char [20]
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0
  2807 ;;      Locals:        21       0       0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2809 ;;      Totals:        21       0       0       0       0       0       0       0       0
  2810 ;;Total ram usage:       21 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    5
  2813 ;; This function calls:
  2814 ;;		_OLED_Write_String
  2815 ;;		_itoa
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text10
  2822  006846                     __ptext10:
  2823                           	opt stack 0
  2824  006846                     _OLED_Write_Integer:
  2825                           	opt stack 25
  2826                           
  2827                           ;incstack = 0
  2828                           ;OLED_Write_Integer@i stored from wreg
  2829  006846  6E35               	movwf	OLED_Write_Integer@i,c
  2830                           
  2831                           ;Main.c: 337: char s[20];
  2832                           ;Main.c: 338: itoa( s, i, 10 );
  2833  006848  0E21               	movlw	low OLED_Write_Integer@s
  2834  00684A  6E11               	movwf	itoa@buf,c
  2835  00684C  0E00               	movlw	high OLED_Write_Integer@s
  2836  00684E  6E12               	movwf	itoa@buf+1,c
  2837  006850  C035  F013         	movff	OLED_Write_Integer@i,itoa@val
  2838  006854  6A14               	clrf	itoa@val+1,c
  2839  006856  0E00               	movlw	0
  2840  006858  6E16               	movwf	itoa@base+1,c
  2841  00685A  0E0A               	movlw	10
  2842  00685C  6E15               	movwf	itoa@base,c
  2843  00685E  ECBF  F034         	call	_itoa	;wreg free
  2844                           
  2845                           ;Main.c: 339: OLED_Write_String( s );
  2846  006862  0E21               	movlw	low OLED_Write_Integer@s
  2847  006864  6E1F               	movwf	OLED_Write_String@s,c
  2848  006866  0E00               	movlw	high OLED_Write_Integer@s
  2849  006868  6E20               	movwf	OLED_Write_String@s+1,c
  2850  00686A  ECE4  F034         	call	_OLED_Write_String	;wreg free
  2851                           
  2852                           ;Main.c: 340: OLED_Write_String( "     " );
  2853  00686E  0EF2               	movlw	low STR_1
  2854  006870  6E1F               	movwf	OLED_Write_String@s,c
  2855  006872  0E7F               	movlw	high STR_1
  2856  006874  6E20               	movwf	OLED_Write_String@s+1,c
  2857  006876  ECE4  F034         	call	_OLED_Write_String	;wreg free
  2858  00687A  0012               	return		;funcret
  2859  00687C                     __end_of_OLED_Write_Integer:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           indf2	equ	0xFDF
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _itoa *****************
  2873 ;; Defined at:
  2874 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  buf             2   16[COMRAM] PTR unsigned char 
  2877 ;;		 -> USART_Write_Integer@buf(8), OLED_Write_Integer@s(20), 
  2878 ;;  val             2   18[COMRAM] int 
  2879 ;;  base            2   20[COMRAM] int 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  cp              2   22[COMRAM] PTR unsigned char 
  2882 ;;		 -> USART_Write_Integer@buf(8), OLED_Write_Integer@s(20), 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  2   16[COMRAM] PTR unsigned char 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2892 ;;      Params:         6       0       0       0       0       0       0       0       0
  2893 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2895 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2896 ;;Total ram usage:        8 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    2
  2899 ;; This function calls:
  2900 ;;		_utoa
  2901 ;; This function is called by:
  2902 ;;		_OLED_Write_Integer
  2903 ;;		_USART_Write_Integer
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text11
  2908  00697E                     __ptext11:
  2909                           	opt stack 0
  2910  00697E                     _itoa:
  2911                           	opt stack 27
  2912                           
  2913                           ;incstack = 0
  2914  00697E  C011  F017         	movff	itoa@buf,itoa@cp
  2915  006982  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  2916  006986  AE14               	btfss	itoa@val+1,7,c
  2917  006988  D00C               	goto	l2465
  2918  00698A  C011  FFD9         	movff	itoa@buf,fsr2l
  2919  00698E  C012  FFDA         	movff	itoa@buf+1,fsr2h
  2920  006992  0E2D               	movlw	45
  2921  006994  6EDF               	movwf	indf2,c
  2922  006996  4A11               	infsnz	itoa@buf,f,c
  2923  006998  2A12               	incf	itoa@buf+1,f,c
  2924  00699A  6C13               	negf	itoa@val,c
  2925  00699C  1E14               	comf	itoa@val+1,f,c
  2926  00699E  B0D8               	btfsc	status,0,c
  2927  0069A0  2A14               	incf	itoa@val+1,f,c
  2928  0069A2                     l2465:
  2929  0069A2  C011  F008         	movff	itoa@buf,utoa@buf
  2930  0069A6  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  2931  0069AA  C013  F00A         	movff	itoa@val,utoa@val
  2932  0069AE  C014  F00B         	movff	itoa@val+1,utoa@val+1
  2933  0069B2  C015  F00C         	movff	itoa@base,utoa@base
  2934  0069B6  C016  F00D         	movff	itoa@base+1,utoa@base+1
  2935  0069BA  EC70  F037         	call	_utoa	;wreg free
  2936  0069BE  C017  F011         	movff	itoa@cp,?_itoa
  2937  0069C2  C018  F012         	movff	itoa@cp+1,?_itoa+1
  2938  0069C6  0012               	return	
  2939  0069C8                     __end_of_itoa:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           indf2	equ	0xFDF
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _utoa *****************
  2953 ;; Defined at:
  2954 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  buf             2    7[COMRAM] PTR unsigned char 
  2957 ;;		 -> USART_Write_Integer@buf(8), OLED_Write_Integer@s(20), 
  2958 ;;  val             2    9[COMRAM] unsigned int 
  2959 ;;  base            2   11[COMRAM] int 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  v               2   13[COMRAM] unsigned int 
  2962 ;;  c               1   15[COMRAM] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  2    7[COMRAM] PTR unsigned char 
  2965 ;; Registers used:
  2966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         6       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:        9 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    1
  2979 ;; This function calls:
  2980 ;;		___lwdiv
  2981 ;;		___lwmod
  2982 ;; This function is called by:
  2983 ;;		_itoa
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text12
  2988  006EE0                     __ptext12:
  2989                           	opt stack 0
  2990  006EE0                     _utoa:
  2991                           	opt stack 27
  2992                           
  2993                           ;incstack = 0
  2994  006EE0  C00A  F00E         	movff	utoa@val,utoa@v
  2995  006EE4  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  2996  006EE8                     l2403:
  2997  006EE8  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  2998  006EEC  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  2999  006EF0  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  3000  006EF4  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  3001  006EF8  EC0D  F035         	call	___lwdiv	;wreg free
  3002  006EFC  C001  F00E         	movff	?___lwdiv,utoa@v
  3003  006F00  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  3004  006F04  4A08               	infsnz	utoa@buf,f,c
  3005  006F06  2A09               	incf	utoa@buf+1,f,c
  3006  006F08  500E               	movf	utoa@v,w,c
  3007  006F0A  100F               	iorwf	utoa@v+1,w,c
  3008  006F0C  A4D8               	btfss	status,2,c
  3009  006F0E  D7EC               	goto	l2403
  3010  006F10  C008  FFD9         	movff	utoa@buf,fsr2l
  3011  006F14  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3012  006F18  0E00               	movlw	0
  3013  006F1A  6EDF               	movwf	indf2,c
  3014  006F1C  0608               	decf	utoa@buf,f,c
  3015  006F1E  A0D8               	btfss	status,0,c
  3016  006F20  0609               	decf	utoa@buf+1,f,c
  3017  006F22                     l2413:
  3018  006F22  C00A  F001         	movff	utoa@val,___lwmod@dividend
  3019  006F26  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  3020  006F2A  C00C  F003         	movff	utoa@base,___lwmod@divisor
  3021  006F2E  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  3022  006F32  EC7B  F034         	call	___lwmod	;wreg free
  3023  006F36  5001               	movf	?___lwmod,w,c
  3024  006F38  6E10               	movwf	utoa@c,c
  3025  006F3A  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  3026  006F3E  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  3027  006F42  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  3028  006F46  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  3029  006F4A  EC0D  F035         	call	___lwdiv	;wreg free
  3030  006F4E  C001  F00A         	movff	?___lwdiv,utoa@val
  3031  006F52  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  3032  006F56  0E09               	movlw	9
  3033  006F58  6410               	cpfsgt	utoa@c,c
  3034  006F5A  D002               	goto	l647
  3035  006F5C  0E07               	movlw	7
  3036  006F5E  2610               	addwf	utoa@c,f,c
  3037  006F60                     l647:
  3038  006F60  0E30               	movlw	48
  3039  006F62  2610               	addwf	utoa@c,f,c
  3040  006F64  C008  FFD9         	movff	utoa@buf,fsr2l
  3041  006F68  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3042  006F6C  C010  FFDF         	movff	utoa@c,indf2
  3043  006F70  0608               	decf	utoa@buf,f,c
  3044  006F72  A0D8               	btfss	status,0,c
  3045  006F74  0609               	decf	utoa@buf+1,f,c
  3046  006F76  500A               	movf	utoa@val,w,c
  3047  006F78  100B               	iorwf	utoa@val+1,w,c
  3048  006F7A  A4D8               	btfss	status,2,c
  3049  006F7C  D7D2               	goto	l2413
  3050                           
  3051                           ;	Return value of _utoa is never used
  3052  006F7E  4A08               	infsnz	utoa@buf,f,c
  3053  006F80  2A09               	incf	utoa@buf+1,f,c
  3054  006F82  0012               	return	
  3055  006F84                     __end_of_utoa:
  3056                           	opt stack 0
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           postinc0	equ	0xFEE
  3062                           wreg	equ	0xFE8
  3063                           indf2	equ	0xFDF
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function ___lwmod *****************
  3069 ;; Defined at:
  3070 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  dividend        2    0[COMRAM] unsigned int 
  3073 ;;  divisor         2    2[COMRAM] unsigned int 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  counter         1    4[COMRAM] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  2    0[COMRAM] unsigned int 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3085 ;;      Params:         4       0       0       0       0       0       0       0       0
  3086 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3088 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3089 ;;Total ram usage:        5 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_utoa
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text13
  3099  0068F6                     __ptext13:
  3100                           	opt stack 0
  3101  0068F6                     ___lwmod:
  3102                           	opt stack 27
  3103                           
  3104                           ;incstack = 0
  3105  0068F6  5003               	movf	___lwmod@divisor,w,c
  3106  0068F8  1004               	iorwf	___lwmod@divisor+1,w,c
  3107  0068FA  B4D8               	btfsc	status,2,c
  3108  0068FC  D018               	goto	l736
  3109  0068FE  0E01               	movlw	1
  3110  006900  6E05               	movwf	___lwmod@counter,c
  3111  006902  D004               	goto	l2103
  3112  006904                     l2101:
  3113  006904  90D8               	bcf	status,0,c
  3114  006906  3603               	rlcf	___lwmod@divisor,f,c
  3115  006908  3604               	rlcf	___lwmod@divisor+1,f,c
  3116  00690A  2A05               	incf	___lwmod@counter,f,c
  3117  00690C                     l2103:
  3118  00690C  AE04               	btfss	___lwmod@divisor+1,7,c
  3119  00690E  D7FA               	goto	l2101
  3120  006910                     l2105:
  3121  006910  5003               	movf	___lwmod@divisor,w,c
  3122  006912  5C01               	subwf	___lwmod@dividend,w,c
  3123  006914  5004               	movf	___lwmod@divisor+1,w,c
  3124  006916  5802               	subwfb	___lwmod@dividend+1,w,c
  3125  006918  A0D8               	btfss	status,0,c
  3126  00691A  D004               	goto	l2109
  3127  00691C  5003               	movf	___lwmod@divisor,w,c
  3128  00691E  5E01               	subwf	___lwmod@dividend,f,c
  3129  006920  5004               	movf	___lwmod@divisor+1,w,c
  3130  006922  5A02               	subwfb	___lwmod@dividend+1,f,c
  3131  006924                     l2109:
  3132  006924  90D8               	bcf	status,0,c
  3133  006926  3204               	rrcf	___lwmod@divisor+1,f,c
  3134  006928  3203               	rrcf	___lwmod@divisor,f,c
  3135  00692A  2E05               	decfsz	___lwmod@counter,f,c
  3136  00692C  D7F1               	goto	l2105
  3137  00692E                     l736:
  3138  00692E  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3139  006932  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3140  006936  0012               	return		;funcret
  3141  006938                     __end_of___lwmod:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           indf2	equ	0xFDF
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function ___lwdiv *****************
  3155 ;; Defined at:
  3156 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  dividend        2    0[COMRAM] unsigned int 
  3159 ;;  divisor         2    2[COMRAM] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  quotient        2    4[COMRAM] unsigned int 
  3162 ;;  counter         1    6[COMRAM] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  2    0[COMRAM] unsigned int 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3172 ;;      Params:         4       0       0       0       0       0       0       0       0
  3173 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3175 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3176 ;;Total ram usage:        7 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_utoa
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text14
  3186  006A1A                     __ptext14:
  3187                           	opt stack 0
  3188  006A1A                     ___lwdiv:
  3189                           	opt stack 27
  3190                           
  3191                           ;incstack = 0
  3192  006A1A  0E00               	movlw	0
  3193  006A1C  6E06               	movwf	___lwdiv@quotient+1,c
  3194  006A1E  0E00               	movlw	0
  3195  006A20  6E05               	movwf	___lwdiv@quotient,c
  3196  006A22  5003               	movf	___lwdiv@divisor,w,c
  3197  006A24  1004               	iorwf	___lwdiv@divisor+1,w,c
  3198  006A26  B4D8               	btfsc	status,2,c
  3199  006A28  D01C               	goto	l726
  3200  006A2A  0E01               	movlw	1
  3201  006A2C  6E07               	movwf	___lwdiv@counter,c
  3202  006A2E  D004               	goto	l2083
  3203  006A30                     l2081:
  3204  006A30  90D8               	bcf	status,0,c
  3205  006A32  3603               	rlcf	___lwdiv@divisor,f,c
  3206  006A34  3604               	rlcf	___lwdiv@divisor+1,f,c
  3207  006A36  2A07               	incf	___lwdiv@counter,f,c
  3208  006A38                     l2083:
  3209  006A38  AE04               	btfss	___lwdiv@divisor+1,7,c
  3210  006A3A  D7FA               	goto	l2081
  3211  006A3C                     l2085:
  3212  006A3C  90D8               	bcf	status,0,c
  3213  006A3E  3605               	rlcf	___lwdiv@quotient,f,c
  3214  006A40  3606               	rlcf	___lwdiv@quotient+1,f,c
  3215  006A42  5003               	movf	___lwdiv@divisor,w,c
  3216  006A44  5C01               	subwf	___lwdiv@dividend,w,c
  3217  006A46  5004               	movf	___lwdiv@divisor+1,w,c
  3218  006A48  5802               	subwfb	___lwdiv@dividend+1,w,c
  3219  006A4A  A0D8               	btfss	status,0,c
  3220  006A4C  D005               	goto	l2093
  3221  006A4E  5003               	movf	___lwdiv@divisor,w,c
  3222  006A50  5E01               	subwf	___lwdiv@dividend,f,c
  3223  006A52  5004               	movf	___lwdiv@divisor+1,w,c
  3224  006A54  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3225  006A56  8005               	bsf	___lwdiv@quotient,0,c
  3226  006A58                     l2093:
  3227  006A58  90D8               	bcf	status,0,c
  3228  006A5A  3204               	rrcf	___lwdiv@divisor+1,f,c
  3229  006A5C  3203               	rrcf	___lwdiv@divisor,f,c
  3230  006A5E  2E07               	decfsz	___lwdiv@counter,f,c
  3231  006A60  D7ED               	goto	l2085
  3232  006A62                     l726:
  3233  006A62  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3234  006A66  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3235  006A6A  0012               	return		;funcret
  3236  006A6C                     __end_of___lwdiv:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           indf2	equ	0xFDF
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function _OLED_Write_Float *****************
  3250 ;; Defined at:
  3251 ;;		line 352 in file "Main.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  f               3   66[COMRAM] float 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  buf11           2   71[COMRAM] PTR unsigned char 
  3256 ;;		 -> ftoa@buf(17), 
  3257 ;;  status          2   69[COMRAM] int 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3267 ;;      Params:         3       0       0       0       0       0       0       0       0
  3268 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3270 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3271 ;;Total ram usage:        7 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    5
  3274 ;; This function calls:
  3275 ;;		_OLED_Write_String
  3276 ;;		_ftoa
  3277 ;; This function is called by:
  3278 ;;		_main
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text15
  3283  00687C                     __ptext15:
  3284                           	opt stack 0
  3285  00687C                     _OLED_Write_Float:
  3286                           	opt stack 25
  3287                           
  3288                           ;Main.c: 354: char* buf11;
  3289                           ;Main.c: 355: int status;
  3290                           ;Main.c: 357: buf11 = ftoa(f, &status);
  3291                           
  3292                           ;incstack = 0
  3293  00687C  C043  F034         	movff	OLED_Write_Float@f,ftoa@f
  3294  006880  C044  F035         	movff	OLED_Write_Float@f+1,ftoa@f+1
  3295  006884  C045  F036         	movff	OLED_Write_Float@f+2,ftoa@f+2
  3296  006888  0E46               	movlw	low OLED_Write_Float@status
  3297  00688A  6E37               	movwf	ftoa@status,c
  3298  00688C  0E00               	movlw	high OLED_Write_Float@status
  3299  00688E  6E38               	movwf	ftoa@status+1,c
  3300  006890  EC3A  F03A         	call	_ftoa	;wreg free
  3301  006894  C034  F048         	movff	?_ftoa,OLED_Write_Float@buf11
  3302  006898  C035  F049         	movff	?_ftoa+1,OLED_Write_Float@buf11+1
  3303                           
  3304                           ;Main.c: 359: OLED_Write_String(buf11);
  3305  00689C  C048  F01F         	movff	OLED_Write_Float@buf11,OLED_Write_String@s
  3306  0068A0  C049  F020         	movff	OLED_Write_Float@buf11+1,OLED_Write_String@s+1
  3307  0068A4  ECE4  F034         	call	_OLED_Write_String	;wreg free
  3308                           
  3309                           ;Main.c: 360: OLED_Write_String( "     " );
  3310  0068A8  0EF2               	movlw	low STR_1
  3311  0068AA  6E1F               	movwf	OLED_Write_String@s,c
  3312  0068AC  0E7F               	movlw	high STR_1
  3313  0068AE  6E20               	movwf	OLED_Write_String@s+1,c
  3314  0068B0  ECE4  F034         	call	_OLED_Write_String	;wreg free
  3315  0068B4  0012               	return		;funcret
  3316  0068B6                     __end_of_OLED_Write_Float:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf2	equ	0xFDF
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _ftoa *****************
  3330 ;; Defined at:
  3331 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftoa.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  f               3   51[COMRAM] float 
  3334 ;;  status          2   54[COMRAM] PTR int 
  3335 ;;		 -> USART_Write_Float@status(2), OLED_Write_Float@status(2), 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  l               4   60[COMRAM] unsigned long 
  3338 ;;  rem             4   56[COMRAM] unsigned long 
  3339 ;;  cp              2   64[COMRAM] PTR unsigned char 
  3340 ;;		 -> ftoa@buf(17), 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  2   51[COMRAM] PTR unsigned char 
  3343 ;; Registers used:
  3344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3350 ;;      Params:         5       0       0       0       0       0       0       0       0
  3351 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3353 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3354 ;;Total ram usage:       15 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    3
  3357 ;; This function calls:
  3358 ;;		___ftmul
  3359 ;;		___ftneg
  3360 ;;		___ftsub
  3361 ;;		___fttol
  3362 ;;		___lltoft
  3363 ;;		_sprintf
  3364 ;; This function is called by:
  3365 ;;		_OLED_Write_Float
  3366 ;;		_USART_Write_Float
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text16
  3371  007474                     __ptext16:
  3372                           	opt stack 0
  3373  007474                     _ftoa:
  3374                           	opt stack 26
  3375                           
  3376                           ;incstack = 0
  3377  007474  0E4F               	movlw	low ftoa@buf
  3378  007476  6E41               	movwf	ftoa@cp,c
  3379  007478  0E00               	movlw	high ftoa@buf
  3380  00747A  6E42               	movwf	ftoa@cp+1,c
  3381  00747C  AE36               	btfss	ftoa@f+2,7,c
  3382  00747E  D016               	goto	l2479
  3383  007480  C041  FFD9         	movff	ftoa@cp,fsr2l
  3384  007484  C042  FFDA         	movff	ftoa@cp+1,fsr2h
  3385  007488  0E2D               	movlw	45
  3386  00748A  6EDF               	movwf	indf2,c
  3387  00748C  4A41               	infsnz	ftoa@cp,f,c
  3388  00748E  2A42               	incf	ftoa@cp+1,f,c
  3389  007490  C034  F001         	movff	ftoa@f,___ftneg@f1
  3390  007494  C035  F002         	movff	ftoa@f+1,___ftneg@f1+1
  3391  007498  C036  F003         	movff	ftoa@f+2,___ftneg@f1+2
  3392  00749C  ECBC  F033         	call	___ftneg	;wreg free
  3393  0074A0  C001  F034         	movff	?___ftneg,ftoa@f
  3394  0074A4  C002  F035         	movff	?___ftneg+1,ftoa@f+1
  3395  0074A8  C003  F036         	movff	?___ftneg+2,ftoa@f+2
  3396  0074AC                     l2479:
  3397  0074AC  C034  F018         	movff	ftoa@f,___fttol@f1
  3398  0074B0  C035  F019         	movff	ftoa@f+1,___fttol@f1+1
  3399  0074B4  C036  F01A         	movff	ftoa@f+2,___fttol@f1+2
  3400  0074B8  ECC0  F039         	call	___fttol	;wreg free
  3401  0074BC  C018  F03D         	movff	?___fttol,ftoa@l
  3402  0074C0  C019  F03E         	movff	?___fttol+1,ftoa@l+1
  3403  0074C4  C01A  F03F         	movff	?___fttol+2,ftoa@l+2
  3404  0074C8  C01B  F040         	movff	?___fttol+3,ftoa@l+3
  3405  0074CC  C034  F02E         	movff	ftoa@f,___ftsub@f1
  3406  0074D0  C035  F02F         	movff	ftoa@f+1,___ftsub@f1+1
  3407  0074D4  C036  F030         	movff	ftoa@f+2,___ftsub@f1+2
  3408  0074D8  C03D  F009         	movff	ftoa@l,___lltoft@c
  3409  0074DC  C03E  F00A         	movff	ftoa@l+1,___lltoft@c+1
  3410  0074E0  C03F  F00B         	movff	ftoa@l+2,___lltoft@c+2
  3411  0074E4  C040  F00C         	movff	ftoa@l+3,___lltoft@c+3
  3412  0074E8  EC36  F035         	call	___lltoft	;wreg free
  3413  0074EC  C009  F031         	movff	?___lltoft,___ftsub@f2
  3414  0074F0  C00A  F032         	movff	?___lltoft+1,___ftsub@f2+1
  3415  0074F4  C00B  F033         	movff	?___lltoft+2,___ftsub@f2+2
  3416  0074F8  EC5B  F034         	call	___ftsub	;wreg free
  3417  0074FC  C02E  F034         	movff	?___ftsub,ftoa@f
  3418  007500  C02F  F035         	movff	?___ftsub+1,ftoa@f+1
  3419  007504  C030  F036         	movff	?___ftsub+2,ftoa@f+2
  3420  007508  0E24               	movlw	36
  3421  00750A  6E0C               	movwf	___ftmul@f2,c
  3422  00750C  0E74               	movlw	116
  3423  00750E  6E0D               	movwf	___ftmul@f2+1,c
  3424  007510  0E49               	movlw	73
  3425  007512  6E0E               	movwf	___ftmul@f2+2,c
  3426  007514  C034  F009         	movff	ftoa@f,___ftmul@f1
  3427  007518  C035  F00A         	movff	ftoa@f+1,___ftmul@f1+1
  3428  00751C  C036  F00B         	movff	ftoa@f+2,___ftmul@f1+2
  3429  007520  EC46  F039         	call	___ftmul	;wreg free
  3430  007524  C009  F018         	movff	?___ftmul,___fttol@f1
  3431  007528  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
  3432  00752C  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
  3433  007530  ECC0  F039         	call	___fttol	;wreg free
  3434  007534  C018  F039         	movff	?___fttol,ftoa@rem
  3435  007538  C019  F03A         	movff	?___fttol+1,ftoa@rem+1
  3436  00753C  C01A  F03B         	movff	?___fttol+2,ftoa@rem+2
  3437  007540  C01B  F03C         	movff	?___fttol+3,ftoa@rem+3
  3438  007544  C041  F017         	movff	ftoa@cp,sprintf@sp
  3439  007548  C042  F018         	movff	ftoa@cp+1,sprintf@sp+1
  3440  00754C  0ED5               	movlw	low STR_10
  3441  00754E  6E19               	movwf	sprintf@f,c
  3442  007550  0E7F               	movlw	high STR_10
  3443  007552  6E1A               	movwf	sprintf@f+1,c
  3444  007554  C03D  F01B         	movff	ftoa@l,?_sprintf+4
  3445  007558  C03E  F01C         	movff	ftoa@l+1,?_sprintf+5
  3446  00755C  C03F  F01D         	movff	ftoa@l+2,?_sprintf+6
  3447  007560  C040  F01E         	movff	ftoa@l+3,?_sprintf+7
  3448  007564  C039  F01F         	movff	ftoa@rem,?_sprintf+8
  3449  007568  C03A  F020         	movff	ftoa@rem+1,?_sprintf+9
  3450  00756C  C03B  F021         	movff	ftoa@rem+2,?_sprintf+10
  3451  007570  C03C  F022         	movff	ftoa@rem+3,?_sprintf+11
  3452  007574  ECA5  F03C         	call	_sprintf	;wreg free
  3453  007578  0E4F               	movlw	low ftoa@buf
  3454  00757A  6E34               	movwf	?_ftoa,c
  3455  00757C  0E00               	movlw	high ftoa@buf
  3456  00757E  6E35               	movwf	?_ftoa+1,c
  3457  007580  0012               	return	
  3458  007582                     __end_of_ftoa:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           postinc0	equ	0xFEE
  3465                           wreg	equ	0xFE8
  3466                           indf2	equ	0xFDF
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _sprintf *****************
  3472 ;; Defined at:
  3473 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  sp              2   22[COMRAM] PTR unsigned char 
  3476 ;;		 -> ftoa@buf(17), 
  3477 ;;  f               2   24[COMRAM] PTR const unsigned char 
  3478 ;;		 -> STR_10(11), 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  val             4   41[COMRAM] unsigned long 
  3481 ;;  tmpval          4    0        struct .
  3482 ;;  cp              3    0        PTR const unsigned char 
  3483 ;;  prec            2   47[COMRAM] int 
  3484 ;;  width           2   45[COMRAM] int 
  3485 ;;  ap              2   39[COMRAM] PTR void [1]
  3486 ;;		 -> ?_sprintf(2), 
  3487 ;;  len             2    0        unsigned int 
  3488 ;;  c               1   49[COMRAM] char 
  3489 ;;  flag            1   38[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  2   22[COMRAM] int 
  3492 ;; Registers used:
  3493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3499 ;;      Params:        12       0       0       0       0       0       0       0       0
  3500 ;;      Locals:        12       0       0       0       0       0       0       0       0
  3501 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3502 ;;      Totals:        28       0       0       0       0       0       0       0       0
  3503 ;;Total ram usage:       28 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    1
  3506 ;; This function calls:
  3507 ;;		___lldiv
  3508 ;;		___llmod
  3509 ;;		___wmul
  3510 ;;		_isdigit
  3511 ;; This function is called by:
  3512 ;;		_ftoa
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text17
  3517  00794A                     __ptext17:
  3518                           	opt stack 0
  3519  00794A                     _sprintf:
  3520                           	opt stack 27
  3521                           
  3522                           ;doprnt.c: 494: va_list ap;
  3523                           ;doprnt.c: 499: signed char c;
  3524                           ;doprnt.c: 501: int width;
  3525                           ;doprnt.c: 504: int prec;
  3526                           ;doprnt.c: 508: unsigned char flag;
  3527                           ;doprnt.c: 523: union {
  3528                           ;doprnt.c: 524: unsigned long vd;
  3529                           ;doprnt.c: 525: double integ;
  3530                           ;doprnt.c: 526: } tmpval;
  3531                           ;doprnt.c: 528: unsigned long val;
  3532                           ;doprnt.c: 529: unsigned len;
  3533                           ;doprnt.c: 530: const char * cp;
  3534                           ;doprnt.c: 533: *ap = __va_start();
  3535                           
  3536                           ;incstack = 0
  3537  00794A  0E1B               	movlw	low (?_sprintf+4)
  3538  00794C  6E28               	movwf	sprintf@ap,c
  3539  00794E  0E00               	movlw	high (?_sprintf+4)
  3540  007950  6E29               	movwf	sprintf@ap+1,c
  3541                           
  3542                           ;doprnt.c: 536: while(c = *f++) {
  3543  007952  D17E               	goto	l2245
  3544  007954                     l2145:
  3545                           
  3546                           ;doprnt.c: 538: if(c != '%')
  3547  007954  0E25               	movlw	37
  3548  007956  1832               	xorwf	sprintf@c,w,c
  3549  007958  B4D8               	btfsc	status,2,c
  3550  00795A  D009               	goto	l2151
  3551                           
  3552                           ;doprnt.c: 540: {
  3553                           ;doprnt.c: 541: ((*sp++ = (c)));
  3554  00795C  C017  FFD9         	movff	sprintf@sp,fsr2l
  3555  007960  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  3556  007964  C032  FFDF         	movff	sprintf@c,indf2
  3557  007968  4A17               	infsnz	sprintf@sp,f,c
  3558  00796A  2A18               	incf	sprintf@sp+1,f,c
  3559                           
  3560                           ;doprnt.c: 542: continue;
  3561  00796C  D171               	goto	l2245
  3562  00796E                     l2151:
  3563                           
  3564                           ;doprnt.c: 543: }
  3565                           ;doprnt.c: 546: width = 0;
  3566  00796E  0E00               	movlw	0
  3567  007970  6E2F               	movwf	sprintf@width+1,c
  3568  007972  0E00               	movlw	0
  3569  007974  6E2E               	movwf	sprintf@width,c
  3570                           
  3571                           ;doprnt.c: 548: flag = 0;
  3572  007976  0E00               	movlw	0
  3573  007978  6E27               	movwf	sprintf@flag,c
  3574                           
  3575                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3576  00797A  C019  FFF6         	movff	sprintf@f,tblptrl
  3577  00797E  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3578  007982                     	if	0	;tblptru may be non-zero
  3579  007982                     	endif
  3580  007982                     	if	0	;tblptru may be non-zero
  3581  007982                     	endif
  3582  007982  0008               	tblrd		*
  3583  007984  50F5               	movf	tablat,w,c
  3584  007986  ECAD  F033         	call	_isdigit
  3585  00798A  A0D8               	btfss	status,0,c
  3586  00798C  D032               	goto	l2165
  3587                           
  3588                           ;doprnt.c: 598: width = 0;
  3589  00798E  0E00               	movlw	0
  3590  007990  6E2F               	movwf	sprintf@width+1,c
  3591  007992  0E00               	movlw	0
  3592  007994  6E2E               	movwf	sprintf@width,c
  3593  007996                     l2157:
  3594                           
  3595                           ;doprnt.c: 600: width *= 10;
  3596  007996  C02E  F001         	movff	sprintf@width,___wmul@multiplier
  3597  00799A  C02F  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  3598  00799E  0E00               	movlw	0
  3599  0079A0  6E04               	movwf	___wmul@multiplicand+1,c
  3600  0079A2  0E0A               	movlw	10
  3601  0079A4  6E03               	movwf	___wmul@multiplicand,c
  3602  0079A6  ECE0  F033         	call	___wmul	;wreg free
  3603  0079AA  C001  F02E         	movff	?___wmul,sprintf@width
  3604  0079AE  C002  F02F         	movff	?___wmul+1,sprintf@width+1
  3605                           
  3606                           ;doprnt.c: 601: width += *f++ - '0';
  3607  0079B2  0ED0               	movlw	208
  3608  0079B4  6E23               	movwf	??_sprintf& (0+255),c
  3609  0079B6  0EFF               	movlw	255
  3610  0079B8  6E24               	movwf	(??_sprintf+1)& (0+255),c
  3611  0079BA  C019  FFF6         	movff	sprintf@f,tblptrl
  3612  0079BE  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3613  0079C2                     	if	0	;tblptru may be non-zero
  3614  0079C2                     	endif
  3615  0079C2                     	if	0	;tblptru may be non-zero
  3616  0079C2                     	endif
  3617  0079C2  0008               	tblrd		*
  3618  0079C4  50F5               	movf	tablat,w,c
  3619  0079C6  6E25               	movwf	(??_sprintf+2)& (0+255),c
  3620  0079C8  6A26               	clrf	(??_sprintf+3)& (0+255),c
  3621  0079CA  5023               	movf	??_sprintf,w,c
  3622  0079CC  2625               	addwf	??_sprintf+2,f,c
  3623  0079CE  5024               	movf	??_sprintf+1,w,c
  3624  0079D0  2226               	addwfc	??_sprintf+3,f,c
  3625  0079D2  5025               	movf	??_sprintf+2,w,c
  3626  0079D4  262E               	addwf	sprintf@width,f,c
  3627  0079D6  5026               	movf	??_sprintf+3,w,c
  3628  0079D8  222F               	addwfc	sprintf@width+1,f,c
  3629  0079DA  4A19               	infsnz	sprintf@f,f,c
  3630  0079DC  2A1A               	incf	sprintf@f+1,f,c
  3631                           
  3632                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3633  0079DE  C019  FFF6         	movff	sprintf@f,tblptrl
  3634  0079E2  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3635  0079E6                     	if	0	;tblptru may be non-zero
  3636  0079E6                     	endif
  3637  0079E6                     	if	0	;tblptru may be non-zero
  3638  0079E6                     	endif
  3639  0079E6  0008               	tblrd		*
  3640  0079E8  50F5               	movf	tablat,w,c
  3641  0079EA  ECAD  F033         	call	_isdigit
  3642  0079EE  B0D8               	btfsc	status,0,c
  3643  0079F0  D7D2               	goto	l2157
  3644  0079F2                     l2165:
  3645                           
  3646                           ;doprnt.c: 608: }
  3647                           ;doprnt.c: 611: if(*f == '.') {
  3648  0079F2  C019  FFF6         	movff	sprintf@f,tblptrl
  3649  0079F6  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3650  0079FA                     	if	0	;tblptru may be non-zero
  3651  0079FA                     	endif
  3652  0079FA                     	if	0	;tblptru may be non-zero
  3653  0079FA                     	endif
  3654  0079FA  0008               	tblrd		*
  3655  0079FC  50F5               	movf	tablat,w,c
  3656  0079FE  0A2E               	xorlw	46
  3657  007A00  A4D8               	btfss	status,2,c
  3658  007A02  D02D               	goto	l2177
  3659                           
  3660                           ;doprnt.c: 613: f++;
  3661  007A04  4A19               	infsnz	sprintf@f,f,c
  3662  007A06  2A1A               	incf	sprintf@f+1,f,c
  3663                           
  3664                           ;doprnt.c: 620: {
  3665                           ;doprnt.c: 621: prec = 0;
  3666  007A08  0E00               	movlw	0
  3667  007A0A  6E31               	movwf	sprintf@prec+1,c
  3668  007A0C  0E00               	movlw	0
  3669  007A0E  6E30               	movwf	sprintf@prec,c
  3670                           
  3671                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3672  007A10  D01B               	goto	l2175
  3673  007A12                     l2171:
  3674                           
  3675                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3676  007A12  C030  F001         	movff	sprintf@prec,___wmul@multiplier
  3677  007A16  C031  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  3678  007A1A  0E00               	movlw	0
  3679  007A1C  6E04               	movwf	___wmul@multiplicand+1,c
  3680  007A1E  0E0A               	movlw	10
  3681  007A20  6E03               	movwf	___wmul@multiplicand,c
  3682  007A22  ECE0  F033         	call	___wmul	;wreg free
  3683  007A26  C019  FFF6         	movff	sprintf@f,tblptrl
  3684  007A2A  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3685  007A2E                     	if	0	;tblptru may be non-zero
  3686  007A2E                     	endif
  3687  007A2E                     	if	0	;tblptru may be non-zero
  3688  007A2E                     	endif
  3689  007A2E  0008               	tblrd		*
  3690  007A30  50F5               	movf	tablat,w,c
  3691  007A32  2601               	addwf	?___wmul,f,c
  3692  007A34  0E00               	movlw	0
  3693  007A36  2202               	addwfc	?___wmul+1,f,c
  3694  007A38  0ED0               	movlw	208
  3695  007A3A  2401               	addwf	?___wmul,w,c
  3696  007A3C  6E30               	movwf	sprintf@prec,c
  3697  007A3E  0EFF               	movlw	255
  3698  007A40  2002               	addwfc	?___wmul+1,w,c
  3699  007A42  6E31               	movwf	sprintf@prec+1,c
  3700  007A44  4A19               	infsnz	sprintf@f,f,c
  3701  007A46  2A1A               	incf	sprintf@f+1,f,c
  3702  007A48                     l2175:
  3703  007A48  C019  FFF6         	movff	sprintf@f,tblptrl
  3704  007A4C  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3705  007A50                     	if	0	;tblptru may be non-zero
  3706  007A50                     	endif
  3707  007A50                     	if	0	;tblptru may be non-zero
  3708  007A50                     	endif
  3709  007A50  0008               	tblrd		*
  3710  007A52  50F5               	movf	tablat,w,c
  3711  007A54  ECAD  F033         	call	_isdigit
  3712  007A58  A0D8               	btfss	status,0,c
  3713  007A5A  D00B               	goto	l2185
  3714  007A5C  D7DA               	goto	l2171
  3715  007A5E                     l2177:
  3716                           
  3717                           ;doprnt.c: 626: prec = 0;
  3718  007A5E  0E00               	movlw	0
  3719  007A60  6E31               	movwf	sprintf@prec+1,c
  3720  007A62  0E00               	movlw	0
  3721  007A64  6E30               	movwf	sprintf@prec,c
  3722                           
  3723                           ;doprnt.c: 635: switch(c = *f++) {
  3724                           
  3725                           ;doprnt.c: 630: }
  3726                           ;doprnt.c: 633: loop:
  3727  007A66  D005               	goto	l2185
  3728  007A68                     l2179:
  3729                           
  3730                           ;doprnt.c: 643: flag |= 0x10;
  3731  007A68  8827               	bsf	sprintf@flag,4,c
  3732                           
  3733                           ;doprnt.c: 644: goto loop;
  3734  007A6A  D003               	goto	l2185
  3735  007A6C                     l2181:
  3736                           
  3737                           ;doprnt.c: 818: flag |= 0xC0;
  3738  007A6C  0EC0               	movlw	192
  3739  007A6E  1227               	iorwf	sprintf@flag,f,c
  3740                           
  3741                           ;doprnt.c: 822: }
  3742                           
  3743                           ;doprnt.c: 819: break;
  3744  007A70  D014               	goto	l277
  3745  007A72                     l2185:
  3746  007A72  C019  FFF6         	movff	sprintf@f,tblptrl
  3747  007A76  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  3748  007A7A  4A19               	infsnz	sprintf@f,f,c
  3749  007A7C  2A1A               	incf	sprintf@f+1,f,c
  3750  007A7E                     	if	0	;tblptru may be non-zero
  3751  007A7E                     	endif
  3752  007A7E                     	if	0	;tblptru may be non-zero
  3753  007A7E                     	endif
  3754  007A7E  0008               	tblrd		*
  3755  007A80  CFF5 F032          	movff	tablat,sprintf@c
  3756  007A84  5032               	movf	sprintf@c,w,c
  3757                           
  3758                           ; Switch size 1, requested type "space"
  3759                           ; Number of cases is 3, Range of values is 0 to 117
  3760                           ; switch strategies available:
  3761                           ; Name         Instructions Cycles
  3762                           ; simple_byte           10     6 (average)
  3763                           ;	Chosen strategy is simple_byte
  3764  007A86  0A00               	xorlw	0	; case 0
  3765  007A88  B4D8               	btfsc	status,2,c
  3766  007A8A  D0EE               	goto	l2247
  3767  007A8C  0A6C               	xorlw	108	; case 108
  3768  007A8E  B4D8               	btfsc	status,2,c
  3769  007A90  D7EB               	goto	l2179
  3770  007A92  0A19               	xorlw	25	; case 117
  3771  007A94  B4D8               	btfsc	status,2,c
  3772  007A96  D7EA               	goto	l2181
  3773  007A98  D0DB               	goto	l2245
  3774  007A9A                     l277:
  3775                           
  3776                           ;doprnt.c: 1273: {
  3777                           ;doprnt.c: 1281: if(flag & 0x10)
  3778  007A9A  A827               	btfss	sprintf@flag,4,c
  3779  007A9C  D00E               	goto	l2191
  3780                           
  3781                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3782  007A9E  C028  FFD9         	movff	sprintf@ap,fsr2l
  3783  007AA2  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  3784  007AA6  CFDE F02A          	movff	postinc2,sprintf@val
  3785  007AAA  CFDE F02B          	movff	postinc2,sprintf@val+1
  3786  007AAE  CFDE F02C          	movff	postinc2,sprintf@val+2
  3787  007AB2  CFDE F02D          	movff	postinc2,sprintf@val+3
  3788  007AB6  0E04               	movlw	4
  3789  007AB8  D00F               	goto	L2
  3790  007ABA                     l2191:
  3791                           
  3792                           ;doprnt.c: 1283: else
  3793                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3794  007ABA  C028  FFD9         	movff	sprintf@ap,fsr2l
  3795  007ABE  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  3796  007AC2  CFDE F023          	movff	postinc2,??_sprintf
  3797  007AC6  CFDD F024          	movff	postdec2,??_sprintf+1
  3798  007ACA  C023  F02A         	movff	??_sprintf,sprintf@val
  3799  007ACE  C024  F02B         	movff	??_sprintf+1,sprintf@val+1
  3800  007AD2  6A2C               	clrf	sprintf@val+2,c
  3801  007AD4  6A2D               	clrf	sprintf@val+3,c
  3802  007AD6  0E02               	movlw	2
  3803  007AD8                     L2:
  3804  007AD8  2628               	addwf	sprintf@ap,f,c
  3805  007ADA  0E00               	movlw	0
  3806  007ADC  2229               	addwfc	sprintf@ap+1,f,c
  3807                           
  3808                           ;doprnt.c: 1287: }
  3809                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3810  007ADE  5030               	movf	sprintf@prec,w,c
  3811  007AE0  1031               	iorwf	sprintf@prec+1,w,c
  3812  007AE2  A4D8               	btfss	status,2,c
  3813  007AE4  D008               	goto	l2201
  3814  007AE6  502A               	movf	sprintf@val,w,c
  3815  007AE8  102B               	iorwf	sprintf@val+1,w,c
  3816  007AEA  102C               	iorwf	sprintf@val+2,w,c
  3817  007AEC  102D               	iorwf	sprintf@val+3,w,c
  3818  007AEE  A4D8               	btfss	status,2,c
  3819  007AF0  D002               	goto	l2201
  3820                           
  3821                           ;doprnt.c: 1291: prec++;
  3822  007AF2  4A30               	infsnz	sprintf@prec,f,c
  3823  007AF4  2A31               	incf	sprintf@prec+1,f,c
  3824  007AF6                     l2201:
  3825                           
  3826                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3827  007AF6  0E01               	movlw	1
  3828  007AF8  6E32               	movwf	sprintf@c,c
  3829  007AFA                     l2203:
  3830  007AFA  0E0A               	movlw	10
  3831  007AFC  1832               	xorwf	sprintf@c,w,c
  3832  007AFE  B4D8               	btfsc	status,2,c
  3833  007B00  D018               	goto	l2215
  3834                           
  3835                           ;doprnt.c: 1306: if(val < dpowers[c])
  3836  007B02  5032               	movf	sprintf@c,w,c
  3837  007B04  0D04               	mullw	4
  3838  007B06  0E77               	movlw	low _dpowers
  3839  007B08  24F3               	addwf	prodl,w,c
  3840  007B0A  6EF6               	movwf	tblptrl,c
  3841  007B0C  0E7C               	movlw	high _dpowers
  3842  007B0E  20F4               	addwfc	prodh,w,c
  3843  007B10  6EF7               	movwf	tblptrh,c
  3844  007B12                     	if	0	;There are less than 3 active tblptr bytes
  3845  007B12                     	endif
  3846  007B12  0009               	tblrd		*+
  3847  007B14  50F5               	movf	tablat,w,c
  3848  007B16  5C2A               	subwf	sprintf@val,w,c
  3849  007B18  0009               	tblrd		*+
  3850  007B1A  50F5               	movf	tablat,w,c
  3851  007B1C  582B               	subwfb	sprintf@val+1,w,c
  3852  007B1E  0009               	tblrd		*+
  3853  007B20  50F5               	movf	tablat,w,c
  3854  007B22  582C               	subwfb	sprintf@val+2,w,c
  3855  007B24  0009               	tblrd		*+
  3856  007B26  50F5               	movf	tablat,w,c
  3857  007B28  582D               	subwfb	sprintf@val+3,w,c
  3858  007B2A  A0D8               	btfss	status,0,c
  3859  007B2C  D002               	goto	l2215
  3860                           
  3861                           ;doprnt.c: 1307: break;
  3862  007B2E  2A32               	incf	sprintf@c,f,c
  3863  007B30  D7E4               	goto	l2203
  3864  007B32                     l2215:
  3865                           
  3866                           ;doprnt.c: 1339: if(c < prec)
  3867  007B32  0E80               	movlw	128
  3868  007B34  BE32               	btfsc	sprintf@c,7,c
  3869  007B36  0E7F               	movlw	127
  3870  007B38  6E23               	movwf	??_sprintf& (0+255),c
  3871  007B3A  5030               	movf	sprintf@prec,w,c
  3872  007B3C  5C32               	subwf	sprintf@c,w,c
  3873  007B3E  5031               	movf	sprintf@prec+1,w,c
  3874  007B40  0A80               	xorlw	128
  3875  007B42  5823               	subwfb	??_sprintf& (0+255),w,c
  3876  007B44  B0D8               	btfsc	status,0,c
  3877  007B46  D003               	goto	l2219
  3878                           
  3879                           ;doprnt.c: 1340: c = prec;
  3880  007B48  C030  F032         	movff	sprintf@prec,sprintf@c
  3881  007B4C  D010               	goto	l2223
  3882  007B4E                     l2219:
  3883                           
  3884                           ;doprnt.c: 1341: else if(prec < c)
  3885  007B4E  5031               	movf	sprintf@prec+1,w,c
  3886  007B50  0A80               	xorlw	128
  3887  007B52  6E23               	movwf	??_sprintf& (0+255),c
  3888  007B54  5032               	movf	sprintf@c,w,c
  3889  007B56  5C30               	subwf	sprintf@prec,w,c
  3890  007B58  0E80               	movlw	128
  3891  007B5A  BE32               	btfsc	sprintf@c,7,c
  3892  007B5C  0E7F               	movlw	127
  3893  007B5E  5823               	subwfb	??_sprintf& (0+255),w,c
  3894  007B60  B0D8               	btfsc	status,0,c
  3895  007B62  D005               	goto	l2223
  3896                           
  3897                           ;doprnt.c: 1342: prec = c;
  3898  007B64  5032               	movf	sprintf@c,w,c
  3899  007B66  6E30               	movwf	sprintf@prec,c
  3900  007B68  6A31               	clrf	sprintf@prec+1,c
  3901  007B6A  BE30               	btfsc	sprintf@prec,7,c
  3902  007B6C  0631               	decf	sprintf@prec+1,f,c
  3903  007B6E                     l2223:
  3904                           
  3905                           ;doprnt.c: 1381: if(width > c)
  3906  007B6E  0E80               	movlw	128
  3907  007B70  BE32               	btfsc	sprintf@c,7,c
  3908  007B72  0E7F               	movlw	127
  3909  007B74  6E23               	movwf	??_sprintf& (0+255),c
  3910  007B76  502E               	movf	sprintf@width,w,c
  3911  007B78  5C32               	subwf	sprintf@c,w,c
  3912  007B7A  502F               	movf	sprintf@width+1,w,c
  3913  007B7C  0A80               	xorlw	128
  3914  007B7E  5823               	subwfb	??_sprintf& (0+255),w,c
  3915  007B80  B0D8               	btfsc	status,0,c
  3916  007B82  D007               	goto	l2227
  3917                           
  3918                           ;doprnt.c: 1382: width -= c;
  3919  007B84  5032               	movf	sprintf@c,w,c
  3920  007B86  5E2E               	subwf	sprintf@width,f,c
  3921  007B88  0E00               	movlw	0
  3922  007B8A  BE32               	btfsc	sprintf@c,7,c
  3923  007B8C  0EFF               	movlw	255
  3924  007B8E  5A2F               	subwfb	sprintf@width+1,f,c
  3925  007B90  D004               	goto	l2229
  3926  007B92                     l2227:
  3927                           
  3928                           ;doprnt.c: 1383: else
  3929                           ;doprnt.c: 1384: width = 0;
  3930  007B92  0E00               	movlw	0
  3931  007B94  6E2F               	movwf	sprintf@width+1,c
  3932  007B96  0E00               	movlw	0
  3933  007B98  6E2E               	movwf	sprintf@width,c
  3934  007B9A                     l2229:
  3935                           
  3936                           ;doprnt.c: 1422: {
  3937                           ;doprnt.c: 1424: if(width
  3938                           ;doprnt.c: 1428: )
  3939  007B9A  502E               	movf	sprintf@width,w,c
  3940  007B9C  102F               	iorwf	sprintf@width+1,w,c
  3941  007B9E  B4D8               	btfsc	status,2,c
  3942  007BA0  D04F               	goto	l2243
  3943                           
  3944                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3945                           
  3946                           ;doprnt.c: 1429: do
  3947  007BA2  C017  FFD9         	movff	sprintf@sp,fsr2l
  3948  007BA6  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  3949  007BAA  0E20               	movlw	32
  3950  007BAC  6EDF               	movwf	indf2,c
  3951  007BAE  4A17               	infsnz	sprintf@sp,f,c
  3952  007BB0  2A18               	incf	sprintf@sp+1,f,c
  3953                           
  3954                           ;doprnt.c: 1431: while(--width);
  3955  007BB2  062E               	decf	sprintf@width,f,c
  3956  007BB4  A0D8               	btfss	status,0,c
  3957  007BB6  062F               	decf	sprintf@width+1,f,c
  3958  007BB8  D7F0               	goto	l2229
  3959  007BBA                     l2237:
  3960                           
  3961                           ;doprnt.c: 1478: {
  3962                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3963  007BBA  C030  F023         	movff	sprintf@prec,??_sprintf
  3964  007BBE  C031  F024         	movff	sprintf@prec+1,??_sprintf+1
  3965  007BC2  90D8               	bcf	status,0,c
  3966  007BC4  3623               	rlcf	??_sprintf,f,c
  3967  007BC6  3624               	rlcf	??_sprintf+1,f,c
  3968  007BC8  90D8               	bcf	status,0,c
  3969  007BCA  3623               	rlcf	??_sprintf,f,c
  3970  007BCC  3624               	rlcf	??_sprintf+1,f,c
  3971  007BCE  0E77               	movlw	low _dpowers
  3972  007BD0  2423               	addwf	??_sprintf,w,c
  3973  007BD2  6EF6               	movwf	tblptrl,c
  3974  007BD4  0E7C               	movlw	high _dpowers
  3975  007BD6  2024               	addwfc	??_sprintf+1,w,c
  3976  007BD8  6EF7               	movwf	tblptrh,c
  3977  007BDA                     	if	0	;There are less than 3 active tblptr bytes
  3978  007BDA                     	endif
  3979  007BDA  0009               	tblrd		*+
  3980  007BDC  CFF5 F005          	movff	tablat,___lldiv@divisor
  3981  007BE0  0009               	tblrd		*+
  3982  007BE2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3983  007BE6  0009               	tblrd		*+
  3984  007BE8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3985  007BEC  000A               	tblrd		*-
  3986  007BEE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3987  007BF2  C02A  F001         	movff	sprintf@val,___lldiv@dividend
  3988  007BF6  C02B  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3989  007BFA  C02C  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3990  007BFE  C02D  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3991  007C02  EC49  F036         	call	___lldiv	;wreg free
  3992  007C06  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3993  007C0A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3994  007C0E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3995  007C12  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3996  007C16  0E0A               	movlw	10
  3997  007C18  6E12               	movwf	___llmod@divisor,c
  3998  007C1A  0E00               	movlw	0
  3999  007C1C  6E13               	movwf	___llmod@divisor+1,c
  4000  007C1E  0E00               	movlw	0
  4001  007C20  6E14               	movwf	___llmod@divisor+2,c
  4002  007C22  0E00               	movlw	0
  4003  007C24  6E15               	movwf	___llmod@divisor+3,c
  4004  007C26  EC64  F035         	call	___llmod	;wreg free
  4005  007C2A  500E               	movf	?___llmod,w,c
  4006  007C2C  0F30               	addlw	48
  4007  007C2E  6E32               	movwf	sprintf@c,c
  4008                           
  4009                           ;doprnt.c: 1523: }
  4010                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4011  007C30  C017  FFD9         	movff	sprintf@sp,fsr2l
  4012  007C34  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4013  007C38  C032  FFDF         	movff	sprintf@c,indf2
  4014  007C3C  4A17               	infsnz	sprintf@sp,f,c
  4015  007C3E  2A18               	incf	sprintf@sp+1,f,c
  4016  007C40                     l2243:
  4017  007C40  0630               	decf	sprintf@prec,f,c
  4018  007C42  A0D8               	btfss	status,0,c
  4019  007C44  0631               	decf	sprintf@prec+1,f,c
  4020  007C46  2830               	incf	sprintf@prec,w,c
  4021  007C48  E1B8               	bnz	l2237
  4022  007C4A  2831               	incf	sprintf@prec+1,w,c
  4023  007C4C  A4D8               	btfss	status,2,c
  4024  007C4E  D7B5               	goto	l2237
  4025  007C50                     l2245:
  4026  007C50  C019  FFF6         	movff	sprintf@f,tblptrl
  4027  007C54  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4028  007C58  4A19               	infsnz	sprintf@f,f,c
  4029  007C5A  2A1A               	incf	sprintf@f+1,f,c
  4030  007C5C                     	if	0	;tblptru may be non-zero
  4031  007C5C                     	endif
  4032  007C5C                     	if	0	;tblptru may be non-zero
  4033  007C5C                     	endif
  4034  007C5C  0008               	tblrd		*
  4035  007C5E  CFF5 F032          	movff	tablat,sprintf@c
  4036  007C62  5032               	movf	sprintf@c,w,c
  4037  007C64  A4D8               	btfss	status,2,c
  4038  007C66  D676               	goto	l2145
  4039  007C68                     l2247:
  4040                           
  4041                           ;doprnt.c: 1538: *sp = 0;
  4042  007C68  C017  FFD9         	movff	sprintf@sp,fsr2l
  4043  007C6C  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4044  007C70  0E00               	movlw	0
  4045  007C72  6EDF               	movwf	indf2,c
  4046  007C74  0012               	return	
  4047  007C76                     __end_of_sprintf:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _isdigit *****************
  4065 ;; Defined at:
  4066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  c               1    wreg     unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  c               1    2[COMRAM] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;		None               void
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0
  4081 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4082 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4083 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4084 ;;Total ram usage:        3 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_sprintf
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text18
  4094  00675A                     __ptext18:
  4095                           	opt stack 0
  4096  00675A                     _isdigit:
  4097                           	opt stack 27
  4098                           
  4099                           ;incstack = 0
  4100                           ;isdigit@c stored from wreg
  4101  00675A  6E03               	movwf	isdigit@c,c
  4102  00675C  0E00               	movlw	0
  4103  00675E  6E02               	movwf	_isdigit$752,c
  4104  006760  0E3A               	movlw	58
  4105  006762  6003               	cpfslt	isdigit@c,c
  4106  006764  D005               	goto	l1957
  4107  006766  0E2F               	movlw	47
  4108  006768  6403               	cpfsgt	isdigit@c,c
  4109  00676A  D002               	goto	l1957
  4110  00676C  0E01               	movlw	1
  4111  00676E  6E02               	movwf	_isdigit$752,c
  4112  006770                     l1957:
  4113  006770  C002  F001         	movff	_isdigit$752,??_isdigit
  4114  006774  3001               	rrcf	??_isdigit,w,c
  4115  006776  0012               	return	
  4116  006778                     __end_of_isdigit:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function ___wmul *****************
  4134 ;; Defined at:
  4135 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  multiplier      2    0[COMRAM] unsigned int 
  4138 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  product         2    4[COMRAM] unsigned int 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  2    0[COMRAM] unsigned int 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, prodl, prodh
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         4       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4153 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:        6 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; This function calls:
  4157 ;;		Nothing
  4158 ;; This function is called by:
  4159 ;;		_sprintf
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text19
  4164  0067C0                     __ptext19:
  4165                           	opt stack 0
  4166  0067C0                     ___wmul:
  4167                           	opt stack 27
  4168                           
  4169                           ;incstack = 0
  4170  0067C0  5001               	movf	___wmul@multiplier,w,c
  4171  0067C2  0203               	mulwf	___wmul@multiplicand,c
  4172  0067C4  CFF3 F005          	movff	prodl,___wmul@product
  4173  0067C8  CFF4 F006          	movff	prodh,___wmul@product+1
  4174  0067CC  5001               	movf	___wmul@multiplier,w,c
  4175  0067CE  0204               	mulwf	___wmul@multiplicand+1,c
  4176  0067D0  50F3               	movf	prodl,w,c
  4177  0067D2  2606               	addwf	___wmul@product+1,f,c
  4178  0067D4  5002               	movf	___wmul@multiplier+1,w,c
  4179  0067D6  0203               	mulwf	___wmul@multiplicand,c
  4180  0067D8  50F3               	movf	prodl,w,c
  4181  0067DA  2606               	addwf	___wmul@product+1,f,c
  4182  0067DC  C005  F001         	movff	___wmul@product,?___wmul
  4183  0067E0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4184  0067E4  0012               	return	
  4185  0067E6                     __end_of___wmul:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function ___llmod *****************
  4203 ;; Defined at:
  4204 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  dividend        4   13[COMRAM] unsigned long 
  4207 ;;  divisor         4   17[COMRAM] unsigned long 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  counter         1   21[COMRAM] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  4   13[COMRAM] unsigned long 
  4212 ;; Registers used:
  4213 ;;		wreg, status,2, status,0
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4219 ;;      Params:         8       0       0       0       0       0       0       0       0
  4220 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4222 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4223 ;;Total ram usage:        9 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_sprintf
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text20
  4233  006AC8                     __ptext20:
  4234                           	opt stack 0
  4235  006AC8                     ___llmod:
  4236                           	opt stack 27
  4237                           
  4238                           ;incstack = 0
  4239  006AC8  5012               	movf	___llmod@divisor,w,c
  4240  006ACA  1013               	iorwf	___llmod@divisor+1,w,c
  4241  006ACC  1014               	iorwf	___llmod@divisor+2,w,c
  4242  006ACE  1015               	iorwf	___llmod@divisor+3,w,c
  4243  006AD0  B4D8               	btfsc	status,2,c
  4244  006AD2  D024               	goto	l683
  4245  006AD4  0E01               	movlw	1
  4246  006AD6  6E16               	movwf	___llmod@counter,c
  4247  006AD8  D006               	goto	l2065
  4248  006ADA                     l2063:
  4249  006ADA  90D8               	bcf	status,0,c
  4250  006ADC  3612               	rlcf	___llmod@divisor,f,c
  4251  006ADE  3613               	rlcf	___llmod@divisor+1,f,c
  4252  006AE0  3614               	rlcf	___llmod@divisor+2,f,c
  4253  006AE2  3615               	rlcf	___llmod@divisor+3,f,c
  4254  006AE4  2A16               	incf	___llmod@counter,f,c
  4255  006AE6                     l2065:
  4256  006AE6  AE15               	btfss	___llmod@divisor+3,7,c
  4257  006AE8  D7F8               	goto	l2063
  4258  006AEA                     l2067:
  4259  006AEA  5012               	movf	___llmod@divisor,w,c
  4260  006AEC  5C0E               	subwf	___llmod@dividend,w,c
  4261  006AEE  5013               	movf	___llmod@divisor+1,w,c
  4262  006AF0  580F               	subwfb	___llmod@dividend+1,w,c
  4263  006AF2  5014               	movf	___llmod@divisor+2,w,c
  4264  006AF4  5810               	subwfb	___llmod@dividend+2,w,c
  4265  006AF6  5015               	movf	___llmod@divisor+3,w,c
  4266  006AF8  5811               	subwfb	___llmod@dividend+3,w,c
  4267  006AFA  A0D8               	btfss	status,0,c
  4268  006AFC  D008               	goto	l2071
  4269  006AFE  5012               	movf	___llmod@divisor,w,c
  4270  006B00  5E0E               	subwf	___llmod@dividend,f,c
  4271  006B02  5013               	movf	___llmod@divisor+1,w,c
  4272  006B04  5A0F               	subwfb	___llmod@dividend+1,f,c
  4273  006B06  5014               	movf	___llmod@divisor+2,w,c
  4274  006B08  5A10               	subwfb	___llmod@dividend+2,f,c
  4275  006B0A  5015               	movf	___llmod@divisor+3,w,c
  4276  006B0C  5A11               	subwfb	___llmod@dividend+3,f,c
  4277  006B0E                     l2071:
  4278  006B0E  90D8               	bcf	status,0,c
  4279  006B10  3215               	rrcf	___llmod@divisor+3,f,c
  4280  006B12  3214               	rrcf	___llmod@divisor+2,f,c
  4281  006B14  3213               	rrcf	___llmod@divisor+1,f,c
  4282  006B16  3212               	rrcf	___llmod@divisor,f,c
  4283  006B18  2E16               	decfsz	___llmod@counter,f,c
  4284  006B1A  D7E7               	goto	l2067
  4285  006B1C                     l683:
  4286  006B1C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4287  006B20  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4288  006B24  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4289  006B28  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4290  006B2C  0012               	return		;funcret
  4291  006B2E                     __end_of___llmod:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function ___lldiv *****************
  4309 ;; Defined at:
  4310 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  dividend        4    0[COMRAM] unsigned long 
  4313 ;;  divisor         4    4[COMRAM] unsigned long 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  quotient        4    8[COMRAM] unsigned long 
  4316 ;;  counter         1   12[COMRAM] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  4    0[COMRAM] unsigned long 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4326 ;;      Params:         8       0       0       0       0       0       0       0       0
  4327 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4329 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4330 ;;Total ram usage:       13 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_sprintf
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text21
  4340  006C92                     __ptext21:
  4341                           	opt stack 0
  4342  006C92                     ___lldiv:
  4343                           	opt stack 27
  4344                           
  4345                           ;incstack = 0
  4346  006C92  0E00               	movlw	0
  4347  006C94  6E09               	movwf	___lldiv@quotient,c
  4348  006C96  0E00               	movlw	0
  4349  006C98  6E0A               	movwf	___lldiv@quotient+1,c
  4350  006C9A  0E00               	movlw	0
  4351  006C9C  6E0B               	movwf	___lldiv@quotient+2,c
  4352  006C9E  0E00               	movlw	0
  4353  006CA0  6E0C               	movwf	___lldiv@quotient+3,c
  4354  006CA2  5005               	movf	___lldiv@divisor,w,c
  4355  006CA4  1006               	iorwf	___lldiv@divisor+1,w,c
  4356  006CA6  1007               	iorwf	___lldiv@divisor+2,w,c
  4357  006CA8  1008               	iorwf	___lldiv@divisor+3,w,c
  4358  006CAA  B4D8               	btfsc	status,2,c
  4359  006CAC  D02A               	goto	l673
  4360  006CAE  0E01               	movlw	1
  4361  006CB0  6E0D               	movwf	___lldiv@counter,c
  4362  006CB2  D006               	goto	l2045
  4363  006CB4                     l2043:
  4364  006CB4  90D8               	bcf	status,0,c
  4365  006CB6  3605               	rlcf	___lldiv@divisor,f,c
  4366  006CB8  3606               	rlcf	___lldiv@divisor+1,f,c
  4367  006CBA  3607               	rlcf	___lldiv@divisor+2,f,c
  4368  006CBC  3608               	rlcf	___lldiv@divisor+3,f,c
  4369  006CBE  2A0D               	incf	___lldiv@counter,f,c
  4370  006CC0                     l2045:
  4371  006CC0  AE08               	btfss	___lldiv@divisor+3,7,c
  4372  006CC2  D7F8               	goto	l2043
  4373  006CC4                     l2047:
  4374  006CC4  90D8               	bcf	status,0,c
  4375  006CC6  3609               	rlcf	___lldiv@quotient,f,c
  4376  006CC8  360A               	rlcf	___lldiv@quotient+1,f,c
  4377  006CCA  360B               	rlcf	___lldiv@quotient+2,f,c
  4378  006CCC  360C               	rlcf	___lldiv@quotient+3,f,c
  4379  006CCE  5005               	movf	___lldiv@divisor,w,c
  4380  006CD0  5C01               	subwf	___lldiv@dividend,w,c
  4381  006CD2  5006               	movf	___lldiv@divisor+1,w,c
  4382  006CD4  5802               	subwfb	___lldiv@dividend+1,w,c
  4383  006CD6  5007               	movf	___lldiv@divisor+2,w,c
  4384  006CD8  5803               	subwfb	___lldiv@dividend+2,w,c
  4385  006CDA  5008               	movf	___lldiv@divisor+3,w,c
  4386  006CDC  5804               	subwfb	___lldiv@dividend+3,w,c
  4387  006CDE  A0D8               	btfss	status,0,c
  4388  006CE0  D009               	goto	l2055
  4389  006CE2  5005               	movf	___lldiv@divisor,w,c
  4390  006CE4  5E01               	subwf	___lldiv@dividend,f,c
  4391  006CE6  5006               	movf	___lldiv@divisor+1,w,c
  4392  006CE8  5A02               	subwfb	___lldiv@dividend+1,f,c
  4393  006CEA  5007               	movf	___lldiv@divisor+2,w,c
  4394  006CEC  5A03               	subwfb	___lldiv@dividend+2,f,c
  4395  006CEE  5008               	movf	___lldiv@divisor+3,w,c
  4396  006CF0  5A04               	subwfb	___lldiv@dividend+3,f,c
  4397  006CF2  8009               	bsf	___lldiv@quotient,0,c
  4398  006CF4                     l2055:
  4399  006CF4  90D8               	bcf	status,0,c
  4400  006CF6  3208               	rrcf	___lldiv@divisor+3,f,c
  4401  006CF8  3207               	rrcf	___lldiv@divisor+2,f,c
  4402  006CFA  3206               	rrcf	___lldiv@divisor+1,f,c
  4403  006CFC  3205               	rrcf	___lldiv@divisor,f,c
  4404  006CFE  2E0D               	decfsz	___lldiv@counter,f,c
  4405  006D00  D7E1               	goto	l2047
  4406  006D02                     l673:
  4407  006D02  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4408  006D06  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4409  006D0A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4410  006D0E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4411  006D12  0012               	return		;funcret
  4412  006D14                     __end_of___lldiv:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           prodh	equ	0xFF4
  4419                           prodl	equ	0xFF3
  4420                           postinc0	equ	0xFEE
  4421                           wreg	equ	0xFE8
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___lltoft *****************
  4430 ;; Defined at:
  4431 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  c               4    8[COMRAM] unsigned long 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  exp             1   16[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  3    8[COMRAM] float 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0, cstack
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4445 ;;      Params:         4       0       0       0       0       0       0       0       0
  4446 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4447 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4448 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4449 ;;Total ram usage:        9 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    1
  4452 ;; This function calls:
  4453 ;;		___ftpack
  4454 ;; This function is called by:
  4455 ;;		_ftoa
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text22
  4460  006A6C                     __ptext22:
  4461                           	opt stack 0
  4462  006A6C                     ___lltoft:
  4463                           	opt stack 27
  4464                           
  4465                           ;incstack = 0
  4466  006A6C  0E8E               	movlw	142
  4467  006A6E  6E11               	movwf	___lltoft@exp,c
  4468  006A70  D006               	goto	l2435
  4469  006A72                     l2433:
  4470  006A72  90D8               	bcf	status,0,c
  4471  006A74  320C               	rrcf	___lltoft@c+3,f,c
  4472  006A76  320B               	rrcf	___lltoft@c+2,f,c
  4473  006A78  320A               	rrcf	___lltoft@c+1,f,c
  4474  006A7A  3209               	rrcf	___lltoft@c,f,c
  4475  006A7C  2A11               	incf	___lltoft@exp,f,c
  4476  006A7E                     l2435:
  4477  006A7E  0E00               	movlw	0
  4478  006A80  1409               	andwf	___lltoft@c,w,c
  4479  006A82  6E0D               	movwf	??___lltoft& (0+255),c
  4480  006A84  0E00               	movlw	0
  4481  006A86  140A               	andwf	___lltoft@c+1,w,c
  4482  006A88  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4483  006A8A  0E00               	movlw	0
  4484  006A8C  140B               	andwf	___lltoft@c+2,w,c
  4485  006A8E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4486  006A90  0EFF               	movlw	255
  4487  006A92  140C               	andwf	___lltoft@c+3,w,c
  4488  006A94  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4489  006A96  500D               	movf	??___lltoft,w,c
  4490  006A98  100E               	iorwf	??___lltoft+1,w,c
  4491  006A9A  100F               	iorwf	??___lltoft+2,w,c
  4492  006A9C  1010               	iorwf	??___lltoft+3,w,c
  4493  006A9E  A4D8               	btfss	status,2,c
  4494  006AA0  D7E8               	goto	l2433
  4495  006AA2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4496  006AA6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4497  006AAA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4498  006AAE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4499  006AB2  0E00               	movlw	0
  4500  006AB4  6E05               	movwf	___ftpack@sign,c
  4501  006AB6  EC16  F038         	call	___ftpack	;wreg free
  4502  006ABA  C001  F009         	movff	?___ftpack,?___lltoft
  4503  006ABE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4504  006AC2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4505  006AC6  0012               	return	
  4506  006AC8                     __end_of___lltoft:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           postdec2	equ	0xFDD
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function ___fttol *****************
  4524 ;; Defined at:
  4525 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  f1              3   23[COMRAM] float 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  lval            4   33[COMRAM] unsigned long 
  4530 ;;  exp1            1   37[COMRAM] unsigned char 
  4531 ;;  sign1           1   32[COMRAM] unsigned char 
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  4   23[COMRAM] long 
  4534 ;; Registers used:
  4535 ;;		wreg, status,2, status,0
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4541 ;;      Params:         4       0       0       0       0       0       0       0       0
  4542 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4543 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4544 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4545 ;;Total ram usage:       15 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_USART_Init
  4551 ;;		_ftoa
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text23
  4556  007380                     __ptext23:
  4557                           	opt stack 0
  4558  007380                     ___fttol:
  4559                           	opt stack 29
  4560                           
  4561                           ;incstack = 0
  4562  007380  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  4563  007384  6A1D               	clrf	(??___fttol+1)& (0+255),c
  4564  007386  6A1E               	clrf	(??___fttol+2)& (0+255),c
  4565  007388  3419               	rlcf	___fttol@f1+1,w,c
  4566  00738A  361C               	rlcf	??___fttol& (0+255),f,c
  4567  00738C  E301               	bnc	u2261
  4568  00738E  801D               	bsf	(??___fttol+1)& (0+255),0,c
  4569  007390                     u2261:
  4570  007390  501C               	movf	??___fttol,w,c
  4571  007392  6E26               	movwf	___fttol@exp1,c
  4572  007394  5026               	movf	___fttol@exp1,w,c
  4573  007396  A4D8               	btfss	status,2,c
  4574  007398  D009               	goto	l2361
  4575  00739A  0E00               	movlw	0
  4576  00739C  6E18               	movwf	?___fttol,c
  4577  00739E  0E00               	movlw	0
  4578  0073A0  6E19               	movwf	?___fttol+1,c
  4579  0073A2  0E00               	movlw	0
  4580  0073A4  6E1A               	movwf	?___fttol+2,c
  4581  0073A6  0E00               	movlw	0
  4582  0073A8  6E1B               	movwf	?___fttol+3,c
  4583  0073AA  0012               	return	
  4584  0073AC                     l2361:
  4585  0073AC  0E17               	movlw	23
  4586  0073AE  6E1C               	movwf	??___fttol& (0+255),c
  4587  0073B0  C018  F01D         	movff	___fttol@f1,??___fttol+1
  4588  0073B4  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  4589  0073B8  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  4590  0073BC  281C               	incf	??___fttol,w,c
  4591  0073BE  6E20               	movwf	(??___fttol+4)& (0+255),c
  4592  0073C0  D004               	goto	u2280
  4593  0073C2                     u2285:
  4594  0073C2  90D8               	bcf	status,0,c
  4595  0073C4  321F               	rrcf	??___fttol+3,f,c
  4596  0073C6  321E               	rrcf	??___fttol+2,f,c
  4597  0073C8  321D               	rrcf	??___fttol+1,f,c
  4598  0073CA                     u2280:
  4599  0073CA  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  4600  0073CC  D7FA               	goto	u2285
  4601  0073CE  501D               	movf	??___fttol+1,w,c
  4602  0073D0  6E21               	movwf	___fttol@sign1,c
  4603  0073D2  8E19               	bsf	___fttol@f1+1,7,c
  4604  0073D4  0EFF               	movlw	255
  4605  0073D6  1618               	andwf	___fttol@f1,f,c
  4606  0073D8  0EFF               	movlw	255
  4607  0073DA  1619               	andwf	___fttol@f1+1,f,c
  4608  0073DC  0E00               	movlw	0
  4609  0073DE  161A               	andwf	___fttol@f1+2,f,c
  4610  0073E0  5018               	movf	___fttol@f1,w,c
  4611  0073E2  6E22               	movwf	___fttol@lval,c
  4612  0073E4  5019               	movf	___fttol@f1+1,w,c
  4613  0073E6  6E23               	movwf	___fttol@lval+1,c
  4614  0073E8  501A               	movf	___fttol@f1+2,w,c
  4615  0073EA  6E24               	movwf	___fttol@lval+2,c
  4616  0073EC  6A25               	clrf	___fttol@lval+3,c
  4617  0073EE  0E8E               	movlw	142
  4618  0073F0  5E26               	subwf	___fttol@exp1,f,c
  4619  0073F2  AE26               	btfss	___fttol@exp1,7,c
  4620  0073F4  D016               	goto	l2383
  4621  0073F6  5026               	movf	___fttol@exp1,w,c
  4622  0073F8  0A80               	xorlw	128
  4623  0073FA  0F8F               	addlw	143
  4624  0073FC  B0D8               	btfsc	status,0,c
  4625  0073FE  D009               	goto	l2379
  4626  007400  0E00               	movlw	0
  4627  007402  6E18               	movwf	?___fttol,c
  4628  007404  0E00               	movlw	0
  4629  007406  6E19               	movwf	?___fttol+1,c
  4630  007408  0E00               	movlw	0
  4631  00740A  6E1A               	movwf	?___fttol+2,c
  4632  00740C  0E00               	movlw	0
  4633  00740E  6E1B               	movwf	?___fttol+3,c
  4634  007410  0012               	return	
  4635  007412                     l2379:
  4636  007412  90D8               	bcf	status,0,c
  4637  007414  3225               	rrcf	___fttol@lval+3,f,c
  4638  007416  3224               	rrcf	___fttol@lval+2,f,c
  4639  007418  3223               	rrcf	___fttol@lval+1,f,c
  4640  00741A  3222               	rrcf	___fttol@lval,f,c
  4641  00741C  3E26               	incfsz	___fttol@exp1,f,c
  4642  00741E  D7F9               	goto	l2379
  4643  007420  D015               	goto	l2393
  4644  007422                     l2383:
  4645  007422  0E17               	movlw	23
  4646  007424  6426               	cpfsgt	___fttol@exp1,c
  4647  007426  D00F               	goto	l2391
  4648  007428  0E00               	movlw	0
  4649  00742A  6E18               	movwf	?___fttol,c
  4650  00742C  0E00               	movlw	0
  4651  00742E  6E19               	movwf	?___fttol+1,c
  4652  007430  0E00               	movlw	0
  4653  007432  6E1A               	movwf	?___fttol+2,c
  4654  007434  0E00               	movlw	0
  4655  007436  6E1B               	movwf	?___fttol+3,c
  4656  007438  0012               	return	
  4657  00743A                     l2389:
  4658  00743A  90D8               	bcf	status,0,c
  4659  00743C  3622               	rlcf	___fttol@lval,f,c
  4660  00743E  3623               	rlcf	___fttol@lval+1,f,c
  4661  007440  3624               	rlcf	___fttol@lval+2,f,c
  4662  007442  3625               	rlcf	___fttol@lval+3,f,c
  4663  007444  0626               	decf	___fttol@exp1,f,c
  4664  007446                     l2391:
  4665  007446  5026               	movf	___fttol@exp1,w,c
  4666  007448  A4D8               	btfss	status,2,c
  4667  00744A  D7F7               	goto	l2389
  4668  00744C                     l2393:
  4669  00744C  5021               	movf	___fttol@sign1,w,c
  4670  00744E  B4D8               	btfsc	status,2,c
  4671  007450  D008               	goto	l2397
  4672  007452  1E25               	comf	___fttol@lval+3,f,c
  4673  007454  1E24               	comf	___fttol@lval+2,f,c
  4674  007456  1E23               	comf	___fttol@lval+1,f,c
  4675  007458  6C22               	negf	___fttol@lval,c
  4676  00745A  0E00               	movlw	0
  4677  00745C  2223               	addwfc	___fttol@lval+1,f,c
  4678  00745E  2224               	addwfc	___fttol@lval+2,f,c
  4679  007460  2225               	addwfc	___fttol@lval+3,f,c
  4680  007462                     l2397:
  4681  007462  C022  F018         	movff	___fttol@lval,?___fttol
  4682  007466  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  4683  00746A  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  4684  00746E  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  4685  007472  0012               	return	
  4686  007474                     __end_of___fttol:
  4687                           	opt stack 0
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           indf2	equ	0xFDF
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function ___ftsub *****************
  4704 ;; Defined at:
  4705 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  f1              3   45[COMRAM] float 
  4708 ;;  f2              3   48[COMRAM] float 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  3   45[COMRAM] float 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4720 ;;      Params:         6       0       0       0       0       0       0       0       0
  4721 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4722 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4723 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4724 ;;Total ram usage:        6 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    2
  4727 ;; This function calls:
  4728 ;;		___ftadd
  4729 ;; This function is called by:
  4730 ;;		_ftoa
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           	psect	text24
  4735  0068B6                     __ptext24:
  4736                           	opt stack 0
  4737  0068B6                     ___ftsub:
  4738                           	opt stack 26
  4739                           
  4740                           ;incstack = 0
  4741  0068B6  5031               	movf	___ftsub@f2,w,c
  4742  0068B8  1032               	iorwf	___ftsub@f2+1,w,c
  4743  0068BA  1033               	iorwf	___ftsub@f2+2,w,c
  4744  0068BC  B4D8               	btfsc	status,2,c
  4745  0068BE  D006               	goto	l2347
  4746  0068C0  0E00               	movlw	0
  4747  0068C2  1A31               	xorwf	___ftsub@f2,f,c
  4748  0068C4  0E00               	movlw	0
  4749  0068C6  1A32               	xorwf	___ftsub@f2+1,f,c
  4750  0068C8  0E80               	movlw	128
  4751  0068CA  1A33               	xorwf	___ftsub@f2+2,f,c
  4752  0068CC                     l2347:
  4753  0068CC  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  4754  0068D0  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  4755  0068D4  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  4756  0068D8  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  4757  0068DC  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  4758  0068E0  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  4759  0068E4  ECC1  F03A         	call	___ftadd	;wreg free
  4760  0068E8  C022  F02E         	movff	?___ftadd,?___ftsub
  4761  0068EC  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  4762  0068F0  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  4763  0068F4  0012               	return	
  4764  0068F6                     __end_of___ftsub:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           indf2	equ	0xFDF
  4775                           postinc2	equ	0xFDE
  4776                           postdec2	equ	0xFDD
  4777                           fsr2h	equ	0xFDA
  4778                           fsr2l	equ	0xFD9
  4779                           status	equ	0xFD8
  4780                           
  4781 ;; *************** function ___ftadd *****************
  4782 ;; Defined at:
  4783 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;  f1              3   33[COMRAM] float 
  4786 ;;  f2              3   36[COMRAM] float 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  exp1            1   44[COMRAM] unsigned char 
  4789 ;;  exp2            1   43[COMRAM] unsigned char 
  4790 ;;  sign            1   42[COMRAM] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  3   33[COMRAM] float 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4800 ;;      Params:         6       0       0       0       0       0       0       0       0
  4801 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4802 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4803 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4804 ;;Total ram usage:       12 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    1
  4807 ;; This function calls:
  4808 ;;		___ftpack
  4809 ;; This function is called by:
  4810 ;;		_main
  4811 ;;		_USART_Init
  4812 ;;		___ftsub
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text25
  4817  007582                     __ptext25:
  4818                           	opt stack 0
  4819  007582                     ___ftadd:
  4820                           	opt stack 29
  4821                           
  4822                           ;incstack = 0
  4823  007582  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  4824  007586  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4825  007588  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4826  00758A  3423               	rlcf	___ftadd@f1+1,w,c
  4827  00758C  3628               	rlcf	??___ftadd& (0+255),f,c
  4828  00758E  E301               	bnc	u1571
  4829  007590  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4830  007592                     u1571:
  4831  007592  5028               	movf	??___ftadd,w,c
  4832  007594  6E2D               	movwf	___ftadd@exp1,c
  4833  007596  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  4834  00759A  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4835  00759C  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4836  00759E  3426               	rlcf	___ftadd@f2+1,w,c
  4837  0075A0  3628               	rlcf	??___ftadd& (0+255),f,c
  4838  0075A2  E301               	bnc	u1581
  4839  0075A4  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4840  0075A6                     u1581:
  4841  0075A6  5028               	movf	??___ftadd,w,c
  4842  0075A8  6E2C               	movwf	___ftadd@exp2,c
  4843  0075AA  502D               	movf	___ftadd@exp1,w,c
  4844  0075AC  B4D8               	btfsc	status,2,c
  4845  0075AE  D00B               	goto	l544
  4846  0075B0  502C               	movf	___ftadd@exp2,w,c
  4847  0075B2  5C2D               	subwf	___ftadd@exp1,w,c
  4848  0075B4  B0D8               	btfsc	status,0,c
  4849  0075B6  D00E               	goto	l1975
  4850  0075B8  502D               	movf	___ftadd@exp1,w,c
  4851  0075BA  0800               	sublw	0
  4852  0075BC  242C               	addwf	___ftadd@exp2,w,c
  4853  0075BE  6E28               	movwf	??___ftadd& (0+255),c
  4854  0075C0  0E18               	movlw	24
  4855  0075C2  6428               	cpfsgt	??___ftadd,c
  4856  0075C4  D007               	goto	l1975
  4857  0075C6                     l544:
  4858  0075C6  C025  F022         	movff	___ftadd@f2,?___ftadd
  4859  0075CA  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  4860  0075CE  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  4861  0075D2  0012               	return	
  4862  0075D4                     l1975:
  4863  0075D4  502C               	movf	___ftadd@exp2,w,c
  4864  0075D6  B4D8               	btfsc	status,2,c
  4865  0075D8  D00B               	goto	l548
  4866  0075DA  502D               	movf	___ftadd@exp1,w,c
  4867  0075DC  5C2C               	subwf	___ftadd@exp2,w,c
  4868  0075DE  B0D8               	btfsc	status,0,c
  4869  0075E0  D00E               	goto	l1981
  4870  0075E2  502C               	movf	___ftadd@exp2,w,c
  4871  0075E4  0800               	sublw	0
  4872  0075E6  242D               	addwf	___ftadd@exp1,w,c
  4873  0075E8  6E28               	movwf	??___ftadd& (0+255),c
  4874  0075EA  0E18               	movlw	24
  4875  0075EC  6428               	cpfsgt	??___ftadd,c
  4876  0075EE  D007               	goto	l1981
  4877  0075F0                     l548:
  4878  0075F0  C022  F022         	movff	___ftadd@f1,?___ftadd
  4879  0075F4  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  4880  0075F8  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  4881  0075FC  0012               	return	
  4882  0075FE                     l1981:
  4883  0075FE  0E06               	movlw	6
  4884  007600  6E2B               	movwf	___ftadd@sign,c
  4885  007602  BE24               	btfsc	___ftadd@f1+2,7,c
  4886  007604  8E2B               	bsf	___ftadd@sign,7,c
  4887  007606  BE27               	btfsc	___ftadd@f2+2,7,c
  4888  007608  8C2B               	bsf	___ftadd@sign,6,c
  4889  00760A  8E23               	bsf	___ftadd@f1+1,7,c
  4890  00760C  0EFF               	movlw	255
  4891  00760E  1622               	andwf	___ftadd@f1,f,c
  4892  007610  0EFF               	movlw	255
  4893  007612  1623               	andwf	___ftadd@f1+1,f,c
  4894  007614  0E00               	movlw	0
  4895  007616  1624               	andwf	___ftadd@f1+2,f,c
  4896  007618  8E26               	bsf	___ftadd@f2+1,7,c
  4897  00761A  0EFF               	movlw	255
  4898  00761C  1625               	andwf	___ftadd@f2,f,c
  4899  00761E  0EFF               	movlw	255
  4900  007620  1626               	andwf	___ftadd@f2+1,f,c
  4901  007622  0E00               	movlw	0
  4902  007624  1627               	andwf	___ftadd@f2+2,f,c
  4903  007626  502C               	movf	___ftadd@exp2,w,c
  4904  007628  5C2D               	subwf	___ftadd@exp1,w,c
  4905  00762A  B0D8               	btfsc	status,0,c
  4906  00762C  D01B               	goto	l2007
  4907  00762E                     l1997:
  4908  00762E  90D8               	bcf	status,0,c
  4909  007630  3625               	rlcf	___ftadd@f2,f,c
  4910  007632  3626               	rlcf	___ftadd@f2+1,f,c
  4911  007634  3627               	rlcf	___ftadd@f2+2,f,c
  4912  007636  062C               	decf	___ftadd@exp2,f,c
  4913  007638  502D               	movf	___ftadd@exp1,w,c
  4914  00763A  182C               	xorwf	___ftadd@exp2,w,c
  4915  00763C  B4D8               	btfsc	status,2,c
  4916  00763E  D00D               	goto	l2005
  4917  007640  062B               	decf	___ftadd@sign,f,c
  4918  007642  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4919  007646  0E07               	movlw	7
  4920  007648  1628               	andwf	??___ftadd,f,c
  4921  00764A  B4D8               	btfsc	status,2,c
  4922  00764C  D006               	goto	l2005
  4923  00764E  D7EF               	goto	l1997
  4924  007650                     l2003:
  4925  007650  90D8               	bcf	status,0,c
  4926  007652  3224               	rrcf	___ftadd@f1+2,f,c
  4927  007654  3223               	rrcf	___ftadd@f1+1,f,c
  4928  007656  3222               	rrcf	___ftadd@f1,f,c
  4929  007658  2A2D               	incf	___ftadd@exp1,f,c
  4930  00765A                     l2005:
  4931  00765A  502C               	movf	___ftadd@exp2,w,c
  4932  00765C  182D               	xorwf	___ftadd@exp1,w,c
  4933  00765E  B4D8               	btfsc	status,2,c
  4934  007660  D01F               	goto	l559
  4935  007662  D7F6               	goto	l2003
  4936  007664                     l2007:
  4937  007664  502D               	movf	___ftadd@exp1,w,c
  4938  007666  5C2C               	subwf	___ftadd@exp2,w,c
  4939  007668  B0D8               	btfsc	status,0,c
  4940  00766A  D01A               	goto	l559
  4941  00766C                     l2009:
  4942  00766C  90D8               	bcf	status,0,c
  4943  00766E  3622               	rlcf	___ftadd@f1,f,c
  4944  007670  3623               	rlcf	___ftadd@f1+1,f,c
  4945  007672  3624               	rlcf	___ftadd@f1+2,f,c
  4946  007674  062D               	decf	___ftadd@exp1,f,c
  4947  007676  502D               	movf	___ftadd@exp1,w,c
  4948  007678  182C               	xorwf	___ftadd@exp2,w,c
  4949  00767A  B4D8               	btfsc	status,2,c
  4950  00767C  D00D               	goto	l2017
  4951  00767E  062B               	decf	___ftadd@sign,f,c
  4952  007680  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4953  007684  0E07               	movlw	7
  4954  007686  1628               	andwf	??___ftadd,f,c
  4955  007688  B4D8               	btfsc	status,2,c
  4956  00768A  D006               	goto	l2017
  4957  00768C  D7EF               	goto	l2009
  4958  00768E                     l2015:
  4959  00768E  90D8               	bcf	status,0,c
  4960  007690  3227               	rrcf	___ftadd@f2+2,f,c
  4961  007692  3226               	rrcf	___ftadd@f2+1,f,c
  4962  007694  3225               	rrcf	___ftadd@f2,f,c
  4963  007696  2A2C               	incf	___ftadd@exp2,f,c
  4964  007698                     l2017:
  4965  007698  502C               	movf	___ftadd@exp2,w,c
  4966  00769A  182D               	xorwf	___ftadd@exp1,w,c
  4967  00769C  A4D8               	btfss	status,2,c
  4968  00769E  D7F7               	goto	l2015
  4969  0076A0                     l559:
  4970  0076A0  AE2B               	btfss	___ftadd@sign,7,c
  4971  0076A2  D00C               	goto	l568
  4972  0076A4  0EFF               	movlw	255
  4973  0076A6  1A22               	xorwf	___ftadd@f1,f,c
  4974  0076A8  0EFF               	movlw	255
  4975  0076AA  1A23               	xorwf	___ftadd@f1+1,f,c
  4976  0076AC  0EFF               	movlw	255
  4977  0076AE  1A24               	xorwf	___ftadd@f1+2,f,c
  4978  0076B0  0E01               	movlw	1
  4979  0076B2  2622               	addwf	___ftadd@f1,f,c
  4980  0076B4  0E00               	movlw	0
  4981  0076B6  2223               	addwfc	___ftadd@f1+1,f,c
  4982  0076B8  0E00               	movlw	0
  4983  0076BA  2224               	addwfc	___ftadd@f1+2,f,c
  4984  0076BC                     l568:
  4985  0076BC  AC2B               	btfss	___ftadd@sign,6,c
  4986  0076BE  D00C               	goto	l2023
  4987  0076C0  0EFF               	movlw	255
  4988  0076C2  1A25               	xorwf	___ftadd@f2,f,c
  4989  0076C4  0EFF               	movlw	255
  4990  0076C6  1A26               	xorwf	___ftadd@f2+1,f,c
  4991  0076C8  0EFF               	movlw	255
  4992  0076CA  1A27               	xorwf	___ftadd@f2+2,f,c
  4993  0076CC  0E01               	movlw	1
  4994  0076CE  2625               	addwf	___ftadd@f2,f,c
  4995  0076D0  0E00               	movlw	0
  4996  0076D2  2226               	addwfc	___ftadd@f2+1,f,c
  4997  0076D4  0E00               	movlw	0
  4998  0076D6  2227               	addwfc	___ftadd@f2+2,f,c
  4999  0076D8                     l2023:
  5000  0076D8  0E00               	movlw	0
  5001  0076DA  6E2B               	movwf	___ftadd@sign,c
  5002  0076DC  5022               	movf	___ftadd@f1,w,c
  5003  0076DE  2625               	addwf	___ftadd@f2,f,c
  5004  0076E0  5023               	movf	___ftadd@f1+1,w,c
  5005  0076E2  2226               	addwfc	___ftadd@f2+1,f,c
  5006  0076E4  5024               	movf	___ftadd@f1+2,w,c
  5007  0076E6  2227               	addwfc	___ftadd@f2+2,f,c
  5008  0076E8  AE27               	btfss	___ftadd@f2+2,7,c
  5009  0076EA  D00E               	goto	l2033
  5010  0076EC  0EFF               	movlw	255
  5011  0076EE  1A25               	xorwf	___ftadd@f2,f,c
  5012  0076F0  0EFF               	movlw	255
  5013  0076F2  1A26               	xorwf	___ftadd@f2+1,f,c
  5014  0076F4  0EFF               	movlw	255
  5015  0076F6  1A27               	xorwf	___ftadd@f2+2,f,c
  5016  0076F8  0E01               	movlw	1
  5017  0076FA  2625               	addwf	___ftadd@f2,f,c
  5018  0076FC  0E00               	movlw	0
  5019  0076FE  2226               	addwfc	___ftadd@f2+1,f,c
  5020  007700  0E00               	movlw	0
  5021  007702  2227               	addwfc	___ftadd@f2+2,f,c
  5022  007704  0E01               	movlw	1
  5023  007706  6E2B               	movwf	___ftadd@sign,c
  5024  007708                     l2033:
  5025  007708  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  5026  00770C  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5027  007710  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5028  007714  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  5029  007718  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  5030  00771C  EC16  F038         	call	___ftpack	;wreg free
  5031  007720  C001  F022         	movff	?___ftpack,?___ftadd
  5032  007724  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  5033  007728  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  5034  00772C  0012               	return	
  5035  00772E                     __end_of___ftadd:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           postinc0	equ	0xFEE
  5044                           wreg	equ	0xFE8
  5045                           indf2	equ	0xFDF
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function ___ftneg *****************
  5053 ;; Defined at:
  5054 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  f1              3    0[COMRAM] float 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;		None
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  3    0[COMRAM] float 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5068 ;;      Params:         3       0       0       0       0       0       0       0       0
  5069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5071 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5072 ;;Total ram usage:        3 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_ftoa
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text26
  5082  006778                     __ptext26:
  5083                           	opt stack 0
  5084  006778                     ___ftneg:
  5085                           	opt stack 28
  5086                           
  5087                           ;incstack = 0
  5088  006778  5001               	movf	___ftneg@f1,w,c
  5089  00677A  1002               	iorwf	___ftneg@f1+1,w,c
  5090  00677C  1003               	iorwf	___ftneg@f1+2,w,c
  5091  00677E  B4D8               	btfsc	status,2,c
  5092  006780  D006               	goto	l601
  5093  006782  0E00               	movlw	0
  5094  006784  1A01               	xorwf	___ftneg@f1,f,c
  5095  006786  0E00               	movlw	0
  5096  006788  1A02               	xorwf	___ftneg@f1+1,f,c
  5097  00678A  0E80               	movlw	128
  5098  00678C  1A03               	xorwf	___ftneg@f1+2,f,c
  5099  00678E                     l601:
  5100  00678E  C001  F001         	movff	___ftneg@f1,?___ftneg
  5101  006792  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5102  006796  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5103  00679A  0012               	return		;funcret
  5104  00679C                     __end_of___ftneg:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function ___ftmul *****************
  5122 ;; Defined at:
  5123 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  f1              3    8[COMRAM] float 
  5126 ;;  f2              3   11[COMRAM] float 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  5129 ;;  sign            1   22[COMRAM] unsigned char 
  5130 ;;  cntr            1   21[COMRAM] unsigned char 
  5131 ;;  exp             1   17[COMRAM] unsigned char 
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  3    8[COMRAM] float 
  5134 ;; Registers used:
  5135 ;;		wreg, status,2, status,0, cstack
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5141 ;;      Params:         6       0       0       0       0       0       0       0       0
  5142 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5143 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5144 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5145 ;;Total ram usage:       15 bytes
  5146 ;; Hardware stack levels used:    1
  5147 ;; Hardware stack levels required when called:    1
  5148 ;; This function calls:
  5149 ;;		___ftpack
  5150 ;; This function is called by:
  5151 ;;		_ftoa
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text27
  5156  00728C                     __ptext27:
  5157                           	opt stack 0
  5158  00728C                     ___ftmul:
  5159                           	opt stack 27
  5160                           
  5161                           ;incstack = 0
  5162  00728C  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  5163  007290  6A10               	clrf	(??___ftmul+1)& (0+255),c
  5164  007292  6A11               	clrf	(??___ftmul+2)& (0+255),c
  5165  007294  340A               	rlcf	___ftmul@f1+1,w,c
  5166  007296  360F               	rlcf	??___ftmul& (0+255),f,c
  5167  007298  E301               	bnc	u2181
  5168  00729A  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  5169  00729C                     u2181:
  5170  00729C  500F               	movf	??___ftmul,w,c
  5171  00729E  6E12               	movwf	___ftmul@exp,c
  5172  0072A0  5012               	movf	___ftmul@exp,w,c
  5173  0072A2  A4D8               	btfss	status,2,c
  5174  0072A4  D007               	goto	l2301
  5175  0072A6  0E00               	movlw	0
  5176  0072A8  6E09               	movwf	?___ftmul,c
  5177  0072AA  0E00               	movlw	0
  5178  0072AC  6E0A               	movwf	?___ftmul+1,c
  5179  0072AE  0E00               	movlw	0
  5180  0072B0  6E0B               	movwf	?___ftmul+2,c
  5181  0072B2  0012               	return	
  5182  0072B4                     l2301:
  5183  0072B4  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  5184  0072B8  6A10               	clrf	(??___ftmul+1)& (0+255),c
  5185  0072BA  6A11               	clrf	(??___ftmul+2)& (0+255),c
  5186  0072BC  340D               	rlcf	___ftmul@f2+1,w,c
  5187  0072BE  360F               	rlcf	??___ftmul& (0+255),f,c
  5188  0072C0  E301               	bnc	u2201
  5189  0072C2  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  5190  0072C4                     u2201:
  5191  0072C4  500F               	movf	??___ftmul,w,c
  5192  0072C6  6E17               	movwf	___ftmul@sign,c
  5193  0072C8  5017               	movf	___ftmul@sign,w,c
  5194  0072CA  A4D8               	btfss	status,2,c
  5195  0072CC  D007               	goto	l2307
  5196  0072CE  0E00               	movlw	0
  5197  0072D0  6E09               	movwf	?___ftmul,c
  5198  0072D2  0E00               	movlw	0
  5199  0072D4  6E0A               	movwf	?___ftmul+1,c
  5200  0072D6  0E00               	movlw	0
  5201  0072D8  6E0B               	movwf	?___ftmul+2,c
  5202  0072DA  0012               	return	
  5203  0072DC                     l2307:
  5204  0072DC  5017               	movf	___ftmul@sign,w,c
  5205  0072DE  0F7B               	addlw	123
  5206  0072E0  2612               	addwf	___ftmul@exp,f,c
  5207  0072E2  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  5208  0072E6  500E               	movf	___ftmul@f2+2,w,c
  5209  0072E8  1A17               	xorwf	___ftmul@sign,f,c
  5210  0072EA  0E80               	movlw	128
  5211  0072EC  1617               	andwf	___ftmul@sign,f,c
  5212  0072EE  8E0A               	bsf	___ftmul@f1+1,7,c
  5213  0072F0  8E0D               	bsf	___ftmul@f2+1,7,c
  5214  0072F2  0EFF               	movlw	255
  5215  0072F4  160C               	andwf	___ftmul@f2,f,c
  5216  0072F6  0EFF               	movlw	255
  5217  0072F8  160D               	andwf	___ftmul@f2+1,f,c
  5218  0072FA  0E00               	movlw	0
  5219  0072FC  160E               	andwf	___ftmul@f2+2,f,c
  5220  0072FE  0E00               	movlw	0
  5221  007300  6E13               	movwf	___ftmul@f3_as_product,c
  5222  007302  0E00               	movlw	0
  5223  007304  6E14               	movwf	___ftmul@f3_as_product+1,c
  5224  007306  0E00               	movlw	0
  5225  007308  6E15               	movwf	___ftmul@f3_as_product+2,c
  5226  00730A  0E07               	movlw	7
  5227  00730C  6E16               	movwf	___ftmul@cntr,c
  5228  00730E                     l2321:
  5229  00730E  A009               	btfss	___ftmul@f1,0,c
  5230  007310  D006               	goto	l2325
  5231  007312  500C               	movf	___ftmul@f2,w,c
  5232  007314  2613               	addwf	___ftmul@f3_as_product,f,c
  5233  007316  500D               	movf	___ftmul@f2+1,w,c
  5234  007318  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  5235  00731A  500E               	movf	___ftmul@f2+2,w,c
  5236  00731C  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  5237  00731E                     l2325:
  5238  00731E  90D8               	bcf	status,0,c
  5239  007320  320B               	rrcf	___ftmul@f1+2,f,c
  5240  007322  320A               	rrcf	___ftmul@f1+1,f,c
  5241  007324  3209               	rrcf	___ftmul@f1,f,c
  5242  007326  90D8               	bcf	status,0,c
  5243  007328  360C               	rlcf	___ftmul@f2,f,c
  5244  00732A  360D               	rlcf	___ftmul@f2+1,f,c
  5245  00732C  360E               	rlcf	___ftmul@f2+2,f,c
  5246  00732E  2E16               	decfsz	___ftmul@cntr,f,c
  5247  007330  D7EE               	goto	l2321
  5248  007332  0E09               	movlw	9
  5249  007334  6E16               	movwf	___ftmul@cntr,c
  5250  007336                     l2331:
  5251  007336  A009               	btfss	___ftmul@f1,0,c
  5252  007338  D006               	goto	l2335
  5253  00733A  500C               	movf	___ftmul@f2,w,c
  5254  00733C  2613               	addwf	___ftmul@f3_as_product,f,c
  5255  00733E  500D               	movf	___ftmul@f2+1,w,c
  5256  007340  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  5257  007342  500E               	movf	___ftmul@f2+2,w,c
  5258  007344  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  5259  007346                     l2335:
  5260  007346  90D8               	bcf	status,0,c
  5261  007348  320B               	rrcf	___ftmul@f1+2,f,c
  5262  00734A  320A               	rrcf	___ftmul@f1+1,f,c
  5263  00734C  3209               	rrcf	___ftmul@f1,f,c
  5264  00734E  90D8               	bcf	status,0,c
  5265  007350  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  5266  007352  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  5267  007354  3213               	rrcf	___ftmul@f3_as_product,f,c
  5268  007356  2E16               	decfsz	___ftmul@cntr,f,c
  5269  007358  D7EE               	goto	l2331
  5270  00735A  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5271  00735E  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5272  007362  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5273  007366  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  5274  00736A  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  5275  00736E  EC16  F038         	call	___ftpack	;wreg free
  5276  007372  C001  F009         	movff	?___ftpack,?___ftmul
  5277  007376  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  5278  00737A  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  5279  00737E  0012               	return	
  5280  007380                     __end_of___ftmul:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function ___ftpack *****************
  5298 ;; Defined at:
  5299 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  arg             3    0[COMRAM] unsigned um
  5302 ;;  exp             1    3[COMRAM] unsigned char 
  5303 ;;  sign            1    4[COMRAM] unsigned char 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  3    0[COMRAM] float 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5315 ;;      Params:         5       0       0       0       0       0       0       0       0
  5316 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5317 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5318 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5319 ;;Total ram usage:        8 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		___altoft
  5325 ;;		___ftadd
  5326 ;;		___ftdiv
  5327 ;;		___ftmul
  5328 ;;		___lltoft
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text28
  5333  00702C                     __ptext28:
  5334                           	opt stack 0
  5335  00702C                     ___ftpack:
  5336                           	opt stack 29
  5337                           
  5338                           ;incstack = 0
  5339  00702C  5004               	movf	___ftpack@exp,w,c
  5340  00702E  B4D8               	btfsc	status,2,c
  5341  007030  D005               	goto	l1897
  5342  007032  5001               	movf	___ftpack@arg,w,c
  5343  007034  1002               	iorwf	___ftpack@arg+1,w,c
  5344  007036  1003               	iorwf	___ftpack@arg+2,w,c
  5345  007038  A4D8               	btfss	status,2,c
  5346  00703A  D00C               	goto	l1903
  5347  00703C                     l1897:
  5348  00703C  0E00               	movlw	0
  5349  00703E  6E01               	movwf	?___ftpack,c
  5350  007040  0E00               	movlw	0
  5351  007042  6E02               	movwf	?___ftpack+1,c
  5352  007044  0E00               	movlw	0
  5353  007046  6E03               	movwf	?___ftpack+2,c
  5354  007048  0012               	return	
  5355  00704A                     l1901:
  5356  00704A  2A04               	incf	___ftpack@exp,f,c
  5357  00704C  90D8               	bcf	status,0,c
  5358  00704E  3203               	rrcf	___ftpack@arg+2,f,c
  5359  007050  3202               	rrcf	___ftpack@arg+1,f,c
  5360  007052  3201               	rrcf	___ftpack@arg,f,c
  5361  007054                     l1903:
  5362  007054  0E00               	movlw	0
  5363  007056  1401               	andwf	___ftpack@arg,w,c
  5364  007058  6E06               	movwf	??___ftpack& (0+255),c
  5365  00705A  0E00               	movlw	0
  5366  00705C  1402               	andwf	___ftpack@arg+1,w,c
  5367  00705E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5368  007060  0EFE               	movlw	254
  5369  007062  1403               	andwf	___ftpack@arg+2,w,c
  5370  007064  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5371  007066  5006               	movf	??___ftpack,w,c
  5372  007068  1007               	iorwf	??___ftpack+1,w,c
  5373  00706A  1008               	iorwf	??___ftpack+2,w,c
  5374  00706C  B4D8               	btfsc	status,2,c
  5375  00706E  D00C               	goto	l1909
  5376  007070  D7EC               	goto	l1901
  5377  007072                     l1905:
  5378  007072  2A04               	incf	___ftpack@exp,f,c
  5379  007074  0E01               	movlw	1
  5380  007076  2601               	addwf	___ftpack@arg,f,c
  5381  007078  0E00               	movlw	0
  5382  00707A  2202               	addwfc	___ftpack@arg+1,f,c
  5383  00707C  0E00               	movlw	0
  5384  00707E  2203               	addwfc	___ftpack@arg+2,f,c
  5385  007080  90D8               	bcf	status,0,c
  5386  007082  3203               	rrcf	___ftpack@arg+2,f,c
  5387  007084  3202               	rrcf	___ftpack@arg+1,f,c
  5388  007086  3201               	rrcf	___ftpack@arg,f,c
  5389  007088                     l1909:
  5390  007088  0E00               	movlw	0
  5391  00708A  1401               	andwf	___ftpack@arg,w,c
  5392  00708C  6E06               	movwf	??___ftpack& (0+255),c
  5393  00708E  0E00               	movlw	0
  5394  007090  1402               	andwf	___ftpack@arg+1,w,c
  5395  007092  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5396  007094  0EFF               	movlw	255
  5397  007096  1403               	andwf	___ftpack@arg+2,w,c
  5398  007098  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5399  00709A  5006               	movf	??___ftpack,w,c
  5400  00709C  1007               	iorwf	??___ftpack+1,w,c
  5401  00709E  1008               	iorwf	??___ftpack+2,w,c
  5402  0070A0  B4D8               	btfsc	status,2,c
  5403  0070A2  D006               	goto	l1913
  5404  0070A4  D7E6               	goto	l1905
  5405  0070A6                     l1911:
  5406  0070A6  0604               	decf	___ftpack@exp,f,c
  5407  0070A8  90D8               	bcf	status,0,c
  5408  0070AA  3601               	rlcf	___ftpack@arg,f,c
  5409  0070AC  3602               	rlcf	___ftpack@arg+1,f,c
  5410  0070AE  3603               	rlcf	___ftpack@arg+2,f,c
  5411  0070B0                     l1913:
  5412  0070B0  BE02               	btfsc	___ftpack@arg+1,7,c
  5413  0070B2  D003               	goto	l521
  5414  0070B4  0E02               	movlw	2
  5415  0070B6  6004               	cpfslt	___ftpack@exp,c
  5416  0070B8  D7F6               	goto	l1911
  5417  0070BA                     l521:
  5418  0070BA  A004               	btfss	___ftpack@exp,0,c
  5419  0070BC  9E02               	bcf	___ftpack@arg+1,7,c
  5420  0070BE  90D8               	bcf	status,0,c
  5421  0070C0  3204               	rrcf	___ftpack@exp,f,c
  5422  0070C2  5004               	movf	___ftpack@exp,w,c
  5423  0070C4  1203               	iorwf	___ftpack@arg+2,f,c
  5424  0070C6  5005               	movf	___ftpack@sign,w,c
  5425  0070C8  A4D8               	btfss	status,2,c
  5426  0070CA  8E03               	bsf	___ftpack@arg+2,7,c
  5427  0070CC  C001  F001         	movff	___ftpack@arg,?___ftpack
  5428  0070D0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5429  0070D4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5430  0070D8  0012               	return	
  5431  0070DA                     __end_of___ftpack:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _OLED_Write_String *****************
  5449 ;; Defined at:
  5450 ;;		line 320 in file "Main.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  s               2   30[COMRAM] PTR unsigned char 
  5453 ;;		 -> ftoa@buf(17), STR_9(13), STR_8(15), STR_7(13), 
  5454 ;;		 -> STR_6(8), STR_5(10), STR_4(13), STR_2(6), 
  5455 ;;		 -> STR_1(6), OLED_Write_Integer@s(20), 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5467 ;;      Params:         2       0       0       0       0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5470 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5471 ;;Total ram usage:        2 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    4
  5474 ;; This function calls:
  5475 ;;		_OLED_PutChar
  5476 ;; This function is called by:
  5477 ;;		_OLED_Write_Integer
  5478 ;;		_OLED_Write_Float
  5479 ;;		_main
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text29
  5484  0069C8                     __ptext29:
  5485                           	opt stack 0
  5486  0069C8                     _OLED_Write_String:
  5487                           	opt stack 26
  5488                           
  5489                           ;Main.c: 322: while (*s) OLED_PutChar( *s++);
  5490                           
  5491                           ;incstack = 0
  5492  0069C8  D014               	goto	l2455
  5493  0069CA                     l2451:
  5494  0069CA  C01F  FFF6         	movff	OLED_Write_String@s,tblptrl
  5495  0069CE  C020  FFF7         	movff	OLED_Write_String@s+1,tblptrh
  5496  0069D2  6AF8               	clrf	tblptru,c
  5497  0069D4  0E07               	movlw	(high __ramtop+-1)
  5498  0069D6  64F7               	cpfsgt	tblptrh,c
  5499  0069D8  D003               	bra	u2397
  5500  0069DA  0008               	tblrd		*
  5501  0069DC  50F5               	movf	tablat,w,c
  5502  0069DE  D005               	bra	u2390
  5503  0069E0                     u2397:
  5504  0069E0  CFF6 FFD9          	movff	tblptrl,fsr2l
  5505  0069E4  CFF7 FFDA          	movff	tblptrh,fsr2h
  5506  0069E8  50DF               	movf	indf2,w,c
  5507  0069EA                     u2390:
  5508  0069EA  ECC2  F037         	call	_OLED_PutChar
  5509  0069EE  4A1F               	infsnz	OLED_Write_String@s,f,c
  5510  0069F0  2A20               	incf	OLED_Write_String@s+1,f,c
  5511  0069F2                     l2455:
  5512  0069F2  C01F  FFF6         	movff	OLED_Write_String@s,tblptrl
  5513  0069F6  C020  FFF7         	movff	OLED_Write_String@s+1,tblptrh
  5514  0069FA  6AF8               	clrf	tblptru,c
  5515  0069FC  0E07               	movlw	(high __ramtop+-1)
  5516  0069FE  64F7               	cpfsgt	tblptrh,c
  5517  006A00  D003               	bra	u2407
  5518  006A02  0008               	tblrd		*
  5519  006A04  50F5               	movf	tablat,w,c
  5520  006A06  D005               	bra	u2400
  5521  006A08                     u2407:
  5522  006A08  CFF6 FFD9          	movff	tblptrl,fsr2l
  5523  006A0C  CFF7 FFDA          	movff	tblptrh,fsr2h
  5524  006A10  50DF               	movf	indf2,w,c
  5525  006A12                     u2400:
  5526  006A12  0900               	iorlw	0
  5527  006A14  B4D8               	btfsc	status,2,c
  5528  006A16  0012               	return	
  5529  006A18  D7D8               	goto	l2451
  5530  006A1A                     __end_of_OLED_Write_String:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           postinc0	equ	0xFEE
  5539                           wreg	equ	0xFE8
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _OLED_Init *****************
  5548 ;; Defined at:
  5549 ;;		line 211 in file "Main.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      void 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5566 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5567 ;;Total ram usage:        0 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    4
  5570 ;; This function calls:
  5571 ;;		_OLED_Command
  5572 ;; This function is called by:
  5573 ;;		_main
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text30
  5578  006DA4                     __ptext30:
  5579                           	opt stack 0
  5580  006DA4                     _OLED_Init:
  5581                           	opt stack 26
  5582                           
  5583                           ;Main.c: 213: OLED_Command(0xAE);
  5584                           
  5585                           ;incstack = 0
  5586  006DA4  0EAE               	movlw	174
  5587  006DA6  ECA0  F033         	call	_OLED_Command
  5588                           
  5589                           ;Main.c: 214: OLED_Command(0xD5);
  5590  006DAA  0ED5               	movlw	213
  5591  006DAC  ECA0  F033         	call	_OLED_Command
  5592                           
  5593                           ;Main.c: 215: OLED_Command(0x80);
  5594  006DB0  0E80               	movlw	128
  5595  006DB2  ECA0  F033         	call	_OLED_Command
  5596                           
  5597                           ;Main.c: 216: OLED_Command(0xA8);
  5598  006DB6  0EA8               	movlw	168
  5599  006DB8  ECA0  F033         	call	_OLED_Command
  5600                           
  5601                           ;Main.c: 217: OLED_Command(0x1F);
  5602  006DBC  0E1F               	movlw	31
  5603  006DBE  ECA0  F033         	call	_OLED_Command
  5604                           
  5605                           ;Main.c: 218: OLED_Command(0xD3);
  5606  006DC2  0ED3               	movlw	211
  5607  006DC4  ECA0  F033         	call	_OLED_Command
  5608                           
  5609                           ;Main.c: 219: OLED_Command(0x0);
  5610  006DC8  0E00               	movlw	0
  5611  006DCA  ECA0  F033         	call	_OLED_Command
  5612                           
  5613                           ;Main.c: 220: OLED_Command(0x40 | 0x0);
  5614  006DCE  0E40               	movlw	64
  5615  006DD0  ECA0  F033         	call	_OLED_Command
  5616                           
  5617                           ;Main.c: 221: OLED_Command(0x8D);
  5618  006DD4  0E8D               	movlw	141
  5619  006DD6  ECA0  F033         	call	_OLED_Command
  5620                           
  5621                           ;Main.c: 222: OLED_Command(0xAF);
  5622  006DDA  0EAF               	movlw	175
  5623  006DDC  ECA0  F033         	call	_OLED_Command
  5624                           
  5625                           ;Main.c: 223: OLED_Command(0x20);
  5626  006DE0  0E20               	movlw	32
  5627  006DE2  ECA0  F033         	call	_OLED_Command
  5628                           
  5629                           ;Main.c: 224: OLED_Command(0x00);
  5630  006DE6  0E00               	movlw	0
  5631  006DE8  ECA0  F033         	call	_OLED_Command
  5632                           
  5633                           ;Main.c: 225: OLED_Command(0xA0 | 0x1);
  5634  006DEC  0EA1               	movlw	161
  5635  006DEE  ECA0  F033         	call	_OLED_Command
  5636                           
  5637                           ;Main.c: 226: OLED_Command(0xC8);
  5638  006DF2  0EC8               	movlw	200
  5639  006DF4  ECA0  F033         	call	_OLED_Command
  5640                           
  5641                           ;Main.c: 227: OLED_Command(0xDA);
  5642  006DF8  0EDA               	movlw	218
  5643  006DFA  ECA0  F033         	call	_OLED_Command
  5644                           
  5645                           ;Main.c: 228: OLED_Command(0x02);
  5646  006DFE  0E02               	movlw	2
  5647  006E00  ECA0  F033         	call	_OLED_Command
  5648                           
  5649                           ;Main.c: 229: OLED_Command(0x81);
  5650  006E04  0E81               	movlw	129
  5651  006E06  ECA0  F033         	call	_OLED_Command
  5652                           
  5653                           ;Main.c: 230: OLED_Command(0x8F);
  5654  006E0A  0E8F               	movlw	143
  5655  006E0C  ECA0  F033         	call	_OLED_Command
  5656                           
  5657                           ;Main.c: 231: OLED_Command(0xD9);
  5658  006E10  0ED9               	movlw	217
  5659  006E12  ECA0  F033         	call	_OLED_Command
  5660                           
  5661                           ;Main.c: 232: OLED_Command(0xF1);
  5662  006E16  0EF1               	movlw	241
  5663  006E18  ECA0  F033         	call	_OLED_Command
  5664                           
  5665                           ;Main.c: 233: OLED_Command(0xDB);
  5666  006E1C  0EDB               	movlw	219
  5667  006E1E  ECA0  F033         	call	_OLED_Command
  5668                           
  5669                           ;Main.c: 234: OLED_Command(0x40);
  5670  006E22  0E40               	movlw	64
  5671  006E24  ECA0  F033         	call	_OLED_Command
  5672                           
  5673                           ;Main.c: 235: OLED_Command(0xA4);
  5674  006E28  0EA4               	movlw	164
  5675  006E2A  ECA0  F033         	call	_OLED_Command
  5676                           
  5677                           ;Main.c: 236: OLED_Command(0xA6);
  5678  006E2E  0EA6               	movlw	166
  5679  006E30  ECA0  F033         	call	_OLED_Command
  5680                           
  5681                           ;Main.c: 237: OLED_Command(0xAF);
  5682  006E34  0EAF               	movlw	175
  5683  006E36  ECA0  F033         	call	_OLED_Command
  5684  006E3A  0012               	return		;funcret
  5685  006E3C                     __end_of_OLED_Init:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           postdec2	equ	0xFDD
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _OLED_Clear *****************
  5703 ;; Defined at:
  5704 ;;		line 300 in file "Main.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  col             2   32[COMRAM] unsigned int 
  5709 ;;  row             2   30[COMRAM] unsigned int 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5719 ;;      Params:         0       0       0       0       0       0       0       0       0
  5720 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5722 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5723 ;;Total ram usage:        4 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    5
  5726 ;; This function calls:
  5727 ;;		_OLED_PutChar
  5728 ;;		_OLED_YX
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text31
  5735  006938                     __ptext31:
  5736                           	opt stack 0
  5737  006938                     _OLED_Clear:
  5738                           	opt stack 25
  5739                           
  5740                           ;Main.c: 302: for ( uint16_t row = 0; row < 8; row++ ) {
  5741                           
  5742                           ;incstack = 0
  5743  006938  0E00               	movlw	0
  5744  00693A  6E20               	movwf	OLED_Clear@row+1,c
  5745  00693C  0E00               	movlw	0
  5746  00693E  6E1F               	movwf	OLED_Clear@row,c
  5747  006940                     l2563:
  5748  006940  5020               	movf	OLED_Clear@row+1,w,c
  5749  006942  E11C               	bnz	l64
  5750  006944  0E08               	movlw	8
  5751  006946  5C1F               	subwf	OLED_Clear@row,w,c
  5752  006948  B0D8               	btfsc	status,0,c
  5753  00694A  0012               	return	
  5754                           
  5755                           ;Main.c: 303: for ( uint16_t col = 0; col < 16; col++ ) {
  5756  00694C  0E00               	movlw	0
  5757  00694E  6E22               	movwf	OLED_Clear@col+1,c
  5758  006950  0E00               	movlw	0
  5759  006952  6E21               	movwf	OLED_Clear@col,c
  5760  006954                     l2569:
  5761  006954  5022               	movf	OLED_Clear@col+1,w,c
  5762  006956  E10F               	bnz	l2581
  5763  006958  0E10               	movlw	16
  5764  00695A  5C21               	subwf	OLED_Clear@col,w,c
  5765  00695C  B0D8               	btfsc	status,0,c
  5766  00695E  D00B               	goto	l2581
  5767                           
  5768                           ;Main.c: 304: OLED_YX( row, col );
  5769  006960  C021  F004         	movff	OLED_Clear@col,OLED_YX@Column
  5770  006964  501F               	movf	OLED_Clear@row,w,c
  5771  006966  EC09  F034         	call	_OLED_YX
  5772                           
  5773                           ;Main.c: 305: OLED_PutChar(' ');
  5774  00696A  0E20               	movlw	32
  5775  00696C  ECC2  F037         	call	_OLED_PutChar
  5776  006970  4A21               	infsnz	OLED_Clear@col,f,c
  5777  006972  2A22               	incf	OLED_Clear@col+1,f,c
  5778  006974  D7EF               	goto	l2569
  5779  006976                     l2581:
  5780  006976  4A1F               	infsnz	OLED_Clear@row,f,c
  5781  006978  2A20               	incf	OLED_Clear@row+1,f,c
  5782  00697A  D7E2               	goto	l2563
  5783  00697C                     l64:
  5784  00697C  0012               	return		;funcret
  5785  00697E                     __end_of_OLED_Clear:
  5786                           	opt stack 0
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           postinc0	equ	0xFEE
  5794                           wreg	equ	0xFE8
  5795                           indf2	equ	0xFDF
  5796                           postinc2	equ	0xFDE
  5797                           postdec2	equ	0xFDD
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _OLED_YX *****************
  5803 ;; Defined at:
  5804 ;;		line 250 in file "Main.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  Row             1    wreg     unsigned char 
  5807 ;;  Column          1    3[COMRAM] unsigned char 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  Row             1    5[COMRAM] unsigned char 
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5819 ;;      Params:         1       0       0       0       0       0       0       0       0
  5820 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5821 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5822 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5823 ;;Total ram usage:        3 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    4
  5826 ;; This function calls:
  5827 ;;		_OLED_Command
  5828 ;; This function is called by:
  5829 ;;		_OLED_Clear
  5830 ;;		_main
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text32
  5835  006812                     __ptext32:
  5836                           	opt stack 0
  5837  006812                     _OLED_YX:
  5838                           	opt stack 26
  5839                           
  5840                           ;incstack = 0
  5841                           ;OLED_YX@Row stored from wreg
  5842  006812  6E06               	movwf	OLED_YX@Row,c
  5843                           
  5844                           ;Main.c: 252: OLED_Command( 0xB0 + Row);
  5845  006814  5006               	movf	OLED_YX@Row,w,c
  5846  006816  0FB0               	addlw	176
  5847  006818  ECA0  F033         	call	_OLED_Command
  5848                           
  5849                           ;Main.c: 253: OLED_Command( 0x00 + (8*Column & 0x0F) );
  5850  00681C  5004               	movf	OLED_YX@Column,w,c
  5851  00681E  0D08               	mullw	8
  5852  006820  50F3               	movf	prodl,w,c
  5853  006822  0B0F               	andlw	15
  5854  006824  ECA0  F033         	call	_OLED_Command
  5855                           
  5856                           ;Main.c: 254: OLED_Command( 0x10 + ((8*Column>>4)&0x0F) );
  5857  006828  5004               	movf	OLED_YX@Column,w,c
  5858  00682A  0D08               	mullw	8
  5859  00682C  0E04               	movlw	4
  5860  00682E  6E05               	movwf	??_OLED_YX& (0+255),c
  5861  006830                     u2385:
  5862  006830  34F4               	rlcf	prodh,w,c
  5863  006832  32F4               	rrcf	prodh,f,c
  5864  006834  32F3               	rrcf	prodl,f,c
  5865  006836  2E05               	decfsz	??_OLED_YX& (0+255),f,c
  5866  006838  D7FB               	goto	u2385
  5867  00683A  50F3               	movf	prodl,w,c
  5868  00683C  0B0F               	andlw	15
  5869  00683E  0F10               	addlw	16
  5870  006840  ECA0  F033         	call	_OLED_Command
  5871  006844  0012               	return		;funcret
  5872  006846                     __end_of_OLED_YX:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _OLED_Command *****************
  5890 ;; Defined at:
  5891 ;;		line 176 in file "Main.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  temp            1    wreg     unsigned char 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  temp            1    2[COMRAM] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5905 ;;      Params:         0       0       0       0       0       0       0       0       0
  5906 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5908 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5909 ;;Total ram usage:        1 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    3
  5912 ;; This function calls:
  5913 ;;		_I2C_Start
  5914 ;;		_I2C_Stop
  5915 ;;		_I2C_Write
  5916 ;; This function is called by:
  5917 ;;		_OLED_Init
  5918 ;;		_OLED_YX
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text33
  5923  006740                     __ptext33:
  5924                           	opt stack 0
  5925  006740                     _OLED_Command:
  5926                           	opt stack 26
  5927                           
  5928                           ;incstack = 0
  5929                           ;OLED_Command@temp stored from wreg
  5930  006740  6E03               	movwf	OLED_Command@temp,c
  5931                           
  5932                           ;Main.c: 178: I2C_Start(0x3C<<1);
  5933  006742  0E78               	movlw	120
  5934  006744  EC7D  F033         	call	_I2C_Start
  5935                           
  5936                           ;Main.c: 180: I2C_Write(0x00);
  5937  006748  0E00               	movlw	0
  5938  00674A  EC72  F033         	call	_I2C_Write
  5939                           
  5940                           ;Main.c: 181: I2C_Write(temp);
  5941  00674E  5003               	movf	OLED_Command@temp,w,c
  5942  006750  EC72  F033         	call	_I2C_Write
  5943                           
  5944                           ;Main.c: 182: I2C_Stop();
  5945  006754  EC66  F033         	call	_I2C_Stop	;wreg free
  5946  006758  0012               	return		;funcret
  5947  00675A                     __end_of_OLED_Command:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           postinc0	equ	0xFEE
  5956                           wreg	equ	0xFE8
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _OLED_PutChar *****************
  5965 ;; Defined at:
  5966 ;;		line 266 in file "Main.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  ch              1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  ch              1   29[COMRAM] unsigned char 
  5971 ;;  bytes           9   16[COMRAM] unsigned char [9]
  5972 ;;  i               2   27[COMRAM] int 
  5973 ;;  base            2   25[COMRAM] PTR const unsigned char 
  5974 ;;		 -> OledFont(768), 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      void 
  5977 ;; Registers used:
  5978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5984 ;;      Params:         0       0       0       0       0       0       0       0       0
  5985 ;;      Locals:        14       0       0       0       0       0       0       0       0
  5986 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5987 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5988 ;;Total ram usage:       18 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    3
  5991 ;; This function calls:
  5992 ;;		_I2C_Start
  5993 ;;		_I2C_Stop
  5994 ;;		_I2C_Write
  5995 ;;		_memmove
  5996 ;; This function is called by:
  5997 ;;		_OLED_Clear
  5998 ;;		_OLED_Write_String
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text34
  6003  006F84                     __ptext34:
  6004                           	opt stack 0
  6005  006F84                     _OLED_PutChar:
  6006                           	opt stack 26
  6007                           
  6008                           ;incstack = 0
  6009                           ;OLED_PutChar@ch stored from wreg
  6010  006F84  6E1E               	movwf	OLED_PutChar@ch,c
  6011                           
  6012                           ;Main.c: 268: if ( ( ch < 32 ) || ( ch > 127 ) ){
  6013  006F86  0E1F               	movlw	31
  6014  006F88  641E               	cpfsgt	OLED_PutChar@ch,c
  6015  006F8A  D003               	goto	l2117
  6016  006F8C  0E7F               	movlw	127
  6017  006F8E  641E               	cpfsgt	OLED_PutChar@ch,c
  6018  006F90  D002               	goto	l2119
  6019  006F92                     l2117:
  6020                           
  6021                           ;Main.c: 269: ch = ' ';
  6022  006F92  0E20               	movlw	32
  6023  006F94  6E1E               	movwf	OLED_PutChar@ch,c
  6024  006F96                     l2119:
  6025                           
  6026                           ;Main.c: 270: }
  6027                           ;Main.c: 272: const uint8_t *base = &OledFont[ch - 32][0];
  6028  006F96  0E00               	movlw	0
  6029  006F98  6E0D               	movwf	??_OLED_PutChar& (0+255),c
  6030  006F9A  0EFF               	movlw	255
  6031  006F9C  6E0E               	movwf	(??_OLED_PutChar+1)& (0+255),c
  6032  006F9E  501E               	movf	OLED_PutChar@ch,w,c
  6033  006FA0  6E0F               	movwf	(??_OLED_PutChar+2)& (0+255),c
  6034  006FA2  6A10               	clrf	(??_OLED_PutChar+3)& (0+255),c
  6035  006FA4  90D8               	bcf	status,0,c
  6036  006FA6  360F               	rlcf	??_OLED_PutChar+2,f,c
  6037  006FA8  3610               	rlcf	??_OLED_PutChar+3,f,c
  6038  006FAA  90D8               	bcf	status,0,c
  6039  006FAC  360F               	rlcf	??_OLED_PutChar+2,f,c
  6040  006FAE  3610               	rlcf	??_OLED_PutChar+3,f,c
  6041  006FB0  90D8               	bcf	status,0,c
  6042  006FB2  360F               	rlcf	??_OLED_PutChar+2,f,c
  6043  006FB4  3610               	rlcf	??_OLED_PutChar+3,f,c
  6044  006FB6  500D               	movf	??_OLED_PutChar,w,c
  6045  006FB8  260F               	addwf	??_OLED_PutChar+2,f,c
  6046  006FBA  500E               	movf	??_OLED_PutChar+1,w,c
  6047  006FBC  2210               	addwfc	??_OLED_PutChar+3,f,c
  6048  006FBE  0E9F               	movlw	low _OledFont
  6049  006FC0  240F               	addwf	??_OLED_PutChar+2,w,c
  6050  006FC2  6E1A               	movwf	OLED_PutChar@base,c
  6051  006FC4  0E7C               	movlw	high _OledFont
  6052  006FC6  2010               	addwfc	??_OLED_PutChar+3,w,c
  6053  006FC8  6E1B               	movwf	OLED_PutChar@base+1,c
  6054                           
  6055                           ;Main.c: 274: uint8_t bytes[9];
  6056                           ;Main.c: 275: bytes[0] = 0x40;
  6057  006FCA  0E40               	movlw	64
  6058  006FCC  6E11               	movwf	OLED_PutChar@bytes,c
  6059                           
  6060                           ;Main.c: 276: memmove( bytes + 1, base, 8 );
  6061  006FCE  0E12               	movlw	low (OLED_PutChar@bytes+1)
  6062  006FD0  6E01               	movwf	memmove@d1,c
  6063  006FD2  0E00               	movlw	high (OLED_PutChar@bytes+1)
  6064  006FD4  6E02               	movwf	memmove@d1+1,c
  6065  006FD6  C01A  F003         	movff	OLED_PutChar@base,memmove@s1
  6066  006FDA  C01B  F004         	movff	OLED_PutChar@base+1,memmove@s1+1
  6067  006FDE  0E00               	movlw	0
  6068  006FE0  6E06               	movwf	memmove@n+1,c
  6069  006FE2  0E08               	movlw	8
  6070  006FE4  6E05               	movwf	memmove@n,c
  6071  006FE6  EC1E  F037         	call	_memmove	;wreg free
  6072                           
  6073                           ;Main.c: 278: I2C_Start(0x3C<<1);
  6074  006FEA  0E78               	movlw	120
  6075  006FEC  EC7D  F033         	call	_I2C_Start
  6076                           
  6077                           ;Main.c: 279: I2C_Write(0x40);
  6078  006FF0  0E40               	movlw	64
  6079  006FF2  EC72  F033         	call	_I2C_Write
  6080                           
  6081                           ;Main.c: 281: int i;
  6082                           ;Main.c: 283: for (i = 1; i <= 8; i++){
  6083  006FF6  0E00               	movlw	0
  6084  006FF8  6E1D               	movwf	OLED_PutChar@i+1,c
  6085  006FFA  0E01               	movlw	1
  6086  006FFC  6E1C               	movwf	OLED_PutChar@i,c
  6087  006FFE                     l2131:
  6088  006FFE  BE1D               	btfsc	OLED_PutChar@i+1,7,c
  6089  007000  D006               	goto	l2135
  6090  007002  501D               	movf	OLED_PutChar@i+1,w,c
  6091  007004  E110               	bnz	l2141
  6092  007006  0E09               	movlw	9
  6093  007008  5C1C               	subwf	OLED_PutChar@i,w,c
  6094  00700A  B0D8               	btfsc	status,0,c
  6095  00700C  D00C               	goto	l2141
  6096  00700E                     l2135:
  6097                           
  6098                           ;Main.c: 284: I2C_Write(bytes[i]);
  6099  00700E  0E11               	movlw	low OLED_PutChar@bytes
  6100  007010  241C               	addwf	OLED_PutChar@i,w,c
  6101  007012  6ED9               	movwf	fsr2l,c
  6102  007014  0E00               	movlw	high OLED_PutChar@bytes
  6103  007016  201D               	addwfc	OLED_PutChar@i+1,w,c
  6104  007018  6EDA               	movwf	fsr2h,c
  6105  00701A  50DF               	movf	indf2,w,c
  6106  00701C  EC72  F033         	call	_I2C_Write
  6107  007020  4A1C               	infsnz	OLED_PutChar@i,f,c
  6108  007022  2A1D               	incf	OLED_PutChar@i+1,f,c
  6109  007024  D7EC               	goto	l2131
  6110  007026                     l2141:
  6111                           
  6112                           ;Main.c: 285: }
  6113                           ;Main.c: 287: I2C_Stop();
  6114  007026  EC66  F033         	call	_I2C_Stop	;wreg free
  6115  00702A  0012               	return		;funcret
  6116  00702C                     __end_of_OLED_PutChar:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           postinc0	equ	0xFEE
  6125                           wreg	equ	0xFE8
  6126                           indf2	equ	0xFDF
  6127                           postinc2	equ	0xFDE
  6128                           postdec2	equ	0xFDD
  6129                           fsr2h	equ	0xFDA
  6130                           fsr2l	equ	0xFD9
  6131                           status	equ	0xFD8
  6132                           
  6133 ;; *************** function _memmove *****************
  6134 ;; Defined at:
  6135 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memmove.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;  d1              2    0[COMRAM] PTR void 
  6138 ;;		 -> OLED_PutChar@bytes(9), 
  6139 ;;  s1              2    2[COMRAM] PTR const void 
  6140 ;;		 -> OledFont(768), 
  6141 ;;  n               2    4[COMRAM] unsigned int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  s               2   10[COMRAM] PTR const unsigned char 
  6144 ;;		 -> OledFont(768), 
  6145 ;;  d               2    8[COMRAM] PTR unsigned char 
  6146 ;;		 -> OLED_PutChar@bytes(9), 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  2    0[COMRAM] PTR void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6156 ;;      Params:         6       0       0       0       0       0       0       0       0
  6157 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6158 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6159 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6160 ;;Total ram usage:       12 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_OLED_PutChar
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text35
  6170  006E3C                     __ptext35:
  6171                           	opt stack 0
  6172  006E3C                     _memmove:
  6173                           	opt stack 28
  6174                           
  6175                           ;incstack = 0
  6176  006E3C  C003  F00B         	movff	memmove@s1,memmove@s
  6177  006E40  C004  F00C         	movff	memmove@s1+1,memmove@s+1
  6178  006E44  C001  F009         	movff	memmove@d1,memmove@d
  6179  006E48  C002  F00A         	movff	memmove@d1+1,memmove@d+1
  6180  006E4C  5009               	movf	memmove@d,w,c
  6181  006E4E  5C0B               	subwf	memmove@s,w,c
  6182  006E50  500A               	movf	memmove@d+1,w,c
  6183  006E52  580C               	subwfb	memmove@s+1,w,c
  6184  006E54  B0D8               	btfsc	status,0,c
  6185  006E56  D02D               	goto	l1939
  6186  006E58  5005               	movf	memmove@n,w,c
  6187  006E5A  240B               	addwf	memmove@s,w,c
  6188  006E5C  6E07               	movwf	??_memmove& (0+255),c
  6189  006E5E  5006               	movf	memmove@n+1,w,c
  6190  006E60  200C               	addwfc	memmove@s+1,w,c
  6191  006E62  6E08               	movwf	(??_memmove+1)& (0+255),c
  6192  006E64  5007               	movf	??_memmove,w,c
  6193  006E66  5C09               	subwf	memmove@d,w,c
  6194  006E68  5008               	movf	??_memmove+1,w,c
  6195  006E6A  580A               	subwfb	memmove@d+1,w,c
  6196  006E6C  B0D8               	btfsc	status,0,c
  6197  006E6E  D021               	goto	l1939
  6198  006E70  5005               	movf	memmove@n,w,c
  6199  006E72  260B               	addwf	memmove@s,f,c
  6200  006E74  5006               	movf	memmove@n+1,w,c
  6201  006E76  220C               	addwfc	memmove@s+1,f,c
  6202  006E78  5005               	movf	memmove@n,w,c
  6203  006E7A  2609               	addwf	memmove@d,f,c
  6204  006E7C  5006               	movf	memmove@n+1,w,c
  6205  006E7E  220A               	addwfc	memmove@d+1,f,c
  6206  006E80                     l1935:
  6207  006E80  060B               	decf	memmove@s,f,c
  6208  006E82  A0D8               	btfss	status,0,c
  6209  006E84  060C               	decf	memmove@s+1,f,c
  6210  006E86  C00B  FFF6         	movff	memmove@s,tblptrl
  6211  006E8A  C00C  FFF7         	movff	memmove@s+1,tblptrh
  6212  006E8E                     	if	0	;tblptru may be non-zero
  6213  006E8E                     	endif
  6214  006E8E                     	if	0	;tblptru may be non-zero
  6215  006E8E                     	endif
  6216  006E8E  0609               	decf	memmove@d,f,c
  6217  006E90  A0D8               	btfss	status,0,c
  6218  006E92  060A               	decf	memmove@d+1,f,c
  6219  006E94  C009  FFD9         	movff	memmove@d,fsr2l
  6220  006E98  C00A  FFDA         	movff	memmove@d+1,fsr2h
  6221  006E9C  0008               	tblrd		*
  6222  006E9E  CFF5 FFDF          	movff	tablat,indf2
  6223  006EA2  0605               	decf	memmove@n,f,c
  6224  006EA4  A0D8               	btfss	status,0,c
  6225  006EA6  0606               	decf	memmove@n+1,f,c
  6226  006EA8  5005               	movf	memmove@n,w,c
  6227  006EAA  1006               	iorwf	memmove@n+1,w,c
  6228  006EAC  B4D8               	btfsc	status,2,c
  6229  006EAE  0012               	return	
  6230  006EB0  D7E7               	goto	l1935
  6231  006EB2                     l1939:
  6232  006EB2  5005               	movf	memmove@n,w,c
  6233  006EB4  1006               	iorwf	memmove@n+1,w,c
  6234  006EB6  B4D8               	btfsc	status,2,c
  6235  006EB8  0012               	return	
  6236  006EBA  C00B  FFF6         	movff	memmove@s,tblptrl
  6237  006EBE  C00C  FFF7         	movff	memmove@s+1,tblptrh
  6238  006EC2                     	if	0	;tblptru may be non-zero
  6239  006EC2                     	endif
  6240  006EC2                     	if	0	;tblptru may be non-zero
  6241  006EC2                     	endif
  6242  006EC2  C009  FFD9         	movff	memmove@d,fsr2l
  6243  006EC6  C00A  FFDA         	movff	memmove@d+1,fsr2h
  6244  006ECA  0008               	tblrd		*
  6245  006ECC  CFF5 FFDF          	movff	tablat,indf2
  6246  006ED0  4A0B               	infsnz	memmove@s,f,c
  6247  006ED2  2A0C               	incf	memmove@s+1,f,c
  6248  006ED4  4A09               	infsnz	memmove@d,f,c
  6249  006ED6  2A0A               	incf	memmove@d+1,f,c
  6250  006ED8  0605               	decf	memmove@n,f,c
  6251  006EDA  A0D8               	btfss	status,0,c
  6252  006EDC  0606               	decf	memmove@n+1,f,c
  6253  006EDE  D7E9               	goto	l1939
  6254  006EE0                     __end_of_memmove:
  6255                           	opt stack 0
  6256                           tblptru	equ	0xFF8
  6257                           tblptrh	equ	0xFF7
  6258                           tblptrl	equ	0xFF6
  6259                           tablat	equ	0xFF5
  6260                           prodh	equ	0xFF4
  6261                           prodl	equ	0xFF3
  6262                           postinc0	equ	0xFEE
  6263                           wreg	equ	0xFE8
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _I2C_Stop *****************
  6272 ;; Defined at:
  6273 ;;		line 212 in file "I2C.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      unsigned char 
  6280 ;; Registers used:
  6281 ;;		wreg
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6287 ;;      Params:         0       0       0       0       0       0       0       0       0
  6288 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6290 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6291 ;;Total ram usage:        0 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_OLED_Command
  6297 ;;		_OLED_PutChar
  6298 ;;		_OLED_Data
  6299 ;;		_I2C_Start_Wait
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text36
  6304  0066CC                     __ptext36:
  6305                           	opt stack 0
  6306  0066CC                     _I2C_Stop:
  6307                           	opt stack 28
  6308                           
  6309                           ;I2C.c: 214: PEN = 1;
  6310                           
  6311                           ;incstack = 0
  6312  0066CC  84C5               	bsf	4037,2,c	;volatile
  6313  0066CE                     l184:
  6314  0066CE  B4C5               	btfsc	4037,2,c	;volatile
  6315  0066D0  D7FE               	goto	l184
  6316                           
  6317                           ;I2C.c: 216: SSPIF = 0;
  6318  0066D2  969E               	bcf	3998,3,c	;volatile
  6319                           
  6320                           ;I2C.c: 218: if(!SSPSTATbits.P);
  6321  0066D4  50C7               	movf	4039,w,c	;volatile
  6322  0066D6  0012               	return	
  6323  0066D8                     __end_of_I2C_Stop:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           postinc0	equ	0xFEE
  6332                           wreg	equ	0xFE8
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _I2C_Start *****************
  6341 ;; Defined at:
  6342 ;;		line 48 in file "I2C.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  slave_write_    1    wreg     unsigned char 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  slave_write_    1    1[COMRAM] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      unsigned char 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0
  6357 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6359 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6360 ;;Total ram usage:        1 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    2
  6363 ;; This function calls:
  6364 ;;		_I2C_Write
  6365 ;; This function is called by:
  6366 ;;		_OLED_Command
  6367 ;;		_OLED_PutChar
  6368 ;;		_OLED_Data
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text37
  6373  0066FA                     __ptext37:
  6374                           	opt stack 0
  6375  0066FA                     _I2C_Start:
  6376                           	opt stack 26
  6377                           
  6378                           ;incstack = 0
  6379                           ;I2C_Start@slave_write_address stored from wreg
  6380  0066FA  6E02               	movwf	I2C_Start@slave_write_address,c
  6381                           
  6382                           ;I2C.c: 50: SSPCON2bits.SEN = 1;
  6383  0066FC  80C5               	bsf	4037,0,c	;volatile
  6384  0066FE                     l132:
  6385  0066FE  B0C5               	btfsc	4037,0,c	;volatile
  6386  006700  D7FE               	goto	l132
  6387                           
  6388                           ;I2C.c: 52: SSPIF=0;
  6389  006702  969E               	bcf	3998,3,c	;volatile
  6390                           
  6391                           ;I2C.c: 53: if(!SSPSTATbits.S)
  6392  006704  A6C7               	btfss	4039,3,c	;volatile
  6393  006706  0012               	return	
  6394                           
  6395                           ;I2C.c: 55: return (I2C_Write(slave_write_address));
  6396                           ;	Return value of _I2C_Start is never used
  6397                           
  6398                           ;I2C.c: 54: return 0;
  6399                           ;	Return value of _I2C_Start is never used
  6400  006708  5002               	movf	I2C_Start@slave_write_address,w,c
  6401  00670A  EC72  F033         	call	_I2C_Write
  6402  00670E  0012               	return	
  6403  006710                     __end_of_I2C_Start:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           postinc0	equ	0xFEE
  6412                           wreg	equ	0xFE8
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _I2C_Write *****************
  6421 ;; Defined at:
  6422 ;;		line 128 in file "I2C.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  data            1    wreg     unsigned char 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  data            1    0[COMRAM] unsigned char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      unsigned char 
  6429 ;; Registers used:
  6430 ;;		wreg, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6436 ;;      Params:         0       0       0       0       0       0       0       0       0
  6437 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6439 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6440 ;;Total ram usage:        1 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    1
  6443 ;; This function calls:
  6444 ;;		_I2C_Ready
  6445 ;; This function is called by:
  6446 ;;		_OLED_Command
  6447 ;;		_OLED_PutChar
  6448 ;;		_I2C_Start
  6449 ;;		_OLED_Data
  6450 ;;		_I2C_Start_Wait
  6451 ;;		_I2C_Repeated_Start
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	text38
  6456  0066E4                     __ptext38:
  6457                           	opt stack 0
  6458  0066E4                     _I2C_Write:
  6459                           	opt stack 27
  6460                           
  6461                           ;incstack = 0
  6462                           ;I2C_Write@data stored from wreg
  6463  0066E4  6E01               	movwf	I2C_Write@data,c
  6464                           
  6465                           ;I2C.c: 130: SSPBUF = data;
  6466  0066E6  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
  6467                           
  6468                           ;I2C.c: 131: I2C_Ready();
  6469  0066EA  EC62  F033         	call	_I2C_Ready	;wreg free
  6470                           
  6471                           ;I2C.c: 133: if (ACKSTAT)
  6472  0066EE  ACC5               	btfss	4037,6,c	;volatile
  6473  0066F0  D002               	goto	l973
  6474                           
  6475                           ;I2C.c: 134: {
  6476                           ;I2C.c: 135: return 1;
  6477  0066F2  0E01               	movlw	1
  6478                           
  6479                           ;I2C.c: 136: }
  6480  0066F4  0012               	return	
  6481  0066F6                     l973:
  6482                           
  6483                           ;I2C.c: 138: else
  6484                           ;I2C.c: 139: {
  6485                           ;I2C.c: 140: return 2;
  6486  0066F6  0E02               	movlw	2
  6487  0066F8  0012               	return	
  6488  0066FA                     __end_of_I2C_Write:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _I2C_Ready *****************
  6506 ;; Defined at:
  6507 ;;		line 230 in file "I2C.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		None
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6524 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6525 ;;Total ram usage:        0 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_I2C_Write
  6531 ;;		_I2C_Read
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text39
  6536  0066C4                     __ptext39:
  6537                           	opt stack 0
  6538  0066C4                     _I2C_Ready:
  6539                           	opt stack 27
  6540  0066C4                     l191:
  6541  0066C4  A69E               	btfss	3998,3,c	;volatile
  6542  0066C6  D7FE               	goto	l191
  6543                           
  6544                           ;I2C.c: 233: SSPIF=0;
  6545  0066C8  969E               	bcf	3998,3,c	;volatile
  6546  0066CA  0012               	return		;funcret
  6547  0066CC                     __end_of_I2C_Ready:
  6548                           	opt stack 0
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           postinc0	equ	0xFEE
  6556                           wreg	equ	0xFE8
  6557                           indf2	equ	0xFDF
  6558                           postinc2	equ	0xFDE
  6559                           postdec2	equ	0xFDD
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _I2C_Init *****************
  6565 ;; Defined at:
  6566 ;;		line 28 in file "I2C.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;		None
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;		None
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6580 ;;      Params:         0       0       0       0       0       0       0       0       0
  6581 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6583 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6584 ;;Total ram usage:        0 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; This function calls:
  6587 ;;		Nothing
  6588 ;; This function is called by:
  6589 ;;		_main
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text40
  6594  006726                     __ptext40:
  6595                           	opt stack 0
  6596  006726                     _I2C_Init:
  6597                           	opt stack 30
  6598                           
  6599                           ;I2C.c: 30: TRISB0 = 1;
  6600                           
  6601                           ;incstack = 0
  6602  006726  8093               	bsf	3987,0,c	;volatile
  6603                           
  6604                           ;I2C.c: 31: TRISB1 = 1;
  6605  006728  8293               	bsf	3987,1,c	;volatile
  6606                           
  6607                           ;I2C.c: 32: SSPSTAT = 80;
  6608  00672A  0E50               	movlw	80
  6609  00672C  6EC7               	movwf	4039,c	;volatile
  6610                           
  6611                           ;I2C.c: 33: SSPCON1 = 0x28;
  6612  00672E  0E28               	movlw	40
  6613  006730  6EC6               	movwf	4038,c	;volatile
  6614                           
  6615                           ;I2C.c: 34: SSPCON2 = 0;
  6616  006732  0E00               	movlw	0
  6617  006734  6EC5               	movwf	4037,c	;volatile
  6618                           
  6619                           ;I2C.c: 35: SSPADD = ((48000000/(4*100000))-1);
  6620  006736  0E77               	movlw	119
  6621  006738  6EC8               	movwf	4040,c	;volatile
  6622                           
  6623                           ;I2C.c: 36: SSPIE = 1;
  6624  00673A  869D               	bsf	3997,3,c	;volatile
  6625                           
  6626                           ;I2C.c: 37: SSPIF = 0;
  6627  00673C  969E               	bcf	3998,3,c	;volatile
  6628  00673E  0012               	return		;funcret
  6629  006740                     __end_of_I2C_Init:
  6630                           	opt stack 0
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           postdec2	equ	0xFDD
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660                           	psect	rparam
  6661  0000                     tblptru	equ	0xFF8
  6662                           tblptrh	equ	0xFF7
  6663                           tblptrl	equ	0xFF6
  6664                           tablat	equ	0xFF5
  6665                           prodh	equ	0xFF4
  6666                           prodl	equ	0xFF3
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           indf2	equ	0xFDF
  6670                           postinc2	equ	0xFDE
  6671                           postdec2	equ	0xFDD
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8


Data Sizes:
    Strings     95
    Constant    808
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      95
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(2) Largest target is 2
		 -> USART_Write_Float@status(COMRAM[2]), OLED_Write_Float@status(COMRAM[2]), 

    memmove@d1	PTR void  size(2) Largest target is 9
		 -> OLED_PutChar@bytes(COMRAM[9]), 

    memmove@d	PTR unsigned char  size(2) Largest target is 9
		 -> OLED_PutChar@bytes(COMRAM[9]), 

    memmove@s1	PTR const void  size(2) Largest target is 768
		 -> OledFont(CODE[768]), 

    memmove@s	PTR const unsigned char  size(2) Largest target is 768
		 -> OledFont(CODE[768]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 20
		 -> USART_Write_Integer@buf(COMRAM[8]), OLED_Write_Integer@s(COMRAM[20]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 20
		 -> USART_Write_Integer@buf(COMRAM[8]), OLED_Write_Integer@s(COMRAM[20]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 20
		 -> USART_Write_Integer@buf(COMRAM[8]), OLED_Write_Integer@s(COMRAM[20]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 20
		 -> USART_Write_Integer@buf(COMRAM[8]), OLED_Write_Integer@s(COMRAM[20]), 

    ftoa@cp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(COMRAM[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(COMRAM[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    USART_Write_Text@text	PTR unsigned char  size(2) Largest target is 20
		 -> ftoa@buf(COMRAM[17]), USART_Write_Integer@buf(COMRAM[8]), STR_3(CODE[6]), OLED_Write_Integer@s(COMRAM[20]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(COMRAM[17]), 

    OLED_Write_Float@buf11	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(COMRAM[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 20
		 -> USART_Write_Integer@buf(COMRAM[8]), OLED_Write_Integer@s(COMRAM[20]), 

    OLED_Write_String@s	PTR unsigned char  size(2) Largest target is 20
		 -> ftoa@buf(COMRAM[17]), STR_9(CODE[13]), STR_8(CODE[15]), STR_7(CODE[13]), 
		 -> STR_6(CODE[8]), STR_5(CODE[10]), STR_4(CODE[13]), STR_2(CODE[6]), 
		 -> STR_1(CODE[6]), OLED_Write_Integer@s(COMRAM[20]), 

    sp__memmove	PTR void  size(2) Largest target is 9
		 -> OLED_PutChar@bytes(COMRAM[9]), 

    OLED_PutChar@base	PTR const unsigned char  size(2) Largest target is 768
		 -> OledFont(CODE[768]), 


Critical Paths under _main in COMRAM

    _main->_OLED_Write_Float
    _delay_ms->_delay_us
    _delay_us->___aldiv
    _USART_Write_Text->_USART_Write
    _USART_Init->___ftadd
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _OLED_Write_Integer->_OLED_Write_String
    _itoa->_utoa
    _utoa->___lwdiv
    _OLED_Write_Float->_ftoa
    _ftoa->___ftsub
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___ftpack
    _OLED_Write_String->_OLED_PutChar
    _OLED_Init->_OLED_Command
    _OLED_Clear->_OLED_PutChar
    _OLED_YX->_OLED_Command
    _OLED_Command->_I2C_Start
    _OLED_PutChar->_memmove
    _I2C_Start->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   35136
                                             73 COMRAM     5     5      0
                           _I2C_Init
                         _OLED_Clear
                          _OLED_Init
                   _OLED_Write_Float
                 _OLED_Write_Integer
                  _OLED_Write_String
                            _OLED_YX
                         _USART_Init
                        _USART_Write
                   _USART_Write_Text
                            ___ftadd
                             ___ftge
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2    1286
                                             17 COMRAM     3     1      2
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             3     1      2     537
                                             14 COMRAM     3     1      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     428
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     392
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _USART_Write_Text                                     6     4      2     297
                                              1 COMRAM     6     4      2
                        _USART_Write
 ---------------------------------------------------------------------------------
 (2) _USART_Write                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4    8918
                                             45 COMRAM     7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2619
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2311
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _OLED_Write_Integer                                  21    21      0    3332
                                             32 COMRAM    21    21      0
                  _OLED_Write_String
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 8     2      6    1762
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     3      6    1199
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _OLED_Write_Float                                     7     4      3   13398
                                             66 COMRAM     7     4      3
                  _OLED_Write_String
                               _ftoa
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                15    10      5   11773
                                             51 COMRAM    15    10      5
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             37    25     12    2099
                                             22 COMRAM    28    16     12
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             23 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3732
                                             45 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    3435
                                             33 COMRAM    12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2665
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _OLED_Write_String                                    2     0      2    1494
                                             30 COMRAM     2     0      2
                       _OLED_PutChar
 ---------------------------------------------------------------------------------
 (1) _OLED_Init                                            0     0      0      60
                       _OLED_Command
 ---------------------------------------------------------------------------------
 (1) _OLED_Clear                                           4     4      0    1647
                                             30 COMRAM     4     4      0
                       _OLED_PutChar
                            _OLED_YX
 ---------------------------------------------------------------------------------
 (1) _OLED_YX                                              3     2      1     702
                                              3 COMRAM     3     2      1
                       _OLED_Command
 ---------------------------------------------------------------------------------
 (2) _OLED_Command                                         1     1      0      60
                                              2 COMRAM     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _OLED_PutChar                                        18    18      0     809
                                             12 COMRAM    18    18      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                            _memmove
 ---------------------------------------------------------------------------------
 (3) _memmove                                             12     6      6     556
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            1     1      0      30
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (4) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Init
   _OLED_Clear
     _OLED_PutChar
       _I2C_Start
         _I2C_Write
           _I2C_Ready
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
       _memmove
     _OLED_YX
       _OLED_Command
         _I2C_Start
           _I2C_Write
             _I2C_Ready
         _I2C_Stop
         _I2C_Write
           _I2C_Ready
   _OLED_Init
     _OLED_Command
       _I2C_Start
         _I2C_Write
           _I2C_Ready
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
   _OLED_Write_Float
     _OLED_Write_String
       _OLED_PutChar
         _I2C_Start
           _I2C_Write
             _I2C_Ready
         _I2C_Stop
         _I2C_Write
           _I2C_Ready
         _memmove
     _ftoa
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
   _OLED_Write_Integer
     _OLED_Write_String
       _OLED_PutChar
         _I2C_Start
           _I2C_Write
             _I2C_Ready
         _I2C_Stop
         _I2C_Write
           _I2C_Ready
         _memmove
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _OLED_Write_String
     _OLED_PutChar
       _I2C_Start
         _I2C_Write
           _I2C_Ready
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
       _memmove
   _OLED_YX
     _OLED_Command
       _I2C_Start
         _I2C_Write
           _I2C_Ready
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
   _USART_Write
   _USART_Write_Text
     _USART_Write
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
   _delay_ms
     _delay_us
       ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5F      20        0.0%
DATA                 0      0      5F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 10 19:15:03 2018

                ___altoft@exp 0011                             l3 680C            __size_of_I2C_Ready 0008  
          __size_of_I2C_Start 0016                   _SSPSTATbits 000FC7                 ___altoft@sign 0012  
          __size_of_I2C_Write 0016                            l64 697C                   __CFG_BOR$ON 000000  
         ___wmul@multiplicand 0003                   __CFG_BORV$3 000000                  ___ftadd@exp1 002D  
                ___ftadd@exp2 002C            OLED_Write_String@s 001F                  ___ftadd@sign 002B  
                         l132 66FE                           l226 66DA                           l191 66C4  
                         l184 66CE                           l521 70BA                           l601 678E  
                         l277 7A9A                           l544 75C6                           l548 75F0  
                         l726 6A62                           l559 76A0                           l647 6F60  
                         l568 76BC                           l736 692E                           l673 6D02  
                         l683 6B1C                           l579 725A                           l973 66F6  
                         _PEN 007E2A      __end_of_OLED_Write_Float 68B6                           wreg 000FE8  
            OLED_Command@temp 0003                  __CFG_LVP$OFF 000000                  ___ftdiv@cntr 001C  
                ___ftdiv@sign 0021                  __CFG_WDT$OFF 000000                          l2003 7650  
                        l2005 765A                          l2101 6904                          l2023 76D8  
                        l2015 768E                          l2007 7664                          l2103 690C  
                        l2033 7708                          l2017 7698                          l2009 766C  
                        l2201 7AF6                          l2105 6910                          l2131 6FFE  
                        l2043 6CB4                          l2203 7AFA                          l2141 7026  
                        l2117 6F92                          l2301 72B4                          l2045 6CC0  
                        l2109 6924                          l2135 700E                          l2119 6F96  
                        l2055 6CF4                          l2047 6CC4                          l2071 6B0E  
                        l2063 6ADA                          l2223 7B6E                          l2215 7B32  
                        l2151 796E                          l2321 730E                          l2065 6AE6  
                        l2145 7954                          l2081 6A30                          l2331 7336  
                        l2307 72DC                          l2067 6AEA                          l2243 7C40  
                        l2227 7B92                          l2219 7B4E                          l2171 7A12  
                        l2083 6A38                          l2403 6EE8                          l2325 731E  
                        l2237 7BBA                          l2229 7B9A                          l2181 7A6C  
                        l2157 7996                          l2165 79F2                          l2245 7C50  
                        l2093 6A58                          l2085 6A3C                          l2413 6F22  
                        l2501 6BCE                          l2335 7346                          l2191 7ABA  
                        l2247 7C68                          l2175 7A48                          l2271 7130  
                        l2361 73AC                          l2433 6A72                          l2185 7A72  
                        l2177 7A5E                          l2513 71CE                          l2273 713C  
                        l2265 710E                          l2451 69CA                          l2347 68CC  
                        l2435 6A7E                          l2179 7A68                          l2611 6B6C  
                        l2291 7194                          l2283 7170                          l2275 7140  
                        l2259 70F6                          l1901 704A                          l2621 6D74  
                        l2455 69F2                          l1911 70A6                          l1903 7054  
                        l2391 7446                          l2383 7422                          l2519 71F6  
                        l2607 6B38                          l2287 717E                          l1913 70B0  
                        l1905 7072                          l2393 744C                          l2465 69A2  
                        l2617 6D44                          l2553 679C                          l2563 6940  
                        l2379 7412                          l2539 7234                          l2627 6DA0  
                        l2555 67A0                          l2581 6976                          l1909 7088  
                        l2397 7462                          l2389 743A                          l2717 7938  
                        l1935 6E80                          l2479 74AC                          l2655 77AA  
                        l2569 6954                          l2681 7842                          l1939 6EB2  
                        l2499 6BC2                          l1981 75FE                          l1957 6770  
                        l2693 787A                          l2677 7832                          l1975 75D4  
                        l1897 703C                          l1997 762E                          STR_1 7FF2  
                        STR_2 7FF2                          STR_3 7FF8                          STR_4 7FAE  
                        STR_5 7FE0                          STR_6 7FEA                          STR_7 7FC8  
                        STR_8 7F9F                          STR_9 7FBB               __end_of_OLED_YX 6846  
                        _CREN 007D5C                   ?_OLED_Clear 0001                          u2201 72C4  
                        u2400 6A12                          u2181 729C                          u2261 7390  
                        u2407 6A08                          u2280 73CA                          u1571 7592  
                        u1581 75A6                          u2285 73C2                          u2461 71B6  
                        u2390 69EA                          u2560 6B64                          u2385 6830  
                        u2481 71DE                          u2570 6B98                          u2397 69E0  
                        u2567 6B5A                          u2577 6B8E                          _RCIF 007CF5  
                        _RCEN 007E2B                          _RSEN 007E29                          _TXIF 007CF4  
                __CFG_PWRT$ON 000000                  __CFG_WRTC$ON 000000                          _main 772E  
                        _ftoa 7474                  ___ftpack@arg 0001                          _itoa 697E  
                ___ftpack@exp 0004              __end_of_I2C_Init 6740                          fsr2h 000FDA  
                        indf2 000FDF                          fsr2l 000FD9                          _utoa 6EE0  
            __end_of_I2C_Stop 66D8                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 0016                  ___param_bank 000010                  ___ftmul@sign 0017  
                ___fttol@exp1 0026            __size_of_OLED_Init 0098                  ___fttol@lval 0022  
               __CFG_PLLDIV$4 000000                __CFG_CCP2MX$ON 000000               __end_of___aldiv 71A6  
                       ?_main 0001                         _ACKEN 007E2C                         ?_ftoa 0034  
                       _ACKDT 007E2D                         ?_itoa 0011               __end_of___ftadd 772E  
                       STR_10 7FD5               __end_of___ftdiv 728C               __end_of___ftneg 679C  
             __end_of___lldiv 6D14                         ?_utoa 0008               __end_of___ftmul 7380  
             __end_of___llmod 6B2E               __end_of___ftsub 68F6               __end_of___fttol 7474  
              __CFG_DEBUG$OFF 000000               __end_of___lwdiv 6A6C               __end_of___lwmod 6938  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _SPBRG 000FAF  
                       _SSPIE 007CEB                         _SSPIF 007CF3                         _TXREG 000FAD  
                       _TXSTA 000FAC                  ___lltoft@exp 0011                 __CFG_WRTD$OFF 000000  
             __end_of_dpowers 7C9F               __end_of_isdigit 6778               __end_of_memmove 6EE0  
               ___ftpack@sign 0005             __end_of_I2C_Ready 66CC                         ftoa@f 0034  
                       ftoa@l 003D             __end_of_I2C_Start 6710             __end_of_I2C_Write 66FA  
                       tablat 000FF5                         utoa@c 0010                         utoa@v 000E  
                       status 000FD8               __end_of_sprintf 7C76                   ?_USART_Init 002E  
             __initialization 6710                  __end_of_main 794A                  __end_of_ftoa 7582  
                __end_of_itoa 69C8                  __end_of_utoa 6F84              __end_of_OledFont 7F9F  
         __size_of_OLED_Clear 0046      __end_of_USART_Write_Text 6BA0                        ??_main 004A  
                      ??_ftoa 0039                 ___fttol@sign1 0021                        ??_itoa 0017  
                      ??_utoa 000E                 __activetblptr 000002                     ??_OLED_YX 0005  
            __end_of___altoft 6C18              ___llmod@dividend 000E            _OLED_Write_Integer 6846  
            __end_of___ftpack 70DA             __end_of_OLED_Init 6E3C              __end_of___lltoft 6AC8  
               ?_OLED_Command 0001                __CFG_WDTPS$128 000000                        _SSPADD 000FC8  
                      _TRISB0 007C98                        _TRISB1 007C99                        _SSPBUF 000FC9  
         ?_OLED_Write_Integer 0001                __CFG_VREGEN$ON 000000              __end_of_delay_ms 67C0  
            __end_of_delay_us 6812                 ?_OLED_PutChar 0001                        ___ftge 6D14  
                   ??___aldiv 0009                        ___wmul 67C0                     ??___ftadd 0028  
                   ??___ftdiv 0019                     ??___ftneg 0004                     ??___lldiv 0009  
                   ??___ftmul 000F                     ??___llmod 0016                     ??___ftsub 0034  
                   ??___fttol 001C                     ??___lwdiv 0005                     ??___lwmod 0005  
                      clear_0 6716                        ftoa@cp 0041         ___ftmul@f3_as_product 0013  
        ??_OLED_Write_Integer 0021                        itoa@cp 0017                     ??_isdigit 0001  
                   ?_I2C_Init 0001                     ??_memmove 0007                     ?_I2C_Stop 0001  
                __mediumconst 7C76                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8           __size_of_USART_Init 007A                     ??_sprintf 0023  
              ??_OLED_Command 0003                    __accesstop 0060       __end_of__initialization 671C  
                  ___altoft@c 0009               __CFG_PBADEN$OFF 000000                    ___ftadd@f1 0022  
                  ___ftadd@f2 0025                    ___ftge@ff1 0001                    ___ftge@ff2 0004  
               ___rparam_used 000001                    ___ftdiv@f1 0013                    ___ftdiv@f2 0016  
                  ___ftdiv@f3 001D                ??_OLED_PutChar 000D                    ___ftneg@f1 0001  
                ?_USART_Write 0001                    ___ftmul@f1 0009                    ___ftmul@f2 000C  
                  ___ftsub@f1 002E                    ___ftsub@f2 0031                    ___fttol@f1 0018  
              __pcstackCOMRAM 0001                    ___lltoft@c 0009                    ??_I2C_Init 0001  
                  ??_I2C_Stop 0001             ?_OLED_Write_Float 0043            ??_OLED_Write_Float 0046  
                sprintf@width 002E                  ??_OLED_Clear 001F                       ?___ftge 0001  
                     ?___wmul 0001                     ?___altoft 0009                       _ACKSTAT 007E2E  
                   ?___ftpack 0001                     ?___lltoft 0009            __end_of_OLED_Clear 697E  
                     _OLED_YX 6812                     ?_delay_ms 0012                     ?_delay_us 000F  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
                   _I2C_Ready 66C4                     _I2C_Start 66FA                     _I2C_Write 66E4  
                ??_USART_Init 0032                       __Hparam 0000                       __Lparam 0000  
                     ___aldiv 70DA               __size_of___ftge 0090                       ___ftadd 7582  
                     ___ftdiv 71A6                       ___ftneg 6778                       ___lldiv 6C92  
             __size_of___wmul 0026                       ___ftmul 728C                       ___llmod 6AC8  
                     ___ftsub 68B6                       ___fttol 7380                       ___lwdiv 6A1A  
                     ___lwmod 68F6                    ??___altoft 000D               __CFG_STVREN$OFF 000000  
                     __pcinit 6710                    ??___ftpack 0006                       __ramtop 0800  
        __end_of_OLED_Command 675A                    ??___lltoft 000D                       __ptext0 772E  
                     __ptext1 679C                       __ptext2 67E6                       __ptext3 70DA  
                     __ptext4 6D14                       __ptext5 6B2E                       __ptext6 66D8  
                     __ptext7 6C18                       __ptext8 71A6                       __ptext9 6BA0  
           ?_USART_Write_Text 0002                USART_Init@temp 0032                       _dpowers 7C77  
                     _isdigit 675A                       _memmove 6E3C            ??_USART_Write_Text 0004  
            ___aldiv@dividend 0001          __end_of_OLED_PutChar 702C                    ??_delay_ms 0014  
                  ??_delay_us 0011            __end_of_USART_Init 6C92                       main@dec 004C  
                     _sprintf 794A                    delay_ms@ms 0012          end_of_initialization 671C  
                     ftoa@buf 004F                       ftoa@rem 0039                    delay_us@us 0011  
                     itoa@buf 0011                       itoa@val 0013                 __Lmediumconst 7C76  
                  ?_I2C_Ready 0001                     _OLED_Init 6DA4                    ?_I2C_Start 0001  
                  ?_I2C_Write 0001               ___lldiv@divisor 0005              OLED_PutChar@base 001A  
             ___lldiv@counter 000D                     _RCSTAbits 000FAB              ___aldiv@quotient 000B  
                     postdec2 000FDD          __size_of_USART_Write 000C                       postinc0 000FEE  
                     postinc2 000FDE                       utoa@buf 0008                       utoa@val 000A  
           OLED_Write_Float@f 0043                USART_Write@out 0001                     _TRISCbits 000F94  
           __size_of_I2C_Init 001A             __size_of_I2C_Stop 000C           USART_Init@baud_rate 002E  
                 ___ftdiv@exp 0020                    ?_OLED_Init 0001                   ___ftmul@exp 0012  
              __end_of___ftge 6DA4                __end_of___wmul 67E6   __size_of_OLED_Write_Integer 0036  
         start_initialization 6710                    ftoa@status 0037                   ??_I2C_Ready 0001  
             ___llmod@divisor 0012                   ??_I2C_Start 0002               ___llmod@counter 0016  
                 ??_I2C_Write 0001     __size_of_OLED_Write_Float 003A             _OLED_Write_String 69C8  
          ?_OLED_Write_String 001F         __size_of_OLED_Command 001A                      ??___ftge 0007  
                    ??___wmul 0005                    OLED_YX@Row 0006              __CFG_LPT1OSC$OFF 000000  
       __size_of_OLED_PutChar 00A8           ??_OLED_Write_String 0021             __size_of___altoft 0078  
           __size_of___ftpack 00AE             __size_of___lltoft 005C                   __pbssCOMRAM 004F  
                    ?_OLED_YX 0004             __size_of_delay_ms 0024             __size_of_delay_us 002C  
                 sprintf@flag 0027                  _OLED_Command 6740     __end_of_OLED_Write_String 6A1A  
                 sprintf@prec 0030                   ??_OLED_Init 0004              ___lwdiv@dividend 0001  
                _OLED_PutChar 6F84                 __pmediumconst 7C76                      ?___aldiv 0001  
                    ?___ftadd 0022                      ?___ftdiv 0013                      ?___ftneg 0001  
                    ?___lldiv 0001                      ?___ftmul 0009                      ?___llmod 000E  
                    ?___ftsub 002E                      ?___fttol 0018                      ?___lwdiv 0001  
                    ?___lwmod 0001                      ?_isdigit 0001                      _I2C_Init 6726  
                    ?_memmove 0001        OLED_Write_Float@status 0046                      _I2C_Stop 66CC  
            ___lwdiv@quotient 0005                      ?_sprintf 0017               ___aldiv@divisor 0005  
   __size_of_USART_Write_Text 0072               ___aldiv@counter 0009                ___wmul@product 0005  
                   delay_ms@i 0014                     delay_us@x 000F             ___wmul@multiplier 0001  
                   main@count 004A              __size_of_OLED_YX 0034  I2C_Start@slave_write_address 0002  
  __size_of_OLED_Write_String 0052                      _OledFont 7C9F              _OLED_Write_Float 687C  
               ??_USART_Write 0001                      __Hrparam 0000                      __Lrparam 0000  
               I2C_Write@data 0001                     memmove@d1 0001                     memmove@s1 0003  
            __size_of___aldiv 00CC              __size_of___ftadd 01AC              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082                      ___altoft 6BA0  
            __size_of___ftmul 00F4              __size_of___llmod 0066              __size_of___ftsub 0040  
            __size_of___fttol 00F4              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                    ___ftpack 702C                      ___lltoft 6A6C                   _isdigit$752 0002  
                  sprintf@val 002A              __size_of_isdigit 001E              __size_of_memmove 00A4  
                    _delay_ms 679C                      _delay_us 67E6               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 6846                      __ptext11 697E  
                    __ptext20 6AC8                      __ptext12 6EE0                      __ptext21 6C92  
                    __ptext13 68F6                      __ptext30 6DA4                      __ptext22 6A6C  
                    __ptext14 6A1A                      __ptext31 6938                      __ptext23 7380  
                    __ptext15 687C                      __ptext40 6726                      __ptext32 6812  
                    __ptext24 68B6                      __ptext16 7474                      __ptext33 6740  
                    __ptext25 7582                      __ptext17 794A                      __ptext34 6F84  
                    __ptext26 6778                      __ptext18 675A                      __ptext35 6E3C  
                    __ptext27 728C                      __ptext19 67C0                      __ptext36 66CC  
                    __ptext28 702C                      __ptext37 66FA                      __ptext29 69C8  
                    __ptext38 66E4                      __ptext39 66C4         OLED_Write_Float@buf11 0048  
            __size_of_sprintf 032C                 __size_of_main 021C                 __size_of_ftoa 010E  
               __size_of_itoa 004A                 __size_of_utoa 00A4                 OLED_Clear@col 0021  
               OLED_Clear@row 001F                 OLED_YX@Column 0004                OLED_PutChar@ch 001E  
         __end_of_USART_Write 66E4    __end_of_OLED_Write_Integer 687C         __CFG_CPUDIV$OSC1_PLL2 000000  
        USART_Write_Text@text 0002                      itoa@base 0015                      isdigit@c 0003  
                    memmove@d 0009                      memmove@n 0005                      memmove@s 000B  
                  _OLED_Clear 6938                     sprintf@ap 0028                     sprintf@sp 0017  
            _USART_Write_Text 6B2E              ___lwmod@dividend 0001              ___lldiv@dividend 0001  
           OLED_PutChar@bytes 0011                 OLED_PutChar@i 001C                      utoa@base 000C  
                    sprintf@c 0032                      sprintf@f 0019              ___lldiv@quotient 0009  
             ___lwmod@divisor 0003               ___lwmod@counter 0005                  ___aldiv@sign 000A  
                 _SSPCON2bits 000FC5            __CFG_FOSC$HSPLL_HS 000000           OLED_Write_Integer@i 0035  
         OLED_Write_Integer@s 0021             USART_Write_Text@i 0006                    _USART_Init 6C18  
                 _USART_Write 66D8  
